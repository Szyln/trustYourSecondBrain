<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>_index on</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/</link><description>Recent content in _index on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://szyln.github.io/trustYourSecondBrain/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/children/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/children/</guid><description>children React 標籤的其中一個屬性 等同於內文 (DOM 的 textContent) 1 2 // JSX 的 React 標籤屬性都可以這樣寫 cosnt element = &amp;lt;p children=&amp;#34;內文內文&amp;#34; /&amp;gt; 1 2 3 // JSX 的 React children 屬性還可以這樣寫，等同於 HTML 的寫法 cosnt element = &amp;lt;p&amp;gt;內文內文&amp;lt;/p&amp;gt; } 原始寫法 寫在第二個屬性參數內 或獨立出來寫在第三個參數內 可以用 array 包住多個 children 多個 children 可，但是多個標籤不行，參照：[[同時生成多個標籤]]</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/test-quartz/test-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/test-quartz/test-2/</guid><description>[[frontend/test quartz/quartz test]]</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/%E8%B7%AF%E5%BE%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/%E8%B7%AF%E5%BE%91/</guid><description>路徑 file path 相對路徑 表示當前目錄：. 表示上層目錄：..
絕對路徑 URL</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E8%A8%BB%E8%A7%A3-comment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E8%A8%BB%E8%A7%A3-comment/</guid><description>EJS 註解 comment 1 2 &amp;lt;%# 註解 %&amp;gt; &amp;lt;%/* 多行註解 */%&amp;gt; #ejs #js #npm #module</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/DNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/DNS/</guid><description>DNS(Domain Name System) 由於 [[IP]] 都是由數字組成，沒有語意，DNS 可以讓訪問者輸入語義化（例如：youtube.com）的方式後，轉換成電腦讀得懂得 IP 位置</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/godaddy-%E8%B2%B7%E7%B6%B2%E5%9D%80%E6%80%8E%E9%BA%BC%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/godaddy-%E8%B2%B7%E7%B6%B2%E5%9D%80%E6%80%8E%E9%BA%BC%E7%94%A8/</guid><description>godaddy 買網址怎麼用 彩蛋週｜課程直播｜切版班 by Sz
網站上線全攻略
步驟 申請網址（godaddy） 代管（cloudflare） 管理 DNS，可以新增很多個導向網站 以導向 github 為例 加密 新增一律加密規則（免費版有三次） 主機 上線後搜尋引擎的設定（google search console） google analytics(GA) 觀察客戶行為 SEO 申請網址(godaddy) 1 名稱.</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTP-request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTP-request/</guid><description>HTTP Request HTML Form 可以做的 GET：獲得資訊（影片、文章……）（最常見） POST：送出資訊 [[Database 數據庫]]可以做的 [[Database 數據庫#C R U D]]
更新 [[獲得請求後更新數據庫資料]]：整個更新 PATCH：只更新有更新的內容 刪除 DELETE #js #internet #backEnd #expressJs #crud #database #mongoose</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTP/</guid><description>HTTP(HyperText Transfer Protocol [[超文字]]傳輸協議) 由於世界可以存在不相關的無限個網路，彼此使用的格式不同，若要形成一個共通的 [[WWW]] 環境，會需要先解決格式不相容的問題，[[HTTP]] 便是一個在 [[WWW]] 網路中傳輸[[超文字]]時，要遵守的共同協議。
訪問網站的動作（[[網路請求]]） 訪問者訪問網站時的動作
1 2 device ------ REQUEST ----&amp;gt; server device &amp;lt;----- RESPONSE ----- server 常見的 [[HTTP request]]（請求） #internet #http #request</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTPs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTPs/</guid><description>HTTPs 與 HTTP 的差異？ Hyper Text Transfer Protocol over Secure Socket Layer 有沒有加密，get, post 什麼都看不到 因此 HTTP 的狀況下不要用 POST，資料都會被看光光 HTTP 是 80 port、HTTPS 是 443 port HTTP 是 應用層、HTTPS 是傳輸層 [[Wireshark]] 上的樣子 有透過 HTTPS 加密的文件，是沒辦法直接查看[[封包]]內容的，TLSv1.</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/IP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/IP/</guid><description>IP 任何裝置連上網路都會有一個辨識的 IP 位置
如何儲存 IP 用[[二進位]]的方式儲存
IPv4 由 4 Bytes (32bits, 2**32 種，約 42億9千萬)組成，目前已經不夠用
1 168.0.0.1 // 每個 byte（用點隔開） 都介於 0-255 中間 IPv6 由 16 Bytes (128bits, 2**128 種)組成，目前還很難想像用完的一天</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/Port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/Port/</guid><description>Port 接口 連上 [[IP]] 後，一個 IP 可能有多個 Port 提供不同的 Server
1 2 // mac 的查詢 port 功能 lsof -nP -i | grep LISTEN 常見的 Port Number 80: HTTP 20: FTP 53: DNS 443: HTTPs 3389: 遠端桌面 網址 利用裝置輸入網址 1 www.</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/TCP-%E5%82%B3%E9%80%81%E9%9B%99%E5%90%91%E6%BA%9D%E9%80%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/TCP-%E5%82%B3%E9%80%81%E9%9B%99%E5%90%91%E6%BA%9D%E9%80%9A/</guid><description>TCP 傳送（雙向溝通） initial connection 嚴謹，需要握手揮手
TCP 三項交握（建立連線） 建立三項交握後，瀏覽器跟伺服器才會建立雙向溝通
1 2 3 瀏覽器 -- [SYN] --&amp;gt; 伺服器 // 1 瀏覽器 &amp;lt;-- [SYN/ACK] -- 伺服器 // 2 瀏覽器 -- [ACK] --&amp;gt; 伺服器 // 3 TCP 三項交握 request（發送請求） 1 2 3 瀏覽器 -- [GET HTTP1.</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/UDP-%E5%82%B3%E9%80%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/UDP-%E5%82%B3%E9%80%81/</guid><description>UDP 傳送 比較 [[TCP 傳送（雙向溝通）]] 不用三向握手，就是一直傳
1 2 3 瀏覽器 &amp;lt;-- [傳資料] -- 伺服器 瀏覽器 &amp;lt;-- [傳資料] -- 伺服器 瀏覽器 &amp;lt;-- [傳資料] -- 伺服器</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/Wireshark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/Wireshark/</guid><description>Wireshark wireshark 下載網址 、 指令表 介面 filter Wireshark 的 filter 功能，可以篩選特定封包
[[封包]] 有網路傳輸的時候就可以看到有很多封包進來，每個封包會這樣一條一條進來
資訊 裡面詳細資訊可以從這裡看</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E5%B0%81%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E5%B0%81%E5%8C%85/</guid><description>封包 Data packet（數據包）是在封包交換網路中傳輸的格式化數據單位。 一個封包最大 1506，TCP 表頭大約 20 Bytes
包含內容 header：包括控制資訊 負載(payload)，和資料本身 封包可以分成多個小封包 封包比作為一封信，表頭資料像信封，資料部分相當於內容。和信不同的是，有時候一個大封包可以分成多個小封包。
利用 [[Wireshark]] 來檢視封包 [[Wireshark#介面]]
TCP 封包 TCP 封包結構 TCP 表頭 20Bytes - 每個 TCP 封包 data 可夾帶 40~1500 Bytes Data 資料</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%8B%80%E6%85%8B%E7%A2%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%8B%80%E6%85%8B%E7%A2%BC/</guid><description>狀態碼 HTTP Status Code Client 傳送 [[HTTP request]] 之後，Server 會給一個狀態碼回去，可以辨識回應結果
1 2 3 app.get(&amp;#34;/&amp;#34;, (req, res) =&amp;gt; { console.log(res.statusCode); // 可以查看該頁面的狀態碼 }) 簡要 1XX 進行 2XX 成功 200 3XX 拒絕 [[302 Found]] 4XX 請求失敗 [[404 Not Found]] 5XX 回應失敗 500 伺服器失敗 #js #backEnd #expressJs #server #npm</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%B6%B2%E8%B7%AFInternet%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%B6%B2%E8%B7%AFInternet%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid><description>如何傳遞資料？ 裝置傳實體資料：傳真 裝置傳裝置：網路 [[網路]] Internet 形成網路可以做什麼事情 共享資料 分工合作 第一階段：裝置連裝置 靠電線連接
但欲連接的裝置增多時，電線會越接越複雜
第二階段：多台裝置 Router 路由器 建立一個統一的中心，讓多台裝置可以直接透過路由器來相連</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%B6%B2%E8%B7%AF%E8%AB%8B%E6%B1%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%B6%B2%E8%B7%AF%E8%AB%8B%E6%B1%82/</guid><description>網路請求 事前知識：[[計算機網路總結]]、[[計算機概論]]
線上簡報
[[Wireshark]]
fiddler 下載網址 、 示範影片
輸入網址的過程發生什麼事情</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B6%B2%E8%B7%AF%E7%B8%BD%E7%B5%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B6%B2%E8%B7%AF%E7%B8%BD%E7%B5%90/</guid><description>計算機網路總結 線上題目設計 線上簡報 當輸入一個網址時，先後執行順序 網址範例： https://www.xx.com.tw/index.html
瀏覽器進行網址 [[DNS]] 解析，並獲得網址對應 [[IP]]
進行 [[TCP 傳送（雙向溝通）]]</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/MAC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/MAC/</guid><description>訊框，網路卡提供
1 38:f9:d3:7f:e9:85 長得像這樣，每個 MAC 都不一樣</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/OSI-%E9%96%8B%E6%94%BE%E5%BC%8F%E9%80%9A%E8%A8%8A%E7%B3%BB%E7%B5%B1%E4%BA%92%E9%80%A3%E5%8F%83%E8%80%83%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%83%E5%B1%A4%E6%9E%B6%E6%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/OSI-%E9%96%8B%E6%94%BE%E5%BC%8F%E9%80%9A%E8%A8%8A%E7%B3%BB%E7%B5%B1%E4%BA%92%E9%80%A3%E5%8F%83%E8%80%83%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%83%E5%B1%A4%E6%9E%B6%E6%A7%8B/</guid><description>OSI 開放式通訊系統互連參考模型 什麼是OSI的7層架構？和常聽到的Layer 7有關？
國際化標準組織(ISO) 制定 Open System Interconnection Reference Model 一種概念，描述制定網路時需要什麼樣的架構，協助網路功能發展時的制定有個參考的標準 幫助學習或是開發時，可以有個參考依據 七層 實體層 資料連結層 網路層 傳輸層 會議層 展示層 應用層 第一層︰實體層（Physical Layer） 最底層，定義裝置間的物理傳輸，規範[[網路]]連結時的規格、速度、電壓等等</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/SSL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/SSL/</guid><description>免費的 SSL：cloudfare</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/TCP-IP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/TCP-IP/</guid><description>TCP/IP 被視為[[OSI 開放式通訊系統互連參考模型的七層架構]]的簡化版，1990 年開始蓬勃發展(與 [[[WWW]]/mail 等相關技術開始發展相關)。
與 OSI 對應 OSI TCP/IP 常見協定與標準 應用層、表現層、會議層 應用層 HTTP, FTP, SMTP, POP3, SSH 傳輸層 傳輸層 TCP, UDP 網路層 網路層 IP 網路連結層、實驗層 網路連結層 Ethernet 實際應用會看到的資訊 可以從 [[Wireshark#介面#對應 TCP IP]] 看實際應用時的資訊</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/WWW/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/WWW/</guid><description>WWW 為一種資訊系統，是 internet 提供的功能之一 跨國網路有兩點需要克服
[[網路(Internet)基本原理#跨國網路]] 格式不相容 [[HTTP]] #network</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E7%B6%B2%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E7%B6%B2%E8%B7%AF/</guid><description> 任兩台裝置相連，即形成網路 世界可存在無限多個不相連網路</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E7%B6%B2%E8%B7%AF%E8%AB%8B%E6%B1%82-%E5%B8%B8%E8%A6%8B%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E7%B6%B2%E8%B7%AF%E8%AB%8B%E6%B1%82-%E5%B8%B8%E8%A6%8B%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/</guid><description>網路請求 常見面試題目 當發出一個 GET/POST 請求時，中間過程會經過哪些傳輸協定
不知道 HTTP、HTTPS 的差異，為什麼在 HTTP 不能用 POST
[[HTTPs]] 一部 100 MB 影片是否能只用一個封包來進行傳送？</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E8%B6%85%E6%96%87%E5%AD%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E8%B6%85%E6%96%87%E5%AD%97/</guid><description>超文字 可以顯示在電子裝置上的文字，其中有可以用點擊方式就可以連接到其他位置、文件的超連結
HTML, CSS, JS 都可以說是實現超文字的相關技術</description></item><item><title/><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E9%9D%9C%E6%85%8B%E8%88%87%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81-Static-and-Dynamic-Website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E9%9D%9C%E6%85%8B%E8%88%87%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81-Static-and-Dynamic-Website/</guid><description>靜態與動態網頁 靜態網頁 Static Website 網頁內容都是事先寫好的，應訪問者需求提供內容 訪問者 -&amp;gt; Server（商品）
動態網頁 Dynamic Website 訪問者 -&amp;gt; 店員 -&amp;gt; 後台（廚師） -&amp;gt; 倉庫（原料）
範例 facebook Youtube 需要登入的網站 #js #nodeJs #web</description></item><item><title>!default</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/default/</guid><description>!defalut 只會吃第一個設定好的 !default 變數</description></item><item><title>1.相關連結</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/1.%E7%9B%B8%E9%97%9C%E9%80%A3%E7%B5%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/1.%E7%9B%B8%E9%97%9C%E9%80%A3%E7%B5%90/</guid><description>相關連結 課程練習手冊 Vue Devtools Chrome, Firefox, 獨立運作版都有 Bootstrap5 Vue 官方提供的 Vue 整合插件 Vue 3 Snippets #js #vue</description></item><item><title>2.ES6 語法糖</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/2.ES6-%E8%AA%9E%E6%B3%95%E7%B3%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/2.ES6-%E8%AA%9E%E6%B3%95%E7%B3%96/</guid><description>語法糖 Syntactic sugar 介紹幾個 ES6 版本中，有幾個語法糖
Object 的「[[物件字面值]] Object Literals」中的語法糖 物件內的 [[Function 簡寫語法糖]] [[變數簡寫語法糖]] [[展開]] 陣列的展開 物件的展開 在空陣列裡展開取得純陣列功能 function 的[[預設參數]] #js #vue</description></item><item><title>302 Found</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/302-Found/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/302-Found/</guid><description>302 Found 指原本存在，但目前已經移除
1 2 3 4 app.get(&amp;#34;/舊網頁&amp;#34;, (req, res) =&amp;gt; { res.status(302); res.sendFile(path.join(__dirname, &amp;#34;moved.html&amp;#34;)); }) 1 2 3 4 5 6 7 // 定義在 &amp;#39;save&amp;#39; 之前要做什麼事 // writeFile: 建立一個檔案，指定寫入什麼內容 studentSchema.</description></item><item><title>4.箭頭函式 arrow function</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/4.%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F-arrow-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/4.%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F-arrow-function/</guid><description>箭頭函式 :::info
1 ( (parameter) =&amp;gt; {&amp;lt;自帶 return&amp;gt;}) 1 (parameter) =&amp;gt; (&amp;lt;return 的值，不用再寫 return&amp;gt;) Arrow Function 的特性 ()： parameter 若只有一個的話，可省略 {}： 只有一行的話，可省略 自帶 return 本身無自己的 this 指向，看外層 ::: 箭頭函式的 this 指向 沒有自己的 this，看上層 function 的 this 是誰 沒有上層 function 那就是看全域 先複習傳統的 function 裡的 this this 是指看呼叫時，是誰呼叫這個 function 的 callback function 通常是在全域下被呼叫的 1 2 3 4 5 6 7 8 9 10 11 12 var name = &amp;#39;全域&amp;#39; const person = { name: &amp;#39;小明&amp;#39;, callName: function () { console.</description></item><item><title>404 Not Found</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/404-Not-Found/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/404-Not-Found/</guid><description>404 Not Found 使用 [[Routing#Routing for all]] 的方法，將任意輸入的網址都導到[[狀態碼]] 404 頁面
1 2 3 4 5 // * 或 /* 都可 app.</description></item><item><title>5.關注點分離</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/5.%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/5.%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2/</guid><description>關注點分離 將文字提取，並寫入資料集 將資料集渲染成畫面 在 script 裡建構 畫面：HTML 資料：DATA 方法：function 元件：component 資料 data 方法、觸發器 method, trigger removeData() render()：渲染成 HTML，除了這裡之外盡量不要寫到 HTML，這部份在 vue 時會交給框架處理不用自己寫 remove() 生命週期：第一次打開時執行的內容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const component = { data: [ // 資料 &amp;#39;這是第一句話&amp;#39;, &amp;#39;這是第二句話&amp;#39;, &amp;#39;這是第三句話&amp;#39; ], removeData(id) { this.</description></item><item><title>7+1 結構</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/7+1-%E7%B5%90%E6%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/7+1-%E7%B5%90%E6%A7%8B/</guid><description>7+1 架構 tags: css scss Sass Guidelines architecture
架構是什麼 為何架構重要 css 易學難精，寫得當下很很直覺，但事後要做維護確很難 跟一起學習的夥伴討論時幾乎都講過同句話
回頭要改的時候，覺得重寫最快 學習起初可能會覺得對於網站，速度最重要，趕著學新技巧、做新頁面 但忽略可維護性、可讀性的後果，一定會是事後浮現
建立一個好架構，難、費時、而且當下不會感受到什麼好處 所以我們先參考巨人的肩膀</description></item><item><title>7.Promise 非同步</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/7.Promise-%E9%9D%9E%E5%90%8C%E6%AD%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/7.Promise-%E9%9D%9E%E5%90%8C%E6%AD%A5/</guid><description>基礎的 Promise 目前為止的程式碼，就像自言自語，都是單方面發出 但如果需要搭配資料庫，就像多了一個對話的對象，除了單方面的講，也要聽，再做反應
promise 就可以讓程式簡潔的做出這樣的一連串行為
結構 這裡有個目前還不懂怎麼建構的 Promise （了解如何運用即可）
1 2 3 4 5 6 7 8 9 10 11 const promiseSetTimeout = (status) =&amp;gt; { // 建立函式，return 是一個 promise return new Promise((resolve, reject) =&amp;gt; { // promise 有兩個參數 resolve, reject setTimeout(() =&amp;gt; { // 這函式執行完，才會開始判斷非同步的結果 if (status) { // 若判斷成功，執行 resovle resolve(&amp;#39;promiseSetTimeout 成功&amp;#39;) // resolve 經過神奇的動作後會得到這 string } else { // 若狀態判斷失敗，執行 reject reject(&amp;#39;promiseSetTimeout 失敗&amp;#39;) } }, 0); }) } 流程 pending：未確認狀態，這裡會先跑完所有的程式碼 setteled：確認狀態 Fulfilled：進入 resolve （成功） Rejected：進入 reject （失敗） 成功的話 執行 .</description></item><item><title>8. Axios 的 API 串接</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/JSON/8.-Axios-%E7%9A%84-API-%E4%B8%B2%E6%8E%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/JSON/8.-Axios-%E7%9A%84-API-%E4%B8%B2%E6%8E%A5/</guid><description>Axios 的 API 串接 他是一個 promise base 的外掛，可以使用他的語法來進行串接
環境建置：使用 CDN 版本 axios 外掛在這
在 html 匯入 cdn 1 &amp;lt;script src=&amp;#34;https://cdn.</description></item><item><title>&lt;head></title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/head/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/head/</guid><description>head head 內容指南
meta 必放
charset viewport name viewport：設定網頁顯示 robots：搜尋引擎更容易搜尋 description：搜尋引擎上的簡介 author：作者 base tag &amp;lt;base&amp;gt;設定全域的 anchor tag 的 [[anchor tag (a)#target]] 可再透過個別 anchor tag 內設定來覆蓋</description></item><item><title>a anchor tag 超連結</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/a-anchor-tag-%E8%B6%85%E9%80%A3%E7%B5%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/a-anchor-tag-%E8%B6%85%E9%80%A3%E7%B5%90/</guid><description>anchor tag 1 2 3 4 5 6 // 順序 &amp;amp;:hover&amp;amp;:focus, &amp;amp;:active ![[heading(h)#^d158d1]]
#未完成 #html/anchor</description></item><item><title>A-frame</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/A-frame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/A-frame/</guid><description>https://test.domojyun.net/MEMO/3D/aframejs.html</description></item><item><title>Accordion 手風琴</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Accordion-%E6%89%8B%E9%A2%A8%E7%90%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Accordion-%E6%89%8B%E9%A2%A8%E7%90%B4/</guid><description>Accordion 手風琴 [[Collapse]] #bs/component/accordion</description></item><item><title>Affinity</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/Affinity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/Affinity/</guid><description>快捷鍵 X: 正副顏色對調 D: 切回原本顏色</description></item><item><title>AJAX</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/AJAX/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/AJAX/</guid><description>AJAX (Asynchronous JavaScript And XML) 拿來接 [[API]]
接 [[Mongoose]] / [[Express.js]]
其他人的 API
能在不更新整個頁面的前提下維護資料。可以加速回應資料，避免重複傳送沒有改的資訊</description></item><item><title>Ambisonics</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/Ambisonics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/Ambisonics/</guid><description>Ambisonics 動手做 Ambisonics in Reaper Ambisonics in Reaper
Why don&amp;rsquo;t you use Reaper? 價格讚 ambisonic 領域中算蠻主流的 nuendo, ableton, pro tools 其實都可以做到（其他 daw 還是要查） 目前有的工具類型 受眾有兩個極端</description></item><item><title>anchor tag (a)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/anchor-tag-a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/anchor-tag-a/</guid><description>anchor tag 1 &amp;lt;a href=&amp;#34;路徑&amp;#34; target=&amp;#34;_self&amp;#34;&amp;gt; [[路徑]] 相對路徑 絕對路徑 target _self：預設 _blank：新頁面 _parent _top</description></item><item><title>API</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/API/</guid><description>API (Application Programming Interface) 應用程式介面（英語：Application Programming Interface） API 是什麼，能吃嗎？ [[API 範例：TDX API]] 資料庫的接口，可以從其他的 [[Database 數據庫]] 獲得資訊 如果是自己的 [[Database 數據庫]] ，可以用 [[Database 數據庫#C R U D]] 來做讀取，但別人的 DB 就需要透過對方提供的 API 做連結 要遵守對方開的規則：所有的規則都在 doc 裡面ㄌ讀ㄅ 有些 API 要付費、要金鑰、或是直接就可以用的也有 接別人 API 的工具：[[Postman]] JS 使用 API：[[Fetch]] API 用語 [[endpoint]] #js #api #async</description></item><item><title>API 提供刪除資料的管道</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E5%88%AA%E9%99%A4%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E5%88%AA%E9%99%A4%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93/</guid><description>API 提供刪除資料的管道 這個功能通常不會提供給用戶使用（這什麼恐怖的功能）
[[API 提供刪除資料的管道#刪除一項]] [[API 提供刪除資料的管道#刪除全部]] 刪除一項 同 [[透過 Postman 刪除數據庫資料]]
1 2 3 4 5 6 7 8 9 10 11 app.</description></item><item><title>API 提供所有資料</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%89%80%E6%9C%89%E8%B3%87%E6%96%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%89%80%E6%9C%89%E8%B3%87%E6%96%99/</guid><description>API 提供所有資料 [[將數據庫資料顯示於網頁]]
[[send 和 sendFile 回應(express)#回應物件的話]]
1 2 3 4 5 6 7 8 9 // /students/（已登入學生表） app.</description></item><item><title>API 提供新增資料的管道</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%96%B0%E5%A2%9E%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%96%B0%E5%A2%9E%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93/</guid><description>API 提供新增資料的管道 [[表單資料存入數據庫]]
不用提供表單了，用戶會直接透過 [[Postman]] 輸入資訊
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // routing for query app.</description></item><item><title>API 提供更新資料的管道</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%9B%B4%E6%96%B0%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%9B%B4%E6%96%B0%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93/</guid><description>API 提供更新資料的管道 [[獲得請求後更新數據庫資料]]
[[API 提供更新資料的管道#PUT]] [[API 提供更新資料的管道#PATCH（還沒搞懂）]] PUT 一樣不用提供表單（[[EJS 提供用戶更新的資料的表單]]），也不用提供 edit 頁面（透過 HTTP Verb 即可）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 收到 put 更新後，更新數據庫 app.</description></item><item><title>API 提供特定資料</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E7%89%B9%E5%AE%9A%E8%B3%87%E6%96%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E7%89%B9%E5%AE%9A%E8%B3%87%E6%96%99/</guid><description>API 提供特定資料 [[使用 Routing for pattern 顯示特定數據庫物件]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 app.</description></item><item><title>API 範例：TDX API</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/API-%E7%AF%84%E4%BE%8BTDX-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/API-%E7%AF%84%E4%BE%8BTDX-API/</guid><description>API 範例：TDX API Web API：TDX 觀光 API 我想獲得台灣觀光景點資料 我輸入說明文件上的 網址請求方式 TDX 伺服器回應我對應的 JSON 格式資料 範例 Code 1 2 3 4 5 6 7 8 9 10 let data; axios.</description></item><item><title>app.set()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/app.set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/app.set/</guid><description>app.set () doc
1 2 app.set(&amp;#39;title&amp;#39;, &amp;#39;My Site&amp;#39;) app.get(&amp;#39;title&amp;#39;) // &amp;#34;My Site&amp;#34; Using template engines with Express #backEnd #node/express #node/npm #node/ejs</description></item><item><title>Array</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/Array/</guid><description>Array 陣列功能一覽 [JavaScript 陣列處理方法 filter(), find(), forEach(), map(), every(),
不是[[原始資料類型 Primitive Data Types]] 是 object 的一種
讀取長度 1 ary.</description></item><item><title>async, await, try, catch</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/async-await-try-catch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/async-await-try-catch/</guid><description>async, await, try, catch [[Promise#改寫 Callback Hell]] 還可以再改寫
async, await async 搭配 await 可以寫出要等到結果之後再存到變數裡的 [[Async（目錄）]] code（.then() 的部份）
1 2 3 4 5 6 7 8 9 // getData 的那段可以放入 function 內 // 這個 function 因為跟非同步有關，所以要使用 async async function showMovie() { const obj = await getData(&amp;#39;Wilson&amp;#39;); // 得到 getData 資料之後才會存進去 obj const movie = await getMovies(obj.</description></item><item><title>Async（目錄）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Async%E7%9B%AE%E9%8C%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Async%E7%9B%AE%E9%8C%84/</guid><description>Async [[AJAX]] ([[Event Queue]]) [[Promise]] ([[Callback Hell]]) [[async, await, try, catch]] [[Promise and Query (Mongoose)]] [[API]] #js #api #async #promise</description></item><item><title>Audio Design 指南</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/Audio-Design-%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/Audio-Design-%E6%8C%87%E5%8D%97/</guid><description>聲音物件 Sound sources (point sources) 一個發聲源，存在在空間中 通常為 mono 的格式，透過設定聲音指向與聲音特性做表現 製作時必須是一個乾檔，不包含任何環境效果 透過聲音物件散佈於球體中，來達到環境音效
Ambisonic soundfields light probes &amp;lt;&amp;ndash;&amp;gt;空間視覺運算 Ambisonic soundfields &amp;lt;&amp;ndash;&amp;gt;空間聽覺運算 運算在聽者的周遭球體空間 可以解碼到 third-order Ambisonics</description></item><item><title>auth-route</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/auth-route/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/auth-route/</guid><description>auth-route [[Authenticate Requests]]
在 routes 資料夾內新增 auth-routes.js
[[匯入(auth-route)]]
[[選擇什麼方式登入]]
[[本地註冊（Local Signup）]]</description></item><item><title>Authenticate Requests</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Authenticate-Requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Authenticate-Requests/</guid><description>Authenticate Requests [[middleware(Authenticate Requests)]]：auth-route 的前置 middleware [[auth-route]]：設定登入時的流程（透過 google, local login） [[profile-route]]：設定登入後顯示的頁面 [[在 MongoDB Atlas 查看 Collection]]：可以查看登入客戶的公開資料
#passport #session #js #authentication #oauth</description></item><item><title>Authentication and Cryptography</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication-and-Cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication-and-Cryptography/</guid><description>Authentication (認證) [[製作登入、註冊介面]] [[建置（登入、註冊）]] [[用資料夾管理 Mongoose models 模組]] [[註冊頁面]] [[登入頁面]] [[會員頁面]] Cryptography(密碼學) [[密碼學簡介]] [[電腦科技的應用：加密]] 加密手法 [[Hash Function]] 問題：[[Dictionary Attack]] 解決方式：[[Salting]] [[bcrypt]] 駭客手法 [[Hack 101]] 進階 479 的影片沒看</description></item><item><title>Babel</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/Babel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/Babel/</guid><description>Babel JavaScript [[Compiler]]，可以將 [[JSX]] 編譯成原始的 React 寫法 不用特別裝，VScode 1 let i = 1; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const express = require(&amp;#39;express&amp;#39;); const app = express(); const mongoose = require(&amp;#39;mongoose&amp;#39;); const dotenv = require(&amp;#39;dotenv&amp;#39;); dotenv.</description></item><item><title>background</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/</guid><description>background 屬性 mdn
概括寫法 沒有順序差別，只有 [[background-position]] / [[background-size]] 要注意要寫在一起 可用 0-1 次：
[[background-attachment]]：fixed, local, scroll image：url() [[background-position]] / [[background-size]] ：圖片比範圍小的時候好用的定位 backgroud-repeat: repeat, space, round, no-repeat, repeat-x, repeat-y 只寫一個代表兩個都一樣，寫兩個的話第一個是 origin，第二個是 clip</description></item><item><title>background-attachment</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-attachment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-attachment/</guid><description>background-attachment mdn
相對 viewport 的固定方式
scroll fixed local</description></item><item><title>background-clip</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-clip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-clip/</guid><description>background-clip mdn
border-box：背景涵蓋 border 底下 padding-box：背景涵蓋 padding 底下（ bootstrap 用 col 要注意 ） content-box：背景僅涵蓋在 content 底下</description></item><item><title>background-position</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-position/</guid><description>background-position mdn
top, left, center, bottom 25% 75%（距左25%距上75%）</description></item><item><title>background-size</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-size/</guid><description>background-size 設定長寬 設定填滿容器方式 ![[object-fit#^1ffb45]]
contain：不填滿，以最大大小放入容器 cover：左右填滿 auto</description></item><item><title>bcrypt</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/bcrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/bcrypt/</guid><description>bcrypt npm 業界很有名拿來做 [[Salting]], [[Hash Function]] 的演算法
1 2 3 4 const bcrypt = require(&amp;#39;bcrypt&amp;#39;); const saltRounds = 10; // cost factor：執行 2 的幾次方次 // const myPlaintextPassword = &amp;#39;s0/\/\P4$$w0rD&amp;#39;; // const someOtherPlaintextPassword = &amp;#39;not_bacon&amp;#39;; 加密密碼 1 2 3 4 5 6 7 8 bcrypt.</description></item><item><title>BEM</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/BEM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/BEM/</guid><description>bem 看這個 CSS 優良手冊 https://ithelp.ithome.com.tw/users/20040221/ironman/3567</description></item><item><title>block</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/block/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/block/</guid><description>block (javascript) block(javascript) [[Scope]] Closure(閉包)
Syntax 用大括號包起來 可以有 label（選用） 常在 if else, for 時使用 Block Statement 1 2 3 4 5 6 { 陳述_1 陳述_2 .</description></item><item><title>body-parser</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/body-parser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/body-parser/</guid><description>body-parser npm
其實 [[Express.js]] 自帶這個模組，可以直接使用
1 app.use(express.urlencoded({ extended: true })); 1 2 3 4 5 6 7 const bodyParser = require(&amp;#34;body-parser&amp;#34;); // middleware 收到請求一定會被執行 app.</description></item><item><title>Boolean</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Boolean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Boolean/</guid><description>Boolean [[falsy value]] null 1 let x = null; 有時候宣告的資料很大，會對暫存記憶體產生負擔，動態調整宣告為 null 釋放記憶體
undefined 1 let x; true value true 42 &amp;ldquo;pizza&amp;rdquo; {} 空 object [] 空 array NaN：not a number #js #dataType #primitiveDataType</description></item><item><title>Bootstrap</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Bootstrap/</guid><description>Bootstrap [[background (util)]] [[bs grid system]] [[BS 元件一覽 Cheatsheet]] [[Cards]] [[codepen環境]] [[container]] [[Font]] [[Grid 格線系統]] [[gulp 環境的客製化]] [[image]] [[Modal]] [[position]] [[ratio]] [[Size]] [[Spacer]] [[utilities API 修改]] [[客製化 Sass]] [[form(bootstrap)]] #bs #index</description></item><item><title>box-sizing</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/box-sizing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/box-sizing/</guid><description>box-sizing: boder-box; padding-box：寬度只算到padding，border額外加在外面 border-box：寬度算到border</description></item><item><title>Branch</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/Branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/Branch/</guid><description>Branch 新增 branch
1 git branch login(一個分支的名稱) 移動到該 branch
1 git checkout login :::info checkout 可以讓你在不同 branch 的版本間做切換 :::</description></item><item><title>Bruteforced</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Bruteforced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Bruteforced/</guid><description>Bruteforced 暴力破解，越簡單、越短的密碼，越容易被暴力破解 可以用 kaspersky password checker、mac內建的密碼工具檢查目前密碼夠不夠安全
#cryptogrphy</description></item><item><title>bs grid system</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/bs-grid-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/bs-grid-system/</guid><description>配置規則 row 底下只能是 column column 之上只能是 row Rows（列） 與 Columns（欄） gutter column 間的水平 padding 用來控制 column 之間的間距</description></item><item><title>BS 元件一覽 Cheatsheet</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/BS-%E5%85%83%E4%BB%B6%E4%B8%80%E8%A6%BD-Cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/BS-%E5%85%83%E4%BB%B6%E4%B8%80%E8%A6%BD-Cheatsheet/</guid><description>BS4 component 一覽 做元件一覽的時候可用：cheetsheet #bs/component</description></item><item><title>button</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/button/</guid><description>button 標籤 不是 form 專用 type submit 的 input，button 在有 JS 客製化 event 時用 要用的話記得加 type 確保正常運作 #form #html</description></item><item><title>Caesar cipher</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Caesar-cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Caesar-cipher/</guid><description>Caesar cipher 平行移動每個密碼作加密，移動幾個字母就是他的 key（例如：a -&amp;gt; c, w-&amp;gt;k ）
#cryptogrphy</description></item><item><title>Callback Hell</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Callback-Hell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Callback-Hell/</guid><description>Callback Hell 早期沒有 [[Promise]] 功能的時候，要用很多個 callback 功能來達成，但功能一複雜就會形成 [[Callback Hell]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function getData(name) { setTimeout(() =&amp;gt; { return { name, age: Math.</description></item><item><title>CallStack</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/CallStack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/CallStack/</guid><description>CallStack loupe 實際 CallStack 運算的樣子
[[Execution Context]]中，到了 [[Execution Phase]] 會按照 CallStack 的原則開始跑
解釋 Call 指 Calling funtions ，執行 funciton 時會產生 callstack</description></item><item><title>caption 表格標題</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/table/caption-%E8%A1%A8%E6%A0%BC%E6%A8%99%E9%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/table/caption-%E8%A1%A8%E6%A0%BC%E6%A8%99%E9%A1%8C/</guid><description>caption 表格標題，請放在 table 內第一個標籤
樣式 mdn
caption-side 設定 caption 該位於 table 的哪裡
1 caption-side: top; #html/table</description></item><item><title>Cards</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Cards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Cards/</guid><description>Cards 基本結構 card 不包含 margin，預設寬度適應父層
1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;!-- card，寬度可自訂 --&amp;gt; &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;!</description></item><item><title>carl.gg 建立身分組防止 discord 洗版</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Discord/carl.gg-%E5%BB%BA%E7%AB%8B%E8%BA%AB%E5%88%86%E7%B5%84%E9%98%B2%E6%AD%A2-discord-%E6%B4%97%E7%89%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Discord/carl.gg-%E5%BB%BA%E7%AB%8B%E8%BA%AB%E5%88%86%E7%B5%84%E9%98%B2%E6%AD%A2-discord-%E6%B4%97%E7%89%88/</guid><description>carl.gg carl. gg 可以透過回應表符的方法，來讓成員加入想要的身分組，可以做到的效果像是
不用管理員設定，成員自己選擇要加入什麼身分組 管理員可以按照身分組區分私人頻道，防止伺服器變大之後，避免成員被不感興趣的頻道洗版 這個機器人可以做到其他很多效果，這邊就只針對回應表符指定身分組的功能做說明
邀請機器人到伺服器 登入完後選擇你要加入機器人的伺服器（你必須是管理者或有管理權限） 確定伺服器正確後「繼續」 以下清單是他會要有的權限，如果你本身沒有更動這些權限的權限（？）的話，後續安裝會有些問題，ok 後「授權」，結束後會有個不是機器人驗證 快速導覽（可跳過） 進到快速開始的導覽（可以直接跳過） 設定打指令的時候前綴字，可跳過 用戶進到你的伺服器時顯示的招呼語，可跳過 示範怎麼建立連結身分組的投票區塊 新增任何一個都會幫你自動建立對應的身分組，如果他的選項不合你使用，可跳過晚點自己建 沒特別研究，就照他的建立新的 muted role（create new role） 沒特別研究，可跳過 快速導覽完成頁面 跟你推薦一下他們另一個機器人，是累積貢獻值的系統，有需要才裝 設定畫面 編輯機器人名稱 進去設定畫面後，這裡可幫機器人編輯名稱 Reaction roles 以下會講解這些內容在哪裡設定 Reaction roles 這裡可以建立身分組投票 基本設定 Mode Post embed 就可以 #你要顯示這個投票的頻道 Content 投票設定 下面有兩個選項，都會用到</description></item><item><title>cd</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/cd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/cd/</guid><description>cd 移動到資料夾 進得了資料夾，才能對他版本控制
cd 拖曳資料夾於此</description></item><item><title>CDN</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/CDN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/CDN/</guid><description>常用 cdn Material Icons Guide | Google Fonts | Google Developers
#html #cdn</description></item><item><title>Cipher</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Cipher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Cipher/</guid><description>加密（Encrypt）過後的資料
#cryptogrphy</description></item><item><title>Class</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/Class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/Class/</guid><description>Class 改善 [[Prototype Inheritance]] 的繁複寫法的語法糖，本質不變 可以理解為：類、模版 可以簡化 [[Constructor]] 跟 [[Prototype]] 的建立 會用到的功能 原 Class 1 2 3 4 5 6 7 8 9 10 class 原本的 { constructor(參數們) { // 物件實例的屬性們 } // prototype 函數() { // 共用的功能 } } 繼承的 Class 1 2 3 4 5 6 7 8 9 10 11 class 繼承的 extends 原本的 { constructor(參數們, 新的參數們) { super(原本的參數們); // 離散數學的名詞，super 代表母集合 // 新物件實例的屬性們 } // prototype 新函數() { // 新的 class 共用的功能 } } [[Prototype Inheritance#原有的]] 改寫 [[Constructor]] 與 [[Prototype]] 直接寫在 [[Class]] 裡面</description></item><item><title>Class Component</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Class-Component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Class-Component/</guid><description>Class Component 現今版本已經不建議使用，參考：[[Component：可重複利用、自定參數的元件]]
1 2 3 4 5 6 7 8 9 10 11 12 13 // 一定要繼承 React.</description></item><item><title>class 或是 className</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/class-%E6%88%96%E6%98%AF-className/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/class-%E6%88%96%E6%98%AF-className/</guid><description>class 或是 className className 是一種 DOM 屬性 但 class 在 JS 是保留字，不能拿來命名，用 className 比較保險
#js/react #css</description></item><item><title>clear()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/clear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/clear/</guid><description>clear () 清空</description></item><item><title>Closure(Scope Chaining)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/ClosureScope-Chaining/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/ClosureScope-Chaining/</guid><description>Clousure 閉包 (Scope Chaining) 執行函數時，呼叫變數會依循
先在函數內找 到函數被宣告的地方找 1 2 3 4 5 6 let name = &amp;#34;sam&amp;#34;; function fn() { let name = &amp;#34;alex&amp;#34;; console.</description></item><item><title>codepen環境</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/codepen%E7%92%B0%E5%A2%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/codepen%E7%92%B0%E5%A2%83/</guid><description>在 codepen 用 bs setting &amp;gt; css &amp;gt; add external stylesheets/pens &amp;gt; search: bootstrap
需注意版本 5.0 尚未實裝，還是要手動改 #codepen #bs</description></item><item><title>colgroup 表格縱向群組產生樣式</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/table/colgroup-%E8%A1%A8%E6%A0%BC%E7%B8%B1%E5%90%91%E7%BE%A4%E7%B5%84%E7%94%A2%E7%94%9F%E6%A8%A3%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/table/colgroup-%E8%A1%A8%E6%A0%BC%E7%B8%B1%E5%90%91%E7%BE%A4%E7%B5%84%E7%94%A2%E7%94%9F%E6%A8%A3%E5%BC%8F/</guid><description>colgroup 表格縱向群組產生樣式 mdn
1 2 3 4 5 6 7 8 9 &amp;lt;colgroup&amp;gt; &amp;lt;col /&amp;gt; &amp;lt;col /&amp;gt; &amp;lt;col span=&amp;#34;1&amp;#34; class=&amp;#34;bg-secondary-light&amp;#34; /&amp;gt; &amp;lt;col /&amp;gt; &amp;lt;col span=&amp;#34;1&amp;#34; class=&amp;#34;bg-secondary-light&amp;#34; /&amp;gt; &amp;lt;col /&amp;gt; &amp;lt;col span=&amp;#34;1&amp;#34; class=&amp;#34;bg-secondary-light&amp;#34; /&amp;gt; &amp;lt;/colgroup&amp;gt; #html/table #css</description></item><item><title>Collapse</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Collapse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Collapse/</guid><description>Collapse 作用 按鈕 展開內容 添加元件 data-bs-toggle=&amp;quot;collapse&amp;quot; class=&amp;quot;collapse&amp;quot; 指定展開誰 href=&amp;quot;#展開 id&amp;quot; role=&amp;quot;button&amp;quot; id=&amp;quot;展開id&amp;quot; 一對多控制 href=&amp;quot;.</description></item><item><title>Colocating</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Colocating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Colocating/</guid><description>Colocating 在 [[State Lifting]] 時，因為子層多個元件需要同時用一個 state 資訊，所以將該 state 提升到母層使用，並以 props 的方式下放到子層做使用
但遇到修改 code 時，共用的 state 不再需要共用時（只剩下一個元件要使用），就必須做 Colocating，將在母層的 state 回歸需要的子層，保持 state 離使用環境最近的原則</description></item><item><title>color-scheme 暗黑模式</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/color-scheme-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/color-scheme-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F/</guid><description>color-scheme 暗黑模式 可以透過 HTML 就做到基本的暗黑模式， https://www.youtube.com/watch?v=n3lcjY4Mm00</description></item><item><title>comment</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/comment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/comment/</guid><description>Comment 多行 單行 單行 cmd + /
1 // 我是註解 多行 第一種 1 2 3 /* 多行 */ 2.</description></item><item><title>Compiler</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/Compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/Compiler/</guid><description>編譯程式</description></item><item><title>Component：可重複利用、自定參數的元件</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Component%E5%8F%AF%E9%87%8D%E8%A4%87%E5%88%A9%E7%94%A8%E8%87%AA%E5%AE%9A%E5%8F%83%E6%95%B8%E7%9A%84%E5%85%83%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Component%E5%8F%AF%E9%87%8D%E8%A4%87%E5%88%A9%E7%94%A8%E8%87%AA%E5%AE%9A%E5%8F%83%E6%95%B8%E7%9A%84%E5%85%83%E4%BB%B6/</guid><description>Component 用 function 來 return HTML 元素，其中可以自訂參數來調整元素，方便重複使用 透過 [[定義屬性(props)#物件定義屬性（ Key-Value Pair ）]]（參數）可以調整每個生成出來的元件 要大寫開頭 一個元件可以在另一個元件裡（詳細要進一步了解渲染的機制： [[Hook]]） 寫多了元件就：[[元件匯出]] 先今（16.8 版）多是用 Function Component + [[Hook]] 來寫（參照本篇） 早期主要是用 [[Class Component]]，現在已經很少用到</description></item><item><title>Configure Strategy</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategy/</guid><description>Configure Strategy 新增 config 資料夾，新增 passport.js 檔案
模組設定 [[Passport.js]] [[用資料夾管理 Mongoose models 模組]] [[bcrypt#檢查密碼]]：登入時加密 1 2 3 4 5 6 // config/passport.</description></item><item><title>Configure Strategy(passport-google)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategypassport-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategypassport-google/</guid><description>Configure Strategy (passport-google) [[Configure Strategy]]
存取（clientID, cilentSecret）導向 [[Configure Strategy]] 設定的 callbackURL
callbackURL 需要在 Google Cloud Platform 設定：[[Web Application Client ID 設定]] 導過去之後的行為：[[Passport Verified Callback]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 passport.</description></item><item><title>Configure Strategy(passport-local)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategypassport-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategypassport-local/</guid><description>Configure Strategy (passport-local) [[Configure Strategy]]
[[bcrypt#檢查密碼]]：登入時加密 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 passport.</description></item><item><title>connect-flash</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/connect-flash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/connect-flash/</guid><description>connect-flash npm 使用[[Flash]] 需要安裝的 npm 模組
1 $ npm install connect-flash 使用 1 2 3 4 5 const flash = require(&amp;#39;connect-flash&amp;#39;); const app = express(); // middleware: 會生成一個 req.</description></item><item><title>console.log</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/console.log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/console.log/</guid><description>console.log Handy Tips on Using console.log() 可以用以下的 specifier 來帶入特定值
Specifier Purpose %s string %d or %i 整數 (integer) %f 非整數 (float) %o Element is displayed with optimally useful formatting %O Element is displayed with generic JavaScript object formatting %c 賦予 CSS 樣式 1 2 3 4 5 6 7 8 9 const user = &amp;#39;john_smith&amp;#39;; const attempts = 5; // 帶入 string, 整數 console.</description></item><item><title>const</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/const/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/const/</guid><description>const 命名習慣：開頭大寫
1 const UseCapslock = 1; #js #variable #scope</description></item><item><title>Constraints</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/Constraints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/Constraints/</guid><description>Constrains [[SQL create 製作表格]] 中有提到 [[Constraints]] 可以將資料內容做規範 在 [[Mongoose]] 也可以用 [[Validators]] 規範 [[Schema Type]]
SQL: [[SQL create 製作表格]] Mongoose: [[Validators]] #database #crud #validators</description></item><item><title>Constructor</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/Constructor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/Constructor/</guid><description>Constructor Function 可以重複生成相似物件的功能
使用規則 1 2 3 4 5 6 7 8 9 10 11 function Person(name, age, height) { // 大寫開頭 console.</description></item><item><title>container</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/container/</guid><description>container 非滿版的容器，將最重要的內容放在畫面中間
響應式的 container 因為非滿版，所以需要響應式的變化來因應各種載具
狀況一樣的 背景永遠滿版＋內容在電腦版非滿版＋手機版滿版 沒有背景＋內容在電腦版非滿版＋手機版滿版 狀況不一樣 電腦非滿版＋平板、手機滿版 可再往下方[[container#bs 的響應式 container]]段落了解
max-width 此時 max-width 就很重要了， 代表在不需要滿版時，內容最大要多寬 設定會比斷點還要小（因為非滿版）</description></item><item><title>Cookie</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/Cookie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/Cookie/</guid><description>Cookie 也是一個儲存資料的地方（類似[[Storage]]） 但跟 [[Storage]] 不同的是，他是為了讓伺服器端讀取的，前者反之 客戶端發送請求 [[HTTP request]] 時候，[[Cookie]] 就會跟著發出去，[[Storage]] 不會 [[Key-Value Pair]] 可以透過 [[Postman]] 或是 Devtool -&amp;gt; 儲存空間查看 可以從 Devtool 修改 cookie -&amp;gt; [[Signing a Cookie]] [[res.</description></item><item><title>cookie-parser</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/cookie-parser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/cookie-parser/</guid><description>cookie-parser npm 可以使用 [[req.cookies]] 的 [[Middleware(express)]] 模組
npm install 1 $ npm install cookie-parser import 1 const cookieParser = require(&amp;#39;cookie-parser&amp;#39;) 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const express = require(&amp;#39;express&amp;#39;) const cookieParser = require(&amp;#39;cookie-parser&amp;#39;) const app = express() app.</description></item><item><title>cookie-session</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/cookie-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/cookie-session/</guid><description>cookie-session npm
1 npm i cookie-session 建置 1 const cookieSession = require(&amp;#39;cookie-session&amp;#39;); middleware [[指定特定 Route 之前的 Middleware（Route 前面）]]</description></item><item><title>Cookies and Sessions</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookies-and-Sessions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookies-and-Sessions/</guid><description>[[Cookie]] and [[Session]] 比較 Cookies Sessions Storage 容量 ~4KB 5MB 安全性 X（無法加密） O（可以加密） 客戶端資料 接收所有內容 只接收到 ID(其他在伺服器) [[Cookies and Sessions 的安全性措施]]</description></item><item><title>Cookies and Sessions 的安全性措施</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/Cookies-and-Sessions-%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E6%8E%AA%E6%96%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/Cookies-and-Sessions-%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E6%8E%AA%E6%96%BD/</guid><description>Cookies and Sessions 的安全性措施 [[Signing a Cookie]] [[process(node)]] [[dotenv（使用 env 變數）]] [[node 的 gitignore 設定]]</description></item><item><title>Create</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Create/</guid><description>Create (Mongoose) [[建立架構 Define a Schema]] 之後可以利用 model 來建立，可以對 model 進行 [[Mongoose CRUD]] 更改過後需要存入 DB：[[透過 Mongoose 存入 MongoDB(Save)]] create an object 1 2 3 4 5 6 7 8 9 const Jon = new Studtent({ name: &amp;#39;John&amp;#39;, age: 25, major: &amp;#39;EE&amp;#39;, scholarship: { merit: 2500, other: 1300 } }) 更改過後需要存入 DB：[[透過 Mongoose 存入 MongoDB(Save)]]</description></item><item><title>Create a Model</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/Create-a-Model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/Create-a-Model/</guid><description>create a model model 就可以當成一個 [[MongoDB]] 的 collection 用了（[[MongoDB CRUD]]）
1 2 3 4 // const 變數要大寫 // model 的 string 也要大寫、單數 const Student = mongoose.</description></item><item><title>create()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/create/</guid><description>create () 在不建構 [[Constructor]] 的情況下也可以從物件實例新增其他物件實例
1 let person2 = Object.create(person1); #js #advanceJs #object #oop</description></item><item><title>Creation Phase</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Creation-Phase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Creation-Phase/</guid><description>Creation Phase 在 [[Execution Phase]] 之前，後台處理的部份
[[Global Execution Context]] 生成 window object 生成 [[Scope]] （依照 [[Closure(Scope Chaining)]] 閉包原則） 生成 [[this]] （指向 window） [[Hoisting]] Function Execution Context 不是 [[Global Execution Context]] 所以不會生成 window object this 生成，但[[4.</description></item><item><title>d-flex</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/flexbox/d-flex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/flexbox/d-flex/</guid><description>d-flex 1 2 3 .d-flex { display: flex; } 內容取消 inline 設定</description></item><item><title>dart-sass(sass) 建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/dart-sasssass-%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/dart-sasssass-%E5%BB%BA%E7%BD%AE/</guid><description>dart-sass (sass) 建置 Install Sass Sass Basics
安裝到電腦 (global) npm 1 npm i -g sass Homebrew (Mac) the Homebrew package manager</description></item><item><title>data attribute：自訂 HTML 屬性</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/data-attribute%E8%87%AA%E8%A8%82-HTML-%E5%B1%AC%E6%80%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/data-attribute%E8%87%AA%E8%A8%82-HTML-%E5%B1%AC%E6%80%A7/</guid><description>data attribute：自訂 HTML 屬性 使用數據屬性(data attribute)
在 HTML 上可以任意自訂 data-* 的屬性，使 JS 可以輕易訪問
1 2 3 4 5 6 &amp;lt;article id=&amp;#34;文章&amp;#34; data-bunch-of-numbers=&amp;#34;12314&amp;#34; &amp;gt; .</description></item><item><title>Data Types</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/Data-Types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/Data-Types/</guid><description>Data Types 1 2 3 4 5 -- COMMENT INT-- 整數 DECIMAL(p,s)-- 十進位，p（總共幾位數）, s(小數點後幾位數) VARCHAR(M)-- 字串，M(字數) DATE-- &amp;#39;YYYY-MM-DD&amp;#39; #sql #database</description></item><item><title>Database 數據庫</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/Database-%E6%95%B8%E6%93%9A%E5%BA%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/Database-%E6%95%B8%E6%93%9A%E5%BA%AB/</guid><description>Database 發出請求後，（可能有加密），有確定好就會從數據庫 [[Database 數據庫]] 抓檔案（html, css, js）發給你 C.R.U.D 所有的 [[DBMS(RDBMS)]] 一定有的四種語法 [[ODM]] / [[ORM]] 也會有類似的功能 [[DBMS(RDBMS)]] / ODM(ORM) Create Read Update Delete SQL [[SQL create 製作表格]] [[SQL read 檢視表格內容]] [[SQL update 更新既有表格內容]] [[SQL delete 刪除既有表格內容]] MongoDB [[MongoDB CRUD#Insertion create]] [[MongoDB CRUD#find read]] [[MongoDB CRUD#Update]] [[MongoDB CRUD#Delete]] Mongoose [[Create]] [[Find(Read)]] [[Update]] [[Delete]] SQL and NoSQL 類型 SQL NoSQL 定義 Relational DB SQL 之外 構造 table object(JSON) [[DBMS(RDBMS)]] [[mySQL]] [[MongoDB]] 優點 高穩定、連結性（歷史久） 高伸縮性、自由度（新） Scaling Sequential search（慢） hash function(快) 像是個人的檔案資料，每個人會有的內容都不一樣，就適合用 NoSQL，反之，像是產品資訊，有一定規則，就是和 SQL</description></item><item><title>DBMS(RDBMS)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/DBMSRDBMS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/DBMSRDBMS/</guid><description>DBMS (RDBMS) 拿來管理 [[Database 數據庫]] 的系統分為兩類： - DBMS: database management system
RDBMS: relational database management system 熱門的 [[DBMS(RDBMS)]] MySQL MongoDB Postgresql Redis &amp;hellip;等等等 #database #sql</description></item><item><title>Delete</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Delete/</guid><description>Delete (Mongoose) 1 2 3 4 5 model.deleteOne(); model.deleteMany(); // 組合技 model.findOneAndDelete(); 1 2 3 4 Student.</description></item><item><title>Delete in React</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/List/Delete-in-React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/List/Delete-in-React/</guid><description>Delete in React 用 [[State Lifting]] 的範例
目前內容
&amp;lt;App /&amp;gt; ：母層，[[State Lifting]] 有 input, message 的 state &amp;lt;Create /&amp;gt;：子層，輸入 input 用（存到 message） &amp;lt;Info /&amp;gt;：子層，顯示 message &amp;lt;Message /&amp;gt; ：孫層，每個 message 條目，需要參照 [[Key prop]] 本篇接續 [[Key prop]]</description></item><item><title>Dependency array</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Dependency-array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Dependency-array/</guid><description>Dependency array [[useEffect Hook]]
[[eslint-plugin-react-hooks]] 來幫助自己寫 [[Hook]] 的時候不會東漏一個設定西漏一個設定
使用情境 useEffect 的第二個可用參數，放入包含需要同步的值 可以讓 [[side-effect]] 的另一端資料與 React 維持雙向同步 如果沒有另一端資料不需要被更新，就不會重新執行 每次 render 都執行 不放 [[Dependency array]]</description></item><item><title>Destructing Assignment</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Destructing-Assignment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Destructing-Assignment/</guid><description>Destructing Assignment 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // array [a, b, .</description></item><item><title>Dictionary Attack</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Dictionary-Attack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Dictionary-Attack/</guid><description>Dictionary Attack 透過將字典出現過的單字加密，可以得出常見的單字加密的樣子，很多常見的密碼因此就會被推敲出來，因此不要使用語意性的單字佳
#cryptogrphy</description></item><item><title>display</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/display/</guid><description>display block / inline block：左右填滿 inline：只有佔地面積算 inline-block：區塊與區塊並排，不過其實現在用 flexbox 比較多</description></item><item><title>dolby atoms</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/dolby-atoms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/dolby-atoms/</guid><description>突破 channel base 5.1 7.1
pan through array bed scalable / adaptive
高解析度 高適應性（到客戶端） bed 音床，基礎聲音背景 object 空間中的物件 合併起來會是一個 atoms deliverable workflow(Protools) io 藉由 madi 協定傳送到渲染器</description></item><item><title>DOM 新舊對比</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/DOM-%E6%96%B0%E8%88%8A%E5%B0%8D%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/DOM-%E6%96%B0%E8%88%8A%E5%B0%8D%E6%AF%94/</guid><description>功能新舊對比 DOM 的 properties 有很多個，其中有些比較雷同的項目，其中有些已經漸漸不再使用了
新 舊 childNodes children NodeList HTMLCollection querySelectorAll getElementByClassName children 或是 childNode childNodes 會 return NodeList 內容會很多，可以用 children 就好</description></item><item><title>DOM 簡要</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/DOM-%E7%B0%A1%E8%A6%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/DOM-%E7%B0%A1%E8%A6%81/</guid><description>DOM｜Document Object Model DOM
類似 object 節點 node｜在 document 裡的物件們 element node text node attribute node 選取｜節點、內容、屬性 選取節點｜單一選取、群體選取 選起來存在一個 const 裡面 第一個符合的節點｜document.</description></item><item><title>DOM 需要知道的 methods, properties</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/DOM-%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84-methods-properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/DOM-%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84-methods-properties/</guid><description>Element Object 所有 html 的 element（所有標籤）都可以用這些功能（都從 element object 中繼承而來）
不同的 element 可能有其他特殊的功能或屬性（繼承後還有自己獨有的屬性與功能）
innerHTML, innerText</description></item><item><title>dotenv（使用 env 變數）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/dotenv%E4%BD%BF%E7%94%A8-env-%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/dotenv%E4%BD%BF%E7%94%A8-env-%E8%AE%8A%E6%95%B8/</guid><description>dotenv npm 使用[[Cookies and Sessions]] 的時候，應該將 [[cookie-parser]] 跟 [[express-session]] 的內容加密並且隱藏
在使用 [[process(node)]] 的時候可以使用自訂的 env 變數
1 npm install dotenv 設定 1 2 // app.</description></item><item><title>Dynamic Form in React</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Form/Dynamic-Form-in-React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Form/Dynamic-Form-in-React/</guid><description>Dynamic Form in React [[Form in React]]
運用 React，讓表單做更即時性的互動
以大小寫限制為例
用戶輸入大寫時，跳出警示「必須使用小寫英文」＋禁用送出表單按鈕 用戶輸入大寫時，自動轉成小寫（推薦） 自動轉小寫 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 function UsernameForm() { const [username, setUsername] = React.</description></item><item><title>Dynamic Header</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/Dynamic-Header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/Dynamic-Header/</guid><description>Dynamic Header 設定黏在頭頂的 navbar，可以隨著滾輪變化（透明度、高度等）
window.pageYOffset property scroll event style object sticky 的 nav
1 2 3 4 5 6 7 8 9 10 11 12 13 const header = document.</description></item><item><title>ECMA</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/ECMA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/ECMA/</guid><description>歐洲的電腦廠商協會 #js #intro</description></item><item><title>Editor 快捷鍵</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/Editor-%E5%BF%AB%E6%8D%B7%E9%8D%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/Editor-%E5%BF%AB%E6%8D%B7%E9%8D%B5/</guid><description>ctrl / cmd +
P：找檔案 K+W 關所有檔案 N 開新檔（已使用 advance file 取代 1,2 切換 focus group ctrl/cmd + shift +</description></item><item><title>EJS</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS/</guid><description>EJS (Embedded JavaScript) 一種[[樣板語言]](template language)，可以做樣板管理 中文：嵌入式 JS 一種[[樣板語言]]，在 JS 的環境下寫 HTML 可以統一管理不同 HTML 的頁面裡，相同的內容，例如 navbar 撰寫 [[EJS 建置]] [[EJS 撰寫規則]] [[EJS 回應表單]] [[EJS 搭配 Database]] #node/npm #gulp #htm #node/express #node/ejs</description></item><item><title>EJS with Express 的基本設定</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/EJS-with-Express-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/EJS-with-Express-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A/</guid><description>EJS with Express 取自 官網提供的方法
會用到 [[app.set()]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 // import let express = require(&amp;#39;express&amp;#39;); let app = express(); // EJS 設定 app.</description></item><item><title>EJS 使用 Mongoose 取得數據庫資料作為變數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E4%BD%BF%E7%94%A8-Mongoose-%E5%8F%96%E5%BE%97%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99%E4%BD%9C%E7%82%BA%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E4%BD%BF%E7%94%A8-Mongoose-%E5%8F%96%E5%BE%97%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99%E4%BD%9C%E7%82%BA%E8%AE%8A%E6%95%B8/</guid><description>使用數據庫資料作為變數 看完這兩段再理解就好
[[Mongoose]] [[Find(Read)]] [[AJAX]] 在使用 [[Mongoose]] 要注意是非同步指令，需要用 [[Promise]] 寫法
1 2 3 4 5 // 從 DB 取得資訊顯示到網頁上 app.</description></item><item><title>EJS 使用網址輸入內容作為變數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E4%BD%BF%E7%94%A8%E7%B6%B2%E5%9D%80%E8%BC%B8%E5%85%A5%E5%85%A7%E5%AE%B9%E4%BD%9C%E7%82%BA%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E4%BD%BF%E7%94%A8%E7%B6%B2%E5%9D%80%E8%BC%B8%E5%85%A5%E5%85%A7%E5%AE%B9%E4%BD%9C%E7%82%BA%E8%AE%8A%E6%95%B8/</guid><description>使用網址輸入內容作為變數 可以將輸入的網址部分設定為變數
1 2 3 4 5 6 7 8 9 10 11 // 匯入三個模組： express, app, ejs // middleware app.</description></item><item><title>EJS 使用變數顯示於網頁上</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8%E9%A1%AF%E7%A4%BA%E6%96%BC%E7%B6%B2%E9%A0%81%E4%B8%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8%E9%A1%AF%E7%A4%BA%E6%96%BC%E7%B6%B2%E9%A0%81%E4%B8%8A/</guid><description>EJS 使用變數顯示於網頁上 1 2 // 要顯示出來的變數 &amp;lt;標籤&amp;gt;&amp;lt;%= 要取得這個值到 HTML 的話 %&amp;gt;&amp;lt;/標籤&amp;gt; 舉例 使用已經生成的 name 變數：[[生成與使用 EJS 樣板可用的變數]]</description></item><item><title>EJS 回應表單</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-%E5%9B%9E%E6%87%89%E8%A1%A8%E5%96%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-%E5%9B%9E%E6%87%89%E8%A1%A8%E5%96%AE/</guid><description>EJS 回應表單 ([[Routing for Query 回應表單]]) [[Form]] 有一個表單，透過後端來取得這些資料後，使用 EJS 生成顯示這些資料的頁面
1 2 3 4 5 6 7 8 9 10 11 12 // index 上的表單 &amp;lt;form action=&amp;#34;/response&amp;#34; method=&amp;#34;GET&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;name&amp;#34;&amp;gt;Your Name&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;name&amp;#34; name=&amp;#34;name&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;age&amp;#34;&amp;gt;Your Age&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;age&amp;#34; name=&amp;#34;age&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;Submit&amp;lt;/input&amp;gt; &amp;lt;/form&amp;gt; [[Routing for Query 回應表單#GET form]] 1 2 3 4 5 // app.</description></item><item><title>EJS 寫不含值的程式碼</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E5%AF%AB%E4%B8%8D%E5%90%AB%E5%80%BC%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E5%AF%AB%E4%B8%8D%E5%90%AB%E5%80%BC%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC/</guid><description>EJS 寫不含值的程式碼 1 2 // 單純寫 &amp;lt;% 撰寫純 JS code 的話 %&amp;gt; for 迴圈 i 會顯示在 HTML，要加 =</description></item><item><title>EJS 對超連結使用變數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E5%B0%8D%E8%B6%85%E9%80%A3%E7%B5%90%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E5%B0%8D%E8%B6%85%E9%80%A3%E7%B5%90%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8/</guid><description>EJS 對超連結使用變數 網址上也可以使用變數
1 &amp;lt;a href=&amp;#34;/students&amp;#34;&amp;gt;回到學生列表&amp;lt;/a&amp;gt; 1 2 3 4 5 6 7 &amp;lt;ul&amp;gt; &amp;lt;% data.forEach(student=&amp;gt; { %&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;/students/&amp;lt;%= student.</description></item><item><title>EJS 建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/EJS-%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/EJS-%E5%BB%BA%E7%BD%AE/</guid><description>EJS 建置 安裝 VS插件：[EJS Language support] npm: npm install express nodemon ejs 建置 Import: express, app, ejs [[EJS with Express 的基本設定]] middleware [[Express 的 CSS 樣式環境建置 (Serving a Static File)]] [[樣板：views 資料夾]] app.</description></item><item><title>EJS 提供用戶更新的資料的表單</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E6%8F%90%E4%BE%9B%E7%94%A8%E6%88%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E8%B3%87%E6%96%99%E7%9A%84%E8%A1%A8%E5%96%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E6%8F%90%E4%BE%9B%E7%94%A8%E6%88%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E8%B3%87%E6%96%99%E7%9A%84%E8%A1%A8%E5%96%AE/</guid><description>EJS 提供用戶更新的資料的表單 1 2 3 4 5 6 7 8 9 10 11 12 // 提供更新用的表單給客戶 app.get(&amp;#39;/students/edit/:id&amp;#39;, async (req, res) =&amp;gt; let { id } = req.</description></item><item><title>EJS 搭配 Database</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-%E6%90%AD%E9%85%8D-Database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-%E6%90%AD%E9%85%8D-Database/</guid><description>搭配 [[Database 數據庫]] [[Mongoose]]
1 2 3 4 5 6 7 8 9 10 app.get(&amp;#34;/&amp;#34;, (req, res) =&amp;gt; { // 有個 array ，通常數據庫都會給這樣格式的資料 const languages = [ { name: &amp;#34;python&amp;#34;, rating: 9.</description></item><item><title>EJS 撰寫規則</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/</guid><description>EJS 撰寫 EJS 可以當成就是在 JS 環境寫 HTML，所以也可以在裡面寫 JS
[[EJS 使用變數顯示於網頁上]] [[EJS 寫不含值的程式碼]] [[匯入其他 EJS 檔]] [[EJS 註解 comment]] #js #ejs</description></item><item><title>Electron</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Electron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Electron/</guid><description>Electron Electron
用 JS, HTML, CSS 寫桌面軟體</description></item><item><title>Eleventy</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/Eleventy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/Eleventy/</guid><description>名為大腦的裝飾品 真的只有大略看一下而已 探索前端知識，就是一個接納自己的大腦其實是裝飾品的過程。 擺在那邊不整理，就會長灰塵
理解他是個裝飾品之後，就會想要把它漂漂亮亮的供起來 等到我想到他的時候再翻翻找找，拿它出來看看摸摸
這時候就會需要一個漂亮的容器，或是說舞台 部落格就是很好的選擇
收納品選擇 部落格有很多種選擇，才剛開始學前端其實也沒必要一開始就要
資料 Beginner&amp;rsquo;s Guide to Eleventy
步驟 npm init -y npm install --save-dev @11ty/eleventy echo 'You are officially a developer!</description></item><item><title>endpoint</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/endpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/endpoint/</guid><description>endpoint JokeAPI 示範
1 URL: https://v2.jokeapi.dev/joke/Any 在 Try it out here 的地方，可以看到這個網址，隨著調整 API 的需求，這個網址也會變動，在發出請求的時候就是對 endpoint 發出</description></item><item><title>Enum(指定 string, number)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Enum%E6%8C%87%E5%AE%9A-string-number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Enum%E6%8C%87%E5%AE%9A-string-number/</guid><description>Enum（指定 string, number） [[String 用 Validators]]
enumerate: 枚舉
可以規範輸入的資料只能是特定字串
很像 [[Form]] 的 [[select &amp;amp; datalist 選單]]
1 2 3 4 5 6 7 8 9 10 11 // define a schema const studentSchema = new mongoose.</description></item><item><title>Equalization</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Equalization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Equalization/</guid><description> Parametric Equalization
EQ Sound 20Hz 若有似無 63Hz 耳邊吐氣（ASMR） 125Hz 耳邊風聲（往內）＋環境 250Hz 環境風聲（在環境中流過） 500Hz 要下雨的錯覺但沒有 1000Hz 下雨了 2000Hz 下雨要收衣服 4000Hz 隔壁浴室在洗澡 8000Hz 這不是蓮蓬頭的水速了吧 16000Hz （耳朵會痛）裝 birta 的那個洗手槽</description></item><item><title>Error Handling 同步的寫法</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-Handling/Error-Handling-%E5%90%8C%E6%AD%A5%E7%9A%84%E5%AF%AB%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-Handling/Error-Handling-%E5%90%8C%E6%AD%A5%E7%9A%84%E5%AF%AB%E6%B3%95/</guid><description>Error Handling 同步的寫法 1 2 3 4 5 6 7 8 9 // routing 沒有使用 promise 的話 // error handler app.</description></item><item><title>Error Handling 非同步的寫法</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-Handling/Error-Handling-%E9%9D%9E%E5%90%8C%E6%AD%A5%E7%9A%84%E5%AF%AB%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-Handling/Error-Handling-%E9%9D%9E%E5%90%8C%E6%AD%A5%E7%9A%84%E5%AF%AB%E6%B3%95/</guid><description>Error Handling 非同步的寫法 [[Mongoose]]：[[Find(Read)]] [[Async（目錄）]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // routing 有用到 promise 的話： app.</description></item><item><title>Error Handling（Routing 後面）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-HandlingRouting-%E5%BE%8C%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-HandlingRouting-%E5%BE%8C%E9%9D%A2/</guid><description>Error Handling [[撰寫 Middleware]] Error Handling 會放在 Routing 後面，可以對應程式出錯時，使用者會看到什麼畫面，而不是看到一堆用戶看不懂的內容
如果是網址的亂打會用：[[Routing for all 回應亂打的網址]]，放在 Routing 的最後一個
[[Error Handling 同步的寫法]] [[Error Handling 非同步的寫法]] [[處理 Validators 錯誤的寫法]] #advanceJs #node/express #backEnd #node/npm #server</description></item><item><title>eslint-plugin-react-hooks</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/eslint-plugin-react-hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/eslint-plugin-react-hooks/</guid><description>npm
撰寫 [[Hook]] 時的偵錯工具模組
#js/react/hook #node/npm</description></item><item><title>Event</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/Event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/Event/</guid><description>Event 事件
監聽事件 1 {某節點}.addEventListener(’{event}’, {callback Function}) 1 2 3 4 btn.addEventListener(”click”, e =&amp;gt; { console.</description></item><item><title>Event Bubbling</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/Event-Bubbling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/Event-Bubbling/</guid><description>Event Bubbling 兩個重疊的事件（element 跟 parent element），如果同時被觸發的話，兩個都會生效
#js #dom #event</description></item><item><title>Event Handlers</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Event-Handlers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Event-Handlers/</guid><description>Event Handlers 可以上文件查有支援什麼 Event
注意事件的函式有沒有被寫成 invoked 的狀態，可以透過再包到一個函式裡來規避
1 onClick{() =&amp;gt; {會直接 invoked 的函式}} 原始寫法 可以看到原本的寫法會需要 render 很多次，搭配 [[Hook]] 可以改善這問題</description></item><item><title>Event Queue</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Event-Queue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Event-Queue/</guid><description>Event Queue JS 屬於 single-[[thread]] 的語言，一次只能處理一件事
Event Queue 利用時間差做出類似可以處理很多事的效果
非同步的語言 但 JS 裡面也有非同步的語言，他們屬於 WebAPI
計時器 Ajax Promise 1 2 3 4 5 6 7 8 9 console.</description></item><item><title>Execution Context</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Execution-Context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Execution-Context/</guid><description>Execution Context 階段 [[Creation Phase]] [[Execution Phase]] 類型 [[Global Execution Context]]（會生成 window object） [[Function Execution Context]](不會生成 window object) #js #window #executionContext</description></item><item><title>Execution Phase</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Execution-Phase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Execution-Phase/</guid><description>Execution Phase 在 [[Creation Phase]] 之後，這裡才開始一行一行跑程式碼 (callstack)
#js #window #executionContext</description></item><item><title>Express and Mongoose</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Express-and-Mongoose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Express-and-Mongoose/</guid><description>Express and Mongoose 前置知識 [[Express Life Cycle 生命週期]] [[EJS 建置]] [[Mongoose 建置]] [[Routing for Query 回應表單]] [[HTTP request]] [[建置（連接數據庫的表單）]] #js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #crud</description></item><item><title>Express Life Cycle 生命週期</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-Life-Cycle-%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-Life-Cycle-%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</guid><description>Express Life Cycle 生命週期 從 Client 發送請求 req 到得到 Server 回應 res 之間的行為
import：[[Express 匯入]] [[Middleware(express)]] [[Express 的 CSS 樣式環境建置 (Serving a Static File)]] [[Request Handling(Express)]] port listening 之後再搭配 EJS 的話：[[EJS with Express 的基本設定]]</description></item><item><title>Express 匯入</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-%E5%8C%AF%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-%E5%8C%AF%E5%85%A5/</guid><description>[[匯入模組]] 頭兩行可以發現 app 這個變數直接將匯入的檔案當做函數處理
1 2 3 // app.js const express = require(&amp;#39;express&amp;#39;) const app = express() Express.</description></item><item><title>Express 的 CSS 樣式環境建置 (Serving a Static File)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-%E7%9A%84-CSS-%E6%A8%A3%E5%BC%8F%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE-Serving-a-Static-File/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-%E7%9A%84-CSS-%E6%A8%A3%E5%BC%8F%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE-Serving-a-Static-File/</guid><description>回應有樣式的 HTML 檔案 1 2 3 4 // app.js // middleware app.use(express.static(&amp;#34;public&amp;#34;)); // 製作一個 public 資料夾 [[Middleware(express)]]</description></item><item><title>express-session</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/express-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/express-session/</guid><description>express-session npm（不要用到 express-sessions） 使用 session 的模組
1 $ npm install express-session 使用 1 const session = require(&amp;#39;express-session&amp;#39;); [[Middleware(express)]] [[secret 的變數設定]]</description></item><item><title>Express.js</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Express.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Express.js/</guid><description>Express. js 是 [[npm]] 中的一個模組 Node.js 的一種 Framework（[[Library 跟 Framework 的差別]]），有助加速 Node.js 撰寫 [[Express Life Cycle 生命週期]] import：[[Express 匯入]] [[Middleware(express)]]（包含進階內容） [Request Handling(Express)] port listening [[Routing]] [[Routing for all 回應亂打的網址]] [[Routing for pattern 回應有規律的網址]] [[Routing for Query 回應表單]] [[Express and Mongoose]] 搭配 [[EJS]] 搭配 [[Mongoose]] 其他 [[res.</description></item><item><title>falsy value</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/falsy-value/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/falsy-value/</guid><description>falsy value false null：宣告裡面沒有東西 undefined：宣告尚未指派 0 NaN：not a number</description></item><item><title>Fetch</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/Fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/Fetch/</guid><description>Fetch 利用 fetch 可以使用 JS 來連接別人的 [[API]] 是一種 [[Promise]] 可以直接使用的 API 用 JokeAPI 做示範
[[async, await, try, catch]] 來寫 單純取得之後他不會是一個 json 檔</description></item><item><title>fieldset(form)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/fieldsetform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/fieldsetform/</guid><description>fieldset &amp;lt;fieldset&amp;gt; 搭配 disabled 可以一次禁用整個區域 ^c9e148
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 &amp;lt;form&amp;gt; &amp;lt;fieldset disabled&amp;gt; &amp;lt;legend&amp;gt;Disabled fieldset example&amp;lt;/legend&amp;gt; &amp;lt;div class=&amp;#34;mb-3&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;disabledTextInput&amp;#34; class=&amp;#34;form-label&amp;#34;&amp;gt;Disabled input&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;disabledTextInput&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;Disabled input&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;mb-3&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;disabledSelect&amp;#34; class=&amp;#34;form-label&amp;#34;&amp;gt;Disabled select menu&amp;lt;/label&amp;gt; &amp;lt;select id=&amp;#34;disabledSelect&amp;#34; class=&amp;#34;form-select&amp;#34;&amp;gt; &amp;lt;option&amp;gt;Disabled select&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;mb-3&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;form-check&amp;#34;&amp;gt; &amp;lt;input class=&amp;#34;form-check-input&amp;#34; type=&amp;#34;checkbox&amp;#34; id=&amp;#34;disabledFieldsetCheck&amp;#34; disabled&amp;gt; &amp;lt;label class=&amp;#34;form-check-label&amp;#34; for=&amp;#34;disabledFieldsetCheck&amp;#34;&amp;gt; Can&amp;#39;t check this &amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34; class=&amp;#34;btn btn-primary&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/fieldset&amp;gt; &amp;lt;/form&amp;gt; 包含自訂按鈕需要額外…… 如果有自訂的按鈕元素在 fieldset 內，則需要額外再加入</description></item><item><title>filter()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/filter/</guid><description>filter () Return all 符合條件 element
1 2 3 4 5 6 7 let array = [1, 2, 4, 6]; let newArray = array.</description></item><item><title>find()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/find/</guid><description>find 回傳陣列的第一個符合條件的元素
1 2 3 4 5 6 7 // 三個 element 都是物件 // 都有個一個屬性 isPerson 判斷是否為人 let ary = [dog, cat, 王小明]; let firstPerson = ary.</description></item><item><title>Find(Read)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/FindRead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/FindRead/</guid><description>Mongoose Find (Read) 1 2 3 Model.find() // 回傳 array with object Model.findOne() // 回傳單一 object Model.findOneAndUpdate() // 回傳更新過後的特定內容 find 1 2 3 4 5 Student.</description></item><item><title>findOneAndUpdate</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/findOneAndUpdate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/findOneAndUpdate/</guid><description>findOneAndUpdate [[Update]] 會回傳整個列表，不會回傳更改過後的特定內容
1 model.findOneAndUpdate(condition, update, options) [[Validators]] 預設不會重跑，options 可以加入 [[Update with Validators]] 來重跑</description></item><item><title>Flash</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/Flash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/Flash/</guid><description>Flash 必須使用 npm 模組：[[connect-flash]]、[[express-session]]
[[Session]] 的其中一部分 可以儲存一些給使用端的訊息（例如：成功、失敗提示） 1 2 3 4 5 const flash = require(&amp;#39;connect-flash&amp;#39;); const app = express(); // middleware: 會生成一個 req.</description></item><item><title>flexbox</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/flexbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/flexbox/</guid><description>flexbox Animated Flexbox Playground
[[flex-wrap]]: wrap-reverse; flex:1 代表 flex-grow ul &amp;gt; li &amp;gt; a &amp;gt; 字＋圖 1 2 3 4 5 &amp;lt;ul class=&amp;#34;d-flex&amp;#34;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a&amp;gt;AAAA&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ul: d-flex, width li: flex-1 a: d-block, padding（一致）, 連結的互動設定 img: d-block, m-auto 外容器 [[d-flex]]</description></item><item><title>Floating Point</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Number/Floating-Point/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Number/Floating-Point/</guid><description>Floating Point 因為電腦的二進位跟小數點的十進位換算有點複雜 可能會遇到碰上小數點無法正常運算的問題
1 console.log(0.2 + 0.1 == 0.3); // false 一種解決方法 toFixed(小數點第幾位) 1 console.log((0.2 + 0.</description></item><item><title>flow</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/flow/</guid><description>flow 操作流程 拆解任務 流程設計 [[原始資料類型 Primitive Data Types]] 撰寫步驟 全域變數 初始化 #js #intro</description></item><item><title>Font</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Font/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Font/</guid><description>1 2 3 4 5 6 7 8 $font-sizes: (1: $h1-font-size, // 402: $h2-font-size, // 323: $h3-font-size, // 284: $h4-font-size, // 245: $h5-font-size, // 206: $h6-font-size // 16 ) !</description></item><item><title>font-family</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/font-family/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/font-family/</guid><description>font-family 【2021年版】font-familyの正しい指定方法とおすすめフォント設定まとめ 依序為優先度高至低 若要英文與中文不同字體，可將英文置於前面 內建字體的比例： CSS Font Stack: Web Safe and Web Font Family with HTML and CSS code.</description></item><item><title>for</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for/</guid><description>for 1 2 3 for ( start; stop; step ) { // let i = 0, i &amp;lt; 10, i++ // 做這件事 } [[for of loop]] [[for in loop]] for of loop 的是元素本身的值 for in loop 的是元素的 index</description></item><item><title>for in loop</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for-in-loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for-in-loop/</guid><description>for in array object 也可（[[for of loop]]不行） 1 2 3 4 5 6 7 8 9 10 let Sam = { age: 1, height:100, } for (let i in Sam) { console.</description></item><item><title>for of loop</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for-of-loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for-of-loop/</guid><description>for of 增加易讀性 適用範圍 string array 類 array([[HTMLCollection, Nodelist, array 比較]]) 物件不行(用 [[for in loop]]) 範例 1 2 3 4 let ary = [1, 2, 3]; for (let element of ary) { console.</description></item><item><title>Fork</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Fork/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Fork/</guid><description>取得一個 copy，可以隨意更動，不會影響到原作者的檔案</description></item><item><title>Form</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/Form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/Form/</guid><description>Form [[form 標籤]] action → API 網址、[[Database 數據庫]] method → 對應方法，GET（公開）, POST（非公開） [[Form]] 標籤內可用的標籤 [[input]] 標籤 type → input 的類型：submit, number, text&amp;hellip; name → 對應的後端欄位 id → 對應 [[label]] 的 for placeholder → 給予用戶的說明文字 [[label]] 標籤 for → 對應 [[input]] 的 id [[button]] 標籤（不建議用，建議用 [[input]]） type → 按鈕類型，預設為 submit [[select &amp;amp; datalist 選單]] [[textarea]] #form #html</description></item><item><title>Form in React</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Form/Form-in-React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Form/Form-in-React/</guid><description>Form in React [[Form]]
for 為保留字，React 中要用 htmlFor htmlFor 可以對應 input 的 id （或是 name ）屬性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 function UsernameForm() { function handleSubmit(event) { event.</description></item><item><title>form 標籤</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/form-%E6%A8%99%E7%B1%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/form-%E6%A8%99%E7%B1%A4/</guid><description>form 標籤 1 2 3 4 5 &amp;lt;form action=&amp;#34;資料傳送的目的地（到後端）&amp;#34; method=&amp;#34;預設GET（公開），POST（非公開）&amp;#34; &amp;gt; &amp;lt;/form&amp;gt; 與後端（[[Database 數據庫]]）相關的標籤
需要傳送的資料都要寫在這個標籤裡，不然不會傳輸</description></item><item><title>form(bootstrap)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/formbootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/formbootstrap/</guid><description>form (bootstrap) form div ：每個 input 都用 div 包住，設定 mb-* label.form-label for 對應 input 的 id aria-describedby=&amp;quot;註解&amp;quot; input.</description></item><item><title>fs (File System)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/fs-File-System/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/fs-File-System/</guid><description>fs (File System) 在 JS 檔案記錄一些伺服器遭遇的事件
1 2 3 4 5 6 7 8 const fs = require(&amp;#39;fs&amp;#39;); // 參數是：寫入的檔案、寫入訊息、function fs.</description></item><item><title>Function</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/Function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/Function/</guid><description>函數｜function 一種物件
1 2 3 4 5 6 7 // function declaration function 名稱(parameter) { 功能(parameter); } // invoke(執行) 名稱(argument); return 或是 console.</description></item><item><title>Function 簡寫語法糖</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Function-%E7%B0%A1%E5%AF%AB%E8%AA%9E%E6%B3%95%E7%B3%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Function-%E7%B0%A1%E5%AF%AB%E8%AA%9E%E6%B3%95%E7%B3%96/</guid><description>Object 內的 function 簡寫 原本的[[物件]]字面值的屬性都是以 [[Key-Value Pair]] 的形式出現，ES6 的語法糖中， function 可以如下簡寫：
原本寫法 1 2 3 funName: function() { return this; }; ES6 語法糖 1 2 3 funName() { return this; }; 注意：與 [[4.</description></item><item><title>GET 表單(express)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/GET-%E8%A1%A8%E5%96%AEexpress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/GET-%E8%A1%A8%E5%96%AEexpress/</guid><description>GET ([[Form]]) 跟一般的請求回應一樣都是使用 .get() 來回應對方的表單
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // index.</description></item><item><title>getItem(key)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/getItemkey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/getItemkey/</guid><description>getItem (key) 取得內容</description></item><item><title>Git</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/Git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/Git/</guid><description>Git [[Git/環境建置/安裝]] [[Git/環境建置/建置]] 連接遠端版本控制 兩種方法
[[本機 Repository#進行版本控制]] -&amp;gt; [[git remote add]] [[git clone]] [[Repository]] [[本機 Repository]] [[遠端 Repository]] 多人協作 [[git pull]]：更新本機既有 repo #git</description></item><item><title>git add(track)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-addtrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-addtrack/</guid><description>Track 只有[[git init]]還不會產生效果，需要將裡面的檔案 track 起來，才能追蹤到他們的變化，之後[[git commit]] 的時候就會把他們提交出去了
全體 track 1 git add . track 特定副檔名檔案 1 git add *.</description></item><item><title>git clone</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-clone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-clone/</guid><description>遠端新增數據庫，抓下來用 由於會自動綁定好，可以視為另一種取得 remote repo 的方法
github 新增 repo(remote) 新增 readme 等檔案 clone 到本機 1 git clone &amp;lt;url&amp;gt; clone 完後不需重新執行 [[git init]]，也不用執行 [[git remote add]]</description></item><item><title>git commit</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-commit/</guid><description>提交 1 git commit -m &amp;lt;提交訊息&amp;gt; commit 時附上資訊後會再刷新 UnModified 狀態（沒有修改過）
UnModified 代表 staged 之後沒有再改過 Modified 代表 staged 之後有再改過 commited 代表確定 staged 要同意更改</description></item><item><title>git init</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-init/</guid><description>初始化 針對需要產生 Git 的資料夾執行
1 git init 會產生一個隱藏資料夾：.git
MAC 的話，對該資料 cmd+shift+. 就可以看到隱藏資料夾囉（ MAC 叫出隱藏檔案）
#git</description></item><item><title>git log</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-log/</guid><description>查更新記錄 1 git log #git</description></item><item><title>git pull</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-pull/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-pull/</guid><description>（遠端他人更新後）更新本機 repo 的內容 pull 為將遠端 repo 抓下來，到其他人的本機 repo 的方法 與 [[git clone]] 不同的部份是，他是抓更新的部分，這樣可以維持多人協作時的同步更新
1 git pull &amp;lt;url&amp;gt; #git</description></item><item><title>git remote add</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-remote-add/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-remote-add/</guid><description>現存本機 repo 加入到遠端 repo 1 2 3 git remote add origin https://github.com/Szyln/Joanne.CV.git git branch -M main git push -u origin main 在 github 新增 repo（遠端） 為已存在的本機 repo 連上遠端 repo，並新增 branch 1 2 git remote add &amp;lt;遠端數據庫簡稱&amp;gt; &amp;lt;url&amp;gt; git branch -M main 檢查是否連上，觀看遠端數據庫列表 1 git remote push 資料上去 1 git push -u &amp;lt;遠端數據庫簡稱&amp;gt; main -u: upstream</description></item><item><title>git status</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-status/</guid><description>git status 檢查目前狀態
1 git status #git</description></item><item><title>Git 特徵</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Git-%E7%89%B9%E5%BE%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Git-%E7%89%B9%E5%BE%B5/</guid><description>版本的紀錄方式 Git: Snapshot [[git commit]] 的時候會記錄當前檔案樣子 snapshot ，只要檔案沒有變更，就不會儲存他，而是不動將原檔案參照到新版本內。
其他：差異 記錄每個版本的更新資訊
快速 由於檔案都會完整的在本機內，所以不需要像[[版本控制介紹#CVCSs]]一樣受到[[網路]][[延遲]]影響。
檢查完整性 所有儲存前都會被計算校驗碼(checksum)，在 Git 資料庫內，檔案都是用這個碼的形式來儲存的 任何更改或是毀損都沒無法瞞過 Git
只增不減 通常只會增加資料，所以很難做出讓系統無法復原的動作 只要 commit 了 snapshot 之後，檔案很難遺失，特別是如果將這個 repository push到其他 repository。</description></item><item><title>Git 誕生</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Git-%E8%AA%95%E7%94%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Git-%E8%AA%95%E7%94%9F/</guid><description>Linux kernel 在 1991-2002 幾乎都是透過 [[版本控制介紹#RCS]] 的 [[版本控制介紹#patch set]] 或是壓縮檔來做[[版本控制介紹]]的
2002 開始採用 BitKeeper 的[[版本控制介紹#DVCs]]系統。（商用）
2005 自行開發</description></item><item><title>Github Pages</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/Github-Pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/Github-Pages/</guid><description>取得靜態網頁 建立靜態網頁 Settings&amp;gt;Github Pages&amp;gt;Source&amp;gt;&amp;lt;選擇分支&amp;gt;
#git</description></item><item><title>gitignore</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/gitignore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/gitignore/</guid><description>.gitignore 一個神秘的小檔案 裡面可以輸入不想要被 git 偵測的檔案
1 2 3 log.txt justForTest.html 資料夾/ Ignoring Files and Folders
[[node 的 gitignore 設定]] #git</description></item><item><title>Global Execution Context</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Global-Execution-Context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Execution-Context/Global-Execution-Context/</guid><description>Global Execution Context 全域執行環境 為 [[Execution Phase]] 的其中一種
Creation Phase 生成 window object 生成 [[Scope]] （依照 [[Closure(Scope Chaining)]] 閉包原則） 生成 this （指向 window） [[Hoisting]] Execution Phase 開始實際一行一行跑程式 (callstack)</description></item><item><title>Google font, Material icon 安裝</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Google-font-Material-icon-%E5%AE%89%E8%A3%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Google-font-Material-icon-%E5%AE%89%E8%A3%9D/</guid><description>Google font, Material icon 安裝方式 tags: Sz CDN 2021夏季切版班 以下都是將檔案從雲端提出來用的方法（依賴對方的網路狀態） 所以不需要把檔案下載下來（下載下來沒特別作處理，也沒辦法上傳，只有你的電腦看得到） 而提取的動作就是掛上對方的 CDN ，檔案就知道這個資料不會從資料夾去找，會去他的網站找的意思 Google fonts 網站 Material icons 網站</description></item><item><title>Google Login</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Google-Login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Google-Login/</guid><description>Google Login 檢查是否有設定 [[Configure Strategy(passport-google)]] - 否： - 是：得到客戶端 ID 跟密碼與 Google 取得資料後，導向 [[Configure Strategy]] 設定的 callbackURL 1 2 3 4 5 6 7 8 9 10 // google router.</description></item><item><title>Grid 格線系統</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/Grid-%E6%A0%BC%E7%B7%9A%E7%B3%BB%E7%B5%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/Grid-%E6%A0%BC%E7%B7%9A%E7%B3%BB%E7%B5%B1/</guid><description>格線系統 row-cols-數字 https://bootstrap5.hexschool.com/docs/5.0/layout/grid/#row-columns #grid #flexbox #css #scss #bs</description></item><item><title>GTM</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/GTM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/GTM/</guid><description>GTM https://inboundmarketing.com.tw/websites-optimization/gtm%E6%95%99%E5%AD%B8-%E6%96%B0%E6%89%8B%E8%A7%80%E5%BF%B5%E7%AF%87.html</description></item><item><title>GULP</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/GULP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/GULP/</guid><description>[[環境建立]]
[[資料夾架構]]
[[新增新的 HTML（套用 EJS 模版）]]
[[GULP 的 Github 部屬]]
[[使用 gulp]]</description></item><item><title>gulp 環境的客製化</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/gulp-%E7%92%B0%E5%A2%83%E7%9A%84%E5%AE%A2%E8%A3%BD%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/gulp-%E7%92%B0%E5%A2%83%E7%9A%84%E5%AE%A2%E8%A3%BD%E5%8C%96/</guid><description>gulp 環境下的 bootstrap 客製化 檔案結構 目前還不太清楚為什麼要放在 node_modules 裡
1 2 3 4 5 6 7 your-project/ ├── scss │ └── custom.</description></item><item><title>GULP 的 Github 部屬</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/GULP-%E7%9A%84-Github-%E9%83%A8%E5%B1%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/GULP-%E7%9A%84-Github-%E9%83%A8%E5%B1%AC/</guid><description>GULP 的 Github 部屬 使用 [[Git]] 做版本管理
Git 版本管理方法：[[Git#連接遠端版本控制]]
Github 部屬（每次更新都要重新執行） 生產模式
1 gulp build 客戶端看到的畫面部屬 [[Github Pages]]（頁面顯示可能要等一下</description></item><item><title>gulp 資料夾建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/gulp-%E8%B3%87%E6%96%99%E5%A4%BE%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/gulp-%E8%B3%87%E6%96%99%E5%A4%BE%E5%BB%BA%E7%BD%AE/</guid><description>[[環境建立#該資料夾]] 該資料夾 在該資料夾安裝 plug-in
1 npm install 在該資料夾執行 gulp
1 gulp 會跳出瀏覽器
[[GULP 的 Github 部屬]] Jiang V 分享自己常遇到的問題 解決方法 1.</description></item><item><title>Hack 101</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Hack-101/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Hack-101/</guid><description>Hack 101 [[Dictionary Attack]] 解決方式：[[Salting]] [[Bruteforced]] #cryptogrphy</description></item><item><title>Hash Function</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Hash-Function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Hash-Function/</guid><description>Hash Function [[bcrypt]]
將密碼存入 [[Database 數據庫]]前，會先用 Hash Function 加密 以目前技術近乎不可逆 不管原始密碼(input)多少，Hash Function 都會產生相同長度的 [[Cipher]] 原始密碼做些微的更動後，[[Cipher]] 會有很大的差異 但是同樣的 input 會得到相同的結果 -&amp;gt; [[Dictionary Attack]] -&amp;gt; [[Salting]] 問題：[[Dictionary Attack]] 由於同一個密碼 Hash Function 的結果一樣，駭客會透過 [[Dictionary Attack]] 的方法破解</description></item><item><title>heading(h)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/headingh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/base/headingh/</guid><description>heading heading 順序 h1&amp;gt;a 才對，不要寫 a&amp;gt;h1 ^d158d1
數量 只有 h1-h6，沒有 h7 以上喔
使用準則 依照重要度，非字體大小</description></item><item><title>Higher Order Function</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/Higher-Order-Function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/Higher-Order-Function/</guid><description>Higher Order Function 把 function 當做 function 的參數稱為 Higher Order Function #js #function</description></item><item><title>Hoisting</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/Hoisting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/Hoisting/</guid><description>提昇 Hoisting function 跟 var 宣告會被提升到該作用域的頂部 [[初始化(initializer)]]（賦值）之後就不會 Hoisiting 發生的時間點 [[Execution Context]] 的 Creation Phase 在 Execution Phase 發生之前，電腦記憶體會先分配給 function, var 的宣告（lexical declaration: let, const, function expression 沒有） var 的 hoisting var 的 hoisting 只有在賦值之前有效果</description></item><item><title>Hook</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Hook/</guid><description>Hook 可以改變網頁的特定部分（[[State]]）而不動到其他內容 向後兼容 [[useState Hook]] [[useEffect Hook]] [[自訂 Hooks]] [[useRef Hook]] #js/react/hook</description></item><item><title>Hook Flow</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Hook-Flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Hook-Flow/</guid><description>Hook Flow #js/react/hook</description></item><item><title>Hotkey++</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Hotkey++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Hotkey++/</guid><description>Hotkey++ 複製當前行
1 option + shift + 方向鍵 #obsidian</description></item><item><title>html lang</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/html-lang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/html-lang/</guid><description>Html lang HTML 5 版本 HTML5的lang速查 ( 注意：繁體中文不是zh-TW喔 )
1 2 3 4 5 6 7 8 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-Hant-TW&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;page title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</description></item><item><title>HTML skeleton</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/HTML-skeleton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/HTML-skeleton/</guid><description>HTML skeleton (Boilerplate) 網頁構成的骨架
html [[]] body 或是加上 footer（應該不是 body 裡面的那個） 實際架構 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &amp;lt;!</description></item><item><title>HTMLCollection, Nodelist, array 比較</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/HTMLCollection-Nodelist-array-%E6%AF%94%E8%BC%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/HTMLCollection-Nodelist-array-%E6%AF%94%E8%BC%83/</guid><description>HTMLCollection, Nodelist 與 array 類似之處 比較 在比較新的功能出來之後，HTMLCollection 的侷限多，漸漸不再被使用
DOM 功能 取得的清單 getElementByClassName HTMLCollection querySelectorAll NodeList 但實作上還是 array 最實用，取得 NodeList 之後常會透過 [[展開#轉成純陣列]] 的方法來使用陣列功能</description></item><item><title>HTTP Verbs</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/HTTP-Verbs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/HTTP-Verbs/</guid><description>HTTP Verbs (HTTP Methods) [[HTTP request]]
GET POST PUT PATCH DELETE #js #api #restfulapi</description></item><item><title>HUGO</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/HUGO-/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/HUGO-/</guid><description>https://spring.io/projects/spring-boot
課程資訊：Github 免費架站術！輕鬆打造個人品牌
建置環境 下載 hugo-extended https://gohugo.io/ See the Getting Started Guide for other methods. Hugo Releases 找hugo_extended 會得到一個執行檔 下載需要的 hugo themes HUGO themes 這裡以 Liva Hugo 為例</description></item><item><title>icon 設定 pointer event none</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/icon-%E8%A8%AD%E5%AE%9A-pointer-event-none/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/icon-%E8%A8%AD%E5%AE%9A-pointer-event-none/</guid><description>288 章 JS setup
按鈕裡面只點得到icon 但點不到 btn，
1 2 3 i { pointer-event: none; } 可以這樣解決 這樣就不會點到 i 了，會直接穿透點到 btn</description></item><item><title>if, switch</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/if-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/if-switch/</guid><description>條件語句｜if, switch 程式的運算思維 流程圖： Whimsical if, if else, else if 若要判斷「是否為 NaN」
1 2 if(x == NaN) {} // 怎麼樣都是 false if(isNaN(x)) {} // isNaN() 只有 true / false 判斷，可以不用寫條件語句</description></item><item><title>IIFE</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/IIFE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/IIFE/</guid><description>IIFE (Immdiately Invoked Function Expression) 宣告後直接執行函數 在 JS 的 library sourse code 常見到
1 2 3 (function fn(name) { console.</description></item><item><title>image</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/image/</guid><description>image 縮圖連結 .img-thumbnail #bs #css/scss</description></item><item><title>Inline styling(JSX)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/Inline-stylingJSX/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/Inline-stylingJSX/</guid><description>Inline Styling 1 2 3 4 5 6 const App = () =&amp;gt; ( &amp;lt;div&amp;gt; {/* 記得不要直接寫 font-size（不要寫 -） */} &amp;lt;h1 style= {{ color: &amp;#34;blue&amp;#34;, fontSize: &amp;#34;10rem&amp;#34;}}&amp;gt;My Profile&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; ); #js/react #css</description></item><item><title>input</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/input/</guid><description>input tag [[label]] 的 for 屬性內容對應 [[input]] 的 id 屬性內容，互成一組
選單用這個：[[select &amp;amp; datalist 選單]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;label for=&amp;#34;對應 input 的 id&amp;#34;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;多種類型，限定 input 內容類型&amp;#34; name=&amp;#34;最重要屬性，代表會被提交，在網址上也會顯示&amp;#34; id=&amp;#34;（這裡需與 label for 相同）&amp;#34; placeholder=&amp;#34;value 為空時，暫存預設輸入框內容&amp;#34; value=&amp;#34;會被送出的值，也可以設定預設值&amp;#34; &amp;lt;!</description></item><item><title>Instance Method</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Instance-Method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Instance-Method/</guid><description>Instance Method [[Mongoose Method]]
[[Create#Define a Schema]] 之後，可以設定 [[Instance Method]] 供 model 使用
有個很像的 [[Static Method]] 之後再提
用instance method改變資料數據後，需加入this.</description></item><item><title>JavaScript</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/JavaScript/</guid><description>JavaScript [[JavaScript 介紹]]</description></item><item><title>JavaScript 介紹</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/JavaScript-%E4%BB%8B%E7%B4%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/JavaScript-%E4%BB%8B%E7%B4%B9/</guid><description>JavaScript 介紹 JavaScript 是由 [[ECMA]]-Script 寫成的標準，可以被任何程式語言寫出來，由瀏覽器來實現對應的引擎 最有名的標準更新為ECMA2015(ES6) python, c++, php 是由 C 語言寫成 [[Strongly Weakly type Language]]</description></item><item><title>jitsi</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/jitsi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/jitsi/</guid><description>jitsi 低延遲設定（台灣地區） 推薦給音樂相關的語音、視訊交流 對想開歌窗的人來說，jitsi 可以直接輸出瀏覽器音效（chrome 限定） jitsi 是開源軟體，比較不用被大公司綁架 就算沒有知識背景，也可以用現成的台灣伺服器使用，實現低延遲效果 音質可以自己設定 錢 方便性 使用限制 品質 使用軟體 環境建置（伴奏） 使用限制 品質 參加簡單度 discord 自助+閹割* 需註冊 音質差* 需註冊 直播 自助 一人主持 佳（可自訂） 無腦 jitsi 有內建(chrome) 需搭配其他平台來邀請他人 佳（可自訂） 無腦 其他會議軟體 自助 - 不可調整 - 註：discord 可以透過升級（付費）的方法取得較高音質的輸出</description></item><item><title>joi</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/joi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/joi/</guid><description>joi npm
Validators，可以客製化給客戶端的錯誤訊息
#database #validators #js/mern</description></item><item><title>join()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/join/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/join/</guid><description>join () 將 array 元素合併成字串，可以自訂串連時的連接詞
1 2 3 let fruit = [apple, banana, kiwi]; fruit.join(); // &amp;#39;apple,banana,kiwi&amp;#39; fruit.join(&amp;#39; and &amp;#39;) // &amp;#39;apple and banana and kiwi&amp;#39; 後端：[[path]] 有用到這個功能</description></item><item><title>JS 模組化的由來與目的</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/JS-%E6%A8%A1%E7%B5%84%E5%8C%96%E7%9A%84%E7%94%B1%E4%BE%86%E8%88%87%E7%9B%AE%E7%9A%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/JS-%E6%A8%A1%E7%B5%84%E5%8C%96%E7%9A%84%E7%94%B1%E4%BE%86%E8%88%87%E7%9B%AE%E7%9A%84/</guid><description>JS 模組化由來與目的 由來 早期：JS 多半不大，瀏覽器可以輕鬆運行 演進：JS 隨著進化越來越大，有了將程式碼輕巧化的需求 先是框架：框架開始支援編譯模組化 現在：大多已支援原生環境（瀏覽器）運行 目的 強大的功能固然好，但大部分時候我們不需要一次擁有那麼多 通常我們只會買我們需要的東西，不會把整家店包下來
#js #vue #module</description></item><item><title>JSON</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/JSON/JSON/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/JSON/JSON/</guid><description>JSON JavaScript Objecy Notation 跟 object 寫法很像，不過 key 的部份要用 ”” 包起來 最外邊是 [] 或 {} 都有可能 前端工程師常常撈特定資料存在一個變數裡 [[SQL#NoSQL]] #js #api #axios #json</description></item><item><title>JSON and BSON 的差別</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/JSON-and-BSON-%E7%9A%84%E5%B7%AE%E5%88%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/JSON-and-BSON-%E7%9A%84%E5%B7%AE%E5%88%A5/</guid><description>JSON and BSON 的差別 MongoDB 使用的是 BSON 差別
JSON BSON 編碼 UTF-8 String Binary 支援資料類型 String, Boolean, Number, Array String, Boolean, Number (Integer, Float, Long, Decimal128&amp;hellip;), Array, Date, Raw Binary 可讀性 Human and Machine Machine Only</description></item><item><title>JSX</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX/</guid><description>JSX (JavaScript eXtension) React 的原始的寫法[[生成標籤：React.createElement()]] 很複雜，通常都是透過 JSX 的功能來寫，再透過 [[Babel]] 編譯回原始寫法 可以讓 JS 寫得像 HTML 一樣 React 的擴充功能，[[安裝 React]]會一併安裝 副檔名是 .</description></item><item><title>JSX HTML 內使用 if (Tenary Operator)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-HTML-%E5%85%A7%E4%BD%BF%E7%94%A8-if-Tenary-Operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-HTML-%E5%85%A7%E4%BD%BF%E7%94%A8-if-Tenary-Operator/</guid><description>JSX HTML 內使用 if (Conditional (ternary) operator) 在 JSX 內可以寫 JS，但是有限制的，必須寫表現式
1 2 3 4 5 6 7 8 function CharacterCount({text}) { return ( &amp;lt;div&amp;gt; {/* if 必須要用表現式 Conditional (ternary) operator */} The text &amp;#34;{text}&amp;#34; has {text.</description></item><item><title>JSX HTML 內使用變數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-HTML-%E5%85%A7%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-HTML-%E5%85%A7%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8/</guid><description>JSX HTML 內使用變數 JSX 可以讓 html 像 js 一樣重複利用，更可以在 JSX 標籤內帶入 JS 程式碼
如果是要元件重複利用（可以導入參數）：[[Component：可重複利用、自定參數的元件]]
1 2 3 // 可以單純存值 const children = &amp;#39;Hello&amp;#39; const className = &amp;#39;container&amp;#39; 1 2 3 // 也可以存 JSX 標籤 // 在 JSX 標籤內想寫 JS 程式碼要用 {} 包起來 const element = &amp;lt;div className={className}&amp;gt;{children}&amp;lt;/div&amp;gt; [[定義屬性(props)]]</description></item><item><title>JSX HTML 內寫迴圈</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-HTML-%E5%85%A7%E5%AF%AB%E8%BF%B4%E5%9C%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-HTML-%E5%85%A7%E5%AF%AB%E8%BF%B4%E5%9C%88/</guid><description>JSX HTML 內寫迴圈 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const App = () =&amp;gt; { let people = [&amp;#39;Mike&amp;#39;, &amp;#39;Ken&amp;#39;, &amp;#39;Sam&amp;#39;] return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;List of team member:&amp;lt;/p&amp;gt; {/* 箭頭函式可以簡化 */} {/* people.</description></item><item><title>JSX 內的 HTML 加入 JS 程式碼</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-%E5%85%A7%E7%9A%84-HTML-%E5%8A%A0%E5%85%A5-JS-%E7%A8%8B%E5%BC%8F%E7%A2%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-%E5%85%A7%E7%9A%84-HTML-%E5%8A%A0%E5%85%A5-JS-%E7%A8%8B%E5%BC%8F%E7%A2%BC/</guid><description>JSX 內的 HTML 加入 JS 程式碼 在 [[JSX]] 裡 return 的 HTML 內想加入 JS 程式碼的話需要使用 {}
[[JSX HTML 內使用變數]] [[JSX HTML 內寫迴圈]] [[JSX HTML 內使用 if (Tenary Operator)]] #js/react/jsx</description></item><item><title>JSX 生成標籤</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-%E7%94%9F%E6%88%90%E6%A8%99%E7%B1%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/JSX-%E7%94%9F%E6%88%90%E6%A8%99%E7%B1%A4/</guid><description>JSX 生成標籤 雖然他長相像 HTML，但更可以做 JS 內才能做的事： [[JSX 內的 HTML 加入 JS 程式碼]]
JSX 的寫法跟一般 HTML 差不了多少，編譯完可以看到原始 [[生成標籤：React.createElement()]] 的寫法 1 2 // JSX 寫法 const HellowElement = &amp;lt;h1 className=&amp;#34;title&amp;#34;&amp;gt;Hello World&amp;lt;/h1&amp;gt; 1 2 3 4 5 6 // JSX 編譯後 const HelloElement = React.</description></item><item><title>Kernel</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/Kernel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/Kernel/</guid><description>Kernel 電腦核心
Shell 與 kernel 互動的 interface（介面），分為圖形化、指令兩種介面
GUI(graphical user interface) CMD(command prompt) #git #kernel #shell #cmd</description></item><item><title>Key prop</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/List/Key-prop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/List/Key-prop/</guid><description>Key prop when Rendering List 使用 [[UUID]] 來生生成 key prop
與 [[Delete in React]] 同一個範例，做完 key prop 就可以做 delete 功能了</description></item><item><title>Key-Value Pair</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Key-Value-Pair/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Key-Value-Pair/</guid><description>Key-Value Pair key 只能對應一個 value，不可以對應多個 value value 可以對應多個 key 可以儲存的[[資料類型]]只有 string，不是 string 的資料類型都會被轉成 string 1 (key, value) #js #dataType</description></item><item><title>label</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/label/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/label/</guid><description>label tag [[label]] 的 for 屬性內容對應 [[input]] 的 id 屬性內容，互成一組
input 的標籤（不強制使用） 點擊 label 就會反白 input 不要把 placeholder 當 label 若有 p tag 不要包在裡面 架構 1 2 3 4 5 &amp;lt;!</description></item><item><title>Lazy Initializer</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Lazy-Initializer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/Lazy-Initializer/</guid><description>Lazy Initializer [[useState Hook]] [[useEffect Hook]]
只要每次 name 更新就會 re-render 這個 app（ Greeting() ），但每次執行時就檢查一次初始值吃效能不實際 這個功能提供初始狀態只會在需要檢查的時候執行
1 2 3 4 5 6 7 8 function Greeting() { const [name, setName] = React.</description></item><item><title>Let's Learn Eleventy!</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/Lets-Learn-Eleventy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/Lets-Learn-Eleventy/</guid><description>Let&amp;rsquo;s Learn Eleventy! (with Zach Leatherman) 起初 希望他比起是一個 framework ，更希望是個 utility 核心只有從 templates 導向輸出結果
starter project 可以先 clone 下來做基本樣式
liquid（不懂 templete 1 2 3 4 5 --- title:I am Title --- # {{title}} // 這樣就可以把 title 當 h1 了 configuration: eleventy.</description></item><item><title>letter-spacing 字距</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/letter-spacing-%E5%AD%97%E8%B7%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/letter-spacing-%E5%AD%97%E8%B7%9D/</guid><description>letter-spacing mdn
1 2 letter-spacing: normal; letter-spacing: &amp;lt;length&amp;gt;; #css</description></item><item><title>Library 跟 Framework 的差別</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/Library-%E8%B7%9F-Framework-%E7%9A%84%E5%B7%AE%E5%88%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/Library-%E8%B7%9F-Framework-%E7%9A%84%E5%B7%AE%E5%88%A5/</guid><description>Library 跟 Framework 的差別 Library Framework 只取所需 全盤收下照他的規則走 [[Bootstrap]] vue, React, [[Express.</description></item><item><title>Local Login</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Local-Login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Local-Login/</guid><description>Local Login [[passport-local]]
1 2 3 4 5 6 7 8 9 10 11 12 13 // local router.get(&amp;#39;/login&amp;#39;, (req, res) =&amp;gt; { res.</description></item><item><title>Local Storage</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Local-Storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Local-Storage/</guid><description>local storage 關掉不會清空，除非主動用 clear()清空</description></item><item><title>Logic OR</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/Logic-OR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/Logic-OR/</guid><description>Logic OR (||) mdn
1 expr1 || expr2 如果 expr1 是真值，傳 expr1，其餘傳 expr2
1 2 3 4 5 6 7 8 9 10 o1 = true || true // t || t returns true o2 = false || true // f || t returns true o3 = true || false // t || f returns true o4 = false || (3 == 4) // f || f returns false o5 = &amp;#39;Cat&amp;#39; || &amp;#39;Dog&amp;#39; // t || t returns &amp;#34;Cat&amp;#34; o6 = false || &amp;#39;Cat&amp;#39; // f || t returns &amp;#34;Cat&amp;#34; o7 = &amp;#39;Cat&amp;#39; || false // t || f returns &amp;#34;Cat&amp;#34; o8 = &amp;#39;&amp;#39; || false // f || f returns false o9 = false || &amp;#39;&amp;#39; // f || f returns &amp;#34;&amp;#34; o10 = false || varObject // f || object returns varObject #js #logic</description></item><item><title>loop 迴圈</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/loop-%E8%BF%B4%E5%9C%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/loop-%E8%BF%B4%E5%9C%88/</guid><description>循環 loop｜while, for, for in, for of while 1 2 3 4 5 var start = 0; // 何時開始 while (start &amp;lt; 10) { // 何時停止，不要在沒寫完前運行，瀏覽器會當掉 console.</description></item><item><title>ls</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/ls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/ls/</guid><description>顯示資料夾檔案</description></item><item><title>mac 只有 vs 終端機不能打小寫英文</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/mac-%E5%8F%AA%E6%9C%89-vs-%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%B8%8D%E8%83%BD%E6%89%93%E5%B0%8F%E5%AF%AB%E8%8B%B1%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/mac-%E5%8F%AA%E6%9C%89-vs-%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%B8%8D%E8%83%BD%E6%89%93%E5%B0%8F%E5%AF%AB%E8%8B%B1%E6%96%87/</guid><description>VScodeのターミナル機能内だけ、英字を入力すると大文字が出てくる</description></item><item><title>mac 快捷鍵</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/mac/mac-%E5%BF%AB%E6%8D%B7%E9%8D%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/mac/mac-%E5%BF%AB%E6%8D%B7%E9%8D%B5/</guid><description>顯示隱藏檔案 cmd+shift+. 1 cmd+shift+. 對該資料cmd+shift+.就可以看到隱藏資料夾囉（[[MAC]]） MAC 叫出隱藏檔案
#mac</description></item><item><title>Maps</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/Maps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/Maps/</guid><description>Maps ## Sass教學 (40) - 使用Sass Maps提升程式可讀、變數群組性
從原始碼推敲 原始碼長這樣
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // 先有個 maps $types: ( primary: #428bca, success: #5cb85c, info: #5bc0de, warning: #f0ad4e, danger: #d9534f ) !</description></item><item><title>Markdown Table Generator</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Markdown-Table-Generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Markdown-Table-Generator/</guid><description>Table Generator</description></item><item><title>Material icon Outlined 用法</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Material-icon-Outlined-%E7%94%A8%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Material-icon-Outlined-%E7%94%A8%E6%B3%95/</guid><description>Material icon Outlined 用法 by Sz tags: Sz 2021夏季切版班 懶人包 icon 的 CDN，外框版本 1 2 &amp;lt;link href=&amp;#34;https://fonts.googleapis.com/icon?family=Material+Icons+Outlined&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; 不知道關鍵字對 XD 上的 icon 右鍵就知道囉 Material icon 使用方法 這篇用掛 CDN 直接載入（可以看這篇 Material icon, Google font 安裝方式）</description></item><item><title>Math Object</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/Math-Object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/Math-Object/</guid><description>Math
property .PI method pow(a,b)：a^b random()： 0-1間的隨機數 sqrt()：根號 abs()：絕對值 floo()：去小數點後 #js #math #logic</description></item><item><title>MERN</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/MERN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/MERN/</guid><description>MERN React. js + Node. js + Express + MongoDB example: MERN stack CRUD App MERN Stack Explained
專案會分成前端 [[React]] ，跟後端兩部分</description></item><item><title>method-override</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/method-override/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/method-override/</guid><description>method-override method-override
因為 html [[Form]] 不支援 [[HTTP request]] GET, POST 之外的請求，需要額外裝模組輔助
1 2 3 4 5 6 7 8 9 const methodOverride = require(&amp;#39;method-override&amp;#39;); // middleware app.</description></item><item><title>Middleware 使用 req 參數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Middleware-%E4%BD%BF%E7%94%A8-req-%E5%8F%83%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Middleware-%E4%BD%BF%E7%94%A8-req-%E5%8F%83%E6%95%B8/</guid><description>Middleware 使用 req 參數 詳細之後會談
1 2 3 4 app.use(function (req, res, next) { req.method = &amp;#34;POST&amp;#34;; // 把對方的請求強制改成 post next(); })</description></item><item><title>Middleware 使用 res.send</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Middleware-%E4%BD%BF%E7%94%A8-res.send/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Middleware-%E4%BD%BF%E7%94%A8-res.send/</guid><description>Middleware 使用 res.send 大型專案很實用的功能，可以在還沒有 [[Routing]] 的情況下 send
1 2 3 4 5 6 7 8 9 10 11 app.use(function (req, res, next) { res.</description></item><item><title>middleware(Authenticate Requests)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/middlewareAuthenticate-Requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/middlewareAuthenticate-Requests/</guid><description>middleware (Authenticate Requests) Middleware：請求包含 /auth？ 否：繼續執行 Life Cycle 是：進到 [[auth-route]] 模組 1 2 3 4 5 6 7 // 在 index.</description></item><item><title>Middleware(express)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Middlewareexpress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Middlewareexpress/</guid><description>Middleware 一種 function 在 [[Express Life Cycle 生命週期]] 正中間（接收請求到收到回應間）執行 每次獲得請求（ 不論哪種 [[HTTP Verbs]] 的請求）就會執行一次 每個 Middleware (app.use(function))都可以讀取 req, res 以及下一個 middleware function 套用 Middleware 需要CSS：[[Express 的 CSS 樣式環境建置 (Serving a Static File)]] 需要 POST 表單：[[POST 表單(express)]] 用：[[body-parser]] 撰寫 Middleware [[撰寫 Middleware]] #js #advanceJs #library #framework #nodeJs #backEnd #module #expressJs #npm #server</description></item><item><title>Middleware(Mongoose)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/MiddlewareMongoose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/MiddlewareMongoose/</guid><description>Middleware (Mongoose) [[Mongoose Method]] [[Mongoose 建置]]
Schema.pre() 可以定義哪些動作之前（pre）要做什麼動作
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const fs = require(&amp;#39;fs&amp;#39;) // file system // define a schema // 定義在 &amp;#39;save&amp;#39; 之前要做什麼事 // writeFile: 建立一個檔案，指定寫入什麼內容 studentSchema.</description></item><item><title>Middlewares, Error Handling, Cookies, Sessions</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Middlewares-Error-Handling-Cookies-Sessions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Middlewares-Error-Handling-Cookies-Sessions/</guid><description>Middlewares, Error Handling, Cookies, Sessions [[Express Life Cycle 生命週期]]
[[Middleware(express)]]
[[Error Handling（Routing 後面）]] [[Cookies and Sessions]]</description></item><item><title>Minlength(number)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Minlengthnumber/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Minlengthnumber/</guid><description>Minlength (number) (Mongoose) [[String 用 Validators]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // define a schema const studentSchema = new mongoose.</description></item><item><title>mkdir</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/mkdir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/mkdir/</guid><description>新增資料夾</description></item><item><title>Modal</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Modal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Modal/</guid><description>Modal 運作 除 html, css 也需要 js 才能運作 啟動時無法滾動 body 內容 只能一個同時用單一 modal 點擊背景會關閉視窗：（.modal 上寫 data-bs-backdrop=&amp;quot;static&amp;quot; 可取消) 內容過長時可滾動視窗（ .modal&amp;gt;.modal-dialog加上.modal-dialog-scrollable可不滾動視窗只滾動 modal 內文） 基本組合 屬性 按鈕 Modal（.</description></item><item><title>Module Wrapper</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/Module-Wrapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/Module-Wrapper/</guid><description>Module Wrapper 21/11/12 現下的 Document 說明
JS 可以在瀏覽器內直接執行，但透過 Node 在終端運行時，會用 Module Wrapper 將 js 程式碼包起來再運行
1 2 3 (function(exports, require, module, __filename, __dirname) { // Module code actually lives in here }); 所以會使全域變數都會限制在這個函式的作用域([[Scope#Function Scope]])內</description></item><item><title>module 參數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/module-%E5%8F%83%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/module-%E5%8F%83%E6%95%B8/</guid><description>module 在終端內可以看到 module 也是一個物件（[[Module Wrapper]] 的其中一個參數）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Module { id: &amp;#39;.</description></item><item><title>MongoDB</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB/</guid><description>MongoDB [[DBMS(RDBMS)]] 的一種，屬於 noSQL（[[Database 數據庫#SQL and NoSQL]]）
[[JSON and BSON 的差別]]
[[MongoDB 環境建置]]
[[MongoDB 指令]]</description></item><item><title>MongoDB Atlas</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Mongoose-Atlas/MongoDB-Atlas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Mongoose-Atlas/MongoDB-Atlas/</guid><description>MongoDB Atlas 要注意不同專案不要用到同一個 cluster（collection 要清掉）
雲端版本的 [[MongoDB]]
Network Access Current 跟 Anywhere IP 都新增
Database Access 新增 User</description></item><item><title>MongoDB Atlas, Passport.js, OAuth</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/MongoDB-Atlas-Passport.js-OAuth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/MongoDB-Atlas-Passport.js-OAuth/</guid><description>MongoDB Atlas, Passport.js, OAuth 1 2 3 4 5 6 7 8 9 10 11 12 13 14 專案/ | |– routes/ | |– auth-routes.</description></item><item><title>MongoDB CRUD</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-CRUD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-CRUD/</guid><description>MongoDB CRUD [[DBMS(RDBMS)]] 都有一套自己的 [[Database 數據庫#C R U D]] CRUD
Insertion(create): [[MongoDB CRUD#Insertion create]] Find(read):[[MongoDB CRUD#find read]] Update: [[MongoDB CRUD#Update]] Delete: [[MongoDB CRUD#Delete]] Insertion(create) 新增 collection，裡面就放一個 object</description></item><item><title>MongoDB 指令</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-%E6%8C%87%E4%BB%A4/</guid><description>MongoDB 指令 [[MongoDB 環境建置]] 運行之後
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Sz-de-MacBook-Pro:~ sz$ mongosh Current Mongosh Log ID: 61b045fbdafe6b9b3b4c2152 Connecting to: **mongodb://127.</description></item><item><title>MongoDB 環境建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/</guid><description>Install MongoDB Community Edition on macOS
現行版本 10.14 以上都支援，但 homebrew 有限支援，10.14 測試可以安裝，可能會需要更新 command line
前置 1 xcode-select --install 安裝 mongoDB 1 brew tap mongodb/brew 1 brew install mongodb-community@5.</description></item><item><title>Mongoose</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Mongoose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Mongoose/</guid><description>Mongoose 一種 [[ODM]]，用來連結 [[MongoDB]] 到網頁專案上 也是 npm 模組 [[Mongoose 建置]] [[利用 Mongoose 連上 MongoDB]] [[使用與操作 Mongoose]] [[Request handling（搭配數據庫CRUD）]]（進階） [[Database 數據庫#架構]] [[Mongoose CRUD]] [[MongoDB Atlas]] [[使用與操作 Mongoose]] [[Schema Type]] [[Mongoose Method]] [[Promise and Query (Mongoose)]] 其他應用 [[用資料夾管理 Mongoose models 模組]] #database #nosql #json #npm #node #odm</description></item><item><title>Mongoose CRUD</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Mongoose-CRUD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Mongoose-CRUD/</guid><description>Mongoose CRUD [[Schema Type]] [[Database 數據庫#C R U D]] [[Create]] [[Find(Read)]] [[Update]] [[Delete]]</description></item><item><title>Mongoose Method</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Mongoose-Method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Mongoose-Method/</guid><description>Mongoose Method [[Instance Method]] [[Static Method]] [[Middleware(Mongoose)]] #database #mongoose #crud</description></item><item><title>Mongoose 建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/Mongoose-%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/Mongoose-%E5%BB%BA%E7%BD%AE/</guid><description>[[Mongoose]] 建置 npm install: express, ejs, mongoose([[npm 建置與指令]]) import：[[取得 Node.js 裡的模組]] [[利用 Mongoose 連上 MongoDB]] [[Middleware(express)]] [[使用與操作 Mongoose]] [[Request Handling(Express)]] port listening 寫在 middleware 前</description></item><item><title>mySQL</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/mySQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/mySQL/</guid><description>mySQL [[SQL]] 的其中一種 [[DBMS(RDBMS)]] [[mySQL 環境建置]] [[Database 數據庫#C R U D]] create：[[SQL create 製作表格]] read：[[SQL read 檢視表格內容]] update：[[SQL update 更新既有表格內容]] delete：[[SQL delete 刪除既有表格內容]] 構成 [[SQL 的 Keys]] [[Data Types]] query(查詢) [[SQL read 檢視表格內容]] 可以檢視整個表格內容 使用 query 可以建立篩選功能</description></item><item><title>mySQL 環境建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/mySQL-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/mySQL-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/</guid><description>mySQL 環境建置 現行版本的 mySQL 不支援舊版 10.14 了，要回去載 8.0.22 版本 另外 homebrew 現行版本也不支援 10.14 了救命
小白入门：MySQL超详细安装教程（mac版）
記得設定密碼 #database #sql</description></item><item><title>nav-item</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/nav-item/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/nav-item/</guid><description>nav-item 細項
1 2 3 &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt; &amp;lt;a class=&amp;#34;nav-link active&amp;#34; aria-current=&amp;#34;page&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; dropdown 在 .nav-item 內可以使用 .</description></item><item><title>nav-link</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/nav-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/nav-link/</guid><description>nav-link 特指在 navbar 內的連結設定（不會影響到其他 btn-link）
.active 代表當前頁面（搭配 aria-current=&amp;quot;page&amp;quot; 屬性使用） 1 &amp;lt;a class=&amp;#34;nav-link active&amp;#34; aria-current=&amp;#34;page&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt; #bs/component/navbar</description></item><item><title>navbar</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar/</guid><description>navbar 1 2 3 4 5 6 &amp;lt;nav class=&amp;#34;navbar navbar-light bg-secondary-light navbar-expand-lg&amp;#34;&amp;gt; &amp;lt;!-- navabr: 主要 class &amp;lt;!-- navbar-light：淺字（配合深底） &amp;lt;!-- bg-&amp;lt;theme-color（自訂變數的話，要設定API）&amp;gt; --&amp;gt; &amp;lt;!</description></item><item><title>navbar 內放入 form 元素（button, input...）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-%E5%85%A7%E6%94%BE%E5%85%A5-form-%E5%85%83%E7%B4%A0button-input.../</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-%E5%85%A7%E6%94%BE%E5%85%A5-form-%E5%85%83%E7%B4%A0button-input.../</guid><description>navbar 內放入 form 元素（button, input&amp;hellip;） 也可以放入表單、按鈕等內容，視有沒有收合需求放入 .navbar-nav 內
1 2 3 4 &amp;lt;form class=&amp;#34;container-fluid justify-content-start&amp;#34;&amp;gt; &amp;lt;button class=&amp;#34;btn btn-outline-success me-2&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;Main button&amp;lt;/button&amp;gt; &amp;lt;button class=&amp;#34;btn btn-sm btn-outline-secondary&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;Smaller button&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; #bs/component/navbar</description></item><item><title>navbar-brand</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-brand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-brand/</guid><description>navbar-brand 對 &amp;lt;a&amp;gt; 最適用 1 &amp;lt;a class=&amp;#34;navbar-brand&amp;#34; href=&amp;#34;/&amp;#34;&amp;gt;DOYOGA&amp;lt;/a&amp;gt; 加入 &amp;lt;img&amp;gt; 1 2 3 &amp;lt;a class=&amp;#34;navbar-brand&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;/docs/5.</description></item><item><title>navbar-nav</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-nav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-nav/</guid><description>navbar-nav 細項群組（會被收起來的） 寫法 ul.navbar-nav &amp;gt; li.[[nav-item]]&amp;gt; a.[[nav-link]] div.navbar-nav &amp;gt; a.[[nav-link]] 1 2 3 4 5 &amp;lt;ul class=&amp;#34;navbar-nav me-auto mb-2 mb-lg-0&amp;#34;&amp;gt; &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt; &amp;lt;a class=&amp;#34;nav-link active&amp;#34; aria-current=&amp;#34;page&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; !</description></item><item><title>navbar-toggler</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-toggler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-toggler/</guid><description>navbar-toggler 收合的按鈕
1 2 3 &amp;lt;button class=&amp;#34;navbar-toggler&amp;#34; type=&amp;#34;button&amp;#34; data-bs-toggle=&amp;#34;collapse&amp;#34; data-bs-target=&amp;#34;#navbarSupportedContent&amp;#34; aria-controls=&amp;#34;navbarSupportedContent&amp;#34; aria-expanded=&amp;#34;false&amp;#34; aria-label=&amp;#34;Toggle navigation&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;navbar-toggler-icon&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/button&amp;gt; #bs/component/navbar</description></item><item><title>Nested Routes(react-router-dom （未完成）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/Nested-Routesreact-router-dom-%E6%9C%AA%E5%AE%8C%E6%88%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/Nested-Routesreact-router-dom-%E6%9C%AA%E5%AE%8C%E6%88%90/</guid><description>Nested Routes [[react-router-dom]]
You may have noticed when clicking the links that the layout in App disappears. Repeating shared layouts is a pain in the neck.</description></item><item><title>new</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/new/</guid><description>new 一種 JS 的 reserved word
功能 創造一個空物件
#js #advanceJs #object #oop</description></item><item><title>Node</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/Node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/Node/</guid><description>後端 [[常見的後端的程式語言]] 網路知識 [[IP]] [[Port]] [[靜態與動態網頁 Static and Dynamic Website]] Node [[介紹 Node.js]] [[安裝 Node.js]] [[Node 指令]] [[Module Wrapper]] [[Node.</description></item><item><title>Node to API</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Node-to-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Node-to-API/</guid><description>Node to API [[Fetch#需要有 Authorization Key 才能使用的 API]]
Node 是不支援 [[Fetch]] 功能的；[[Node to API - node fetch]]
終端 1 2 3 npm init npm install express ejs nodemon (不用安裝 mongoose) app.</description></item><item><title>Node to API - node fetch</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/Node-to-API-node-fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/Node-to-API-node-fetch/</guid><description>Node to API - 使用 fetch 的狀況 [[Node to API#Routing]]
Node 不支援 [[Fetch]] 功能，在 node 裡想要串 [[API]] 要注意，需要用 [[npm]] 再裝個 node-fetch</description></item><item><title>Node 指令</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/Node-%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/Node-%E6%8C%87%E4%BB%A4/</guid><description>指令 1 node 查看版本 1 node --version 執行檔案 node.js 可以讓 JS 在瀏覽器之外的環境運行
1 2 // 在 fileName.</description></item><item><title>node 的 gitignore 設定</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/node-%E7%9A%84-gitignore-%E8%A8%AD%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/node-%E7%9A%84-gitignore-%E8%A8%AD%E5%AE%9A/</guid><description>node 的 [[gitignore]] 設定 使用這個檔案 node.gitignore
[[Cookies and Sessions 的安全性措施]]
#js #advanceJs #library #framework #nodeJs #backEnd #git</description></item><item><title>Node.js 的預設參數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/Node.js-%E7%9A%84%E9%A0%90%E8%A8%AD%E5%8F%83%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/Node.js-%E7%9A%84%E9%A0%90%E8%A8%AD%E5%8F%83%E6%95%B8/</guid><description>Node.js 的預設參數 [[Module Wrapper]] 帶有幾個參數可以使用，平常在瀏覽器運作時是不會有這些參數的
路徑相關 文件位置：__filename 資料夾位置：__dirname [[使用路徑的兩種寫法]] [[path]]：組合路徑、顯示檔名等功能
[[取得 Node.js 裡的模組]] 相關 export：[[匯出模組]] require：[[匯入模組]] module：[[module 參數]] [[整合模組匯出匯入]]：進階的匯出匯入使用法</description></item><item><title>nodemon</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/nodemon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/nodemon/</guid><description>nodemon nodemon code 更新後， cmd 會自動重新執行 node.js
安裝 方法一：電腦全域安裝（推薦）
1 npm install -g nodemon 有出現 nodemon: command not found 請用 [[nvm]] 重新安裝 node</description></item><item><title>npm</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/npm/</guid><description>npm (node package manager) 管理並追蹤他人撰寫的 Node [[模組]]，安裝 [[Node]] 就會一起下載下來囉！
[[npm 建置與指令]] [[指令(npm)]] [[npm 推薦模組]] 遭遇狀況 [[沒辦法全域安裝 npm 模組：code EACCES]]：[[nvm]]</description></item><item><title>npm init 初始化(package.json)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-init-%E5%88%9D%E5%A7%8B%E5%8C%96package.json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-init-%E5%88%9D%E5%A7%8B%E5%8C%96package.json/</guid><description>初始化 (package.json) 當專案要做 npm 的使用時，都必須先初始化環境，製作一個 package.json 的檔案，有這個檔案才能上 npm 去使用別人的模組
1 2 // 專案資料夾 npm init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // package.</description></item><item><title>npm install 尋找想要的 npm 模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-install-%E5%B0%8B%E6%89%BE%E6%83%B3%E8%A6%81%E7%9A%84-npm-%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-install-%E5%B0%8B%E6%89%BE%E6%83%B3%E8%A6%81%E7%9A%84-npm-%E6%A8%A1%E7%B5%84/</guid><description>尋找想要的 npm 模組 1 2 // install 可以用 i 簡寫 npm install &amp;lt;模組名稱，有多個用空白鍵隔開&amp;gt; [[npm 推薦模組]]</description></item><item><title>npm uninstall：裝錯模組取消安裝</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-uninstall%E8%A3%9D%E9%8C%AF%E6%A8%A1%E7%B5%84%E5%8F%96%E6%B6%88%E5%AE%89%E8%A3%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-uninstall%E8%A3%9D%E9%8C%AF%E6%A8%A1%E7%B5%84%E5%8F%96%E6%B6%88%E5%AE%89%E8%A3%9D/</guid><description>npm uninstall：裝錯模組取消安裝 1 npm uninstall &amp;lt;模組名稱，有多個用空白鍵隔開&amp;gt; #node/npm #js/module</description></item><item><title>npm 建置與指令</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-%E5%BB%BA%E7%BD%AE%E8%88%87%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-%E5%BB%BA%E7%BD%AE%E8%88%87%E6%8C%87%E4%BB%A4/</guid><description>[[npm]] 建置與指令 [[安裝 Node.js]]（電腦） [[npm init 初始化(package.json)]]（專案）：package.json 檔案 [[npm install 尋找想要的 npm 模組]]（專案）：node_modules 資料夾 [[npm uninstall：裝錯模組取消安裝]] #js #advanceJs #library #framework #nodeJs #backEnd #module #npm</description></item><item><title>npm 推薦模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/npm-%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/npm-%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/</guid><description>[[nodemon]] [[Express.js]] [[Mongoose]] [[Node to API - node fetch]] #js #advanceJs #library #framework #nodeJs #backEnd #module #expressJs #npm</description></item><item><title>Number</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Number/Number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Number/Number/</guid><description>Number NaN: not a number Infinity: 無限大 1 2 3 console.log(5 / 0); // log Infinity console.log(Infinity / Infinity); // log Infinity 跟微積分有關（好） NaN === NaN; // log false 想要認定是否為 NaN 要用 isNaN [[運算#條件語句｜if switch]]</description></item><item><title>Number 用 Validators</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Number-%E7%94%A8-Validators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Number-%E7%94%A8-Validators/</guid><description>Number 用 [[Validators]] Min Max Enum( 可參照[[Enum(指定 string, number)]]) 1 2 3 4 5 6 7 8 // define a schema const studentSchema = new mongoose.</description></item><item><title>nvm</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/nvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/nvm/</guid><description>nvm nvm github：詳細指令請參照 nvm：快速安裝、切換不同版本的 Node.js
安裝
1 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash 結束後先重開 terminal
1 command -v nvm 指定安裝版本 1 nvm install node # 最新版 1 nvm install 14.</description></item><item><title>OAuth</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/OAuth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/OAuth/</guid><description>OAuth (Open Authentication) 使用 JS Library：[[Passport.js]]
[[Library 跟 Framework 的差別]]</description></item><item><title>Obisidian 功能</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obisidian-%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obisidian-%E5%8A%9F%E8%83%BD/</guid><description>複製搜尋結果 建議加上 tag 才不會造成過大的連結性 #obsidian</description></item><item><title>Object</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Object/</guid><description>物件 Object [[物件字面值]]內可以包含多個屬性 (properties) 每個屬性通常都是以 [[Key-Value Pair]] 的形式出現，value 可以為其他的[[原始資料類型 Primitive Data Types]]，或是 [[Function]]、[[Array]]、甚至是 [[Object]]，另外在 ES6 有規範了 [[Function 簡寫語法糖]] 1 2 3 4 5 6 let home = { name : &amp;#39;Mary&amp;#39;, {key或屬性} : {值value}, properties, method, } [[物件傳參考#傳參考 Call By Reference]] 物件與陣列皆為傳參考特性(reference data types)，宣告變數時皆為讀取他的記憶體，而非值本身</description></item><item><title>object-fit</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/object-fit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/object-fit/</guid><description>object-fit https://developer.mozilla.org/ja/docs/Web/CSS/object-fit
狀態 填滿 出血 不變形 cover O O O fill O X X contain X X O none * * O ^1ffb45</description></item><item><title>Obsidian Git</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-Git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-Git/</guid><description>Obsidian Git [[使用 gulp#git]]（git 的部份就好） Day 26 : 插件篇 05 — 做好筆記備份，使用 Obsidian Git自動備份筆記到 Github 可能會要求金鑰，開終端機寫比較快（帳號是帳號，密碼輸金鑰） 遇到問題 必須一直重新登入：</description></item><item><title>Obsidian 快捷鍵</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-%E5%BF%AB%E6%8D%B7%E9%8D%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-%E5%BF%AB%E6%8D%B7%E9%8D%B5/</guid><description>cmd-O 快速搜尋 cmd-E 切換預覽 / 編輯 cmd-shift-F 搜尋 cmd-opt-方向鍵返回 cmd-點擊另開 group 顯示 自訂： opt + 方向鍵與上一行互換
If you have the [[Command palette]] enabled, You can use Ctrl/Cmd+P to bring it up, which will show you all currently available commands and their keyboard shortcuts.</description></item><item><title>Obsidian 遠端、發佈相關</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-%E9%81%A0%E7%AB%AF%E7%99%BC%E4%BD%88%E7%9B%B8%E9%97%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-%E9%81%A0%E7%AB%AF%E7%99%BC%E4%BD%88%E7%9B%B8%E9%97%9C/</guid><description>title: &amp;ldquo;Obsidian 遠端、發佈相關&amp;rdquo; tag: Obsidian 遠端、發佈相關 loseq foam
發布 Free Obsidian Publish Alternative!?! How does it compare?</description></item><item><title>ODM</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/ODM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/ODM/</guid><description>ODM Object Document Modeling Mapping 通常是 NoSQL 在用，[[SQL]] 通常用的是 [[ORM]] #json #database #nosql</description></item><item><title>ORM</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/ORM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/ORM/</guid><description>ORM Object Relational Modeling 對應 [[ODM]] 用來將 [[SQL]] 連接到網頁專案的工具 #database #sql</description></item><item><title>overflow</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/overflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/overflow/</guid><description>flex 碰上 overflow overflow 之外的項目無法 scroll 到 Can&amp;rsquo;t scroll to top of flex item that is overflowing container 放 jusitify-content-center 在窄螢幕會有問題 scroll 沒辦法滾到第一項目 查到兩種作法</description></item><item><title>Passport Verified Callback</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Passport-Verified-Callback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Passport-Verified-Callback/</guid><description>Passport Verified Callback [[Configure Strategy]] 中的最後一段，設定用戶用 google 登入後的行為
數據庫裡有這個用戶嗎（比對 OAuth 提供的 profile）？ 有：將這用戶的資料取出 沒有：將這個用戶加 DB 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 passport.</description></item><item><title>passport-google-oauth20</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-google-oauth20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-google-oauth20/</guid><description>passport-google-oauth20 passport-google-oauth20
安裝模組 1 npm install passport passport-google-oauth20 [[Authenticate Requests]]：登出登入 routing、登入後流程設置 [[Configure Strategy]]： [Configure Strategy(passport-google)] [[建立 Google 的 OAuth 憑證]] !</description></item><item><title>passport-google-oauth20 的 .env 變數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-google-oauth20-%E7%9A%84-.env-%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-google-oauth20-%E7%9A%84-.env-%E8%AE%8A%E6%95%B8/</guid><description>passport-google-oauth20 的 .env 變數 1 2 3 4 // string 不用加 &amp;#39;&amp;#39; or &amp;#34;&amp;#34; DB_CONNECT=Atlas 給的 URI（密碼跟數據庫名要設定） GOOGLE_CLIENT_ID=從 google platform 取得的用戶端 ID GOOGLE_CLIENT_SECRET=從 google platform 取得的用戶端密碼 [[dotenv（使用 env 變數）]]</description></item><item><title>passport-local</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-local/</guid><description>passport-local passport-local
[[Passport.js]]
1 npm install passport-local 1 const LocalStrategy = require(&amp;#39;passport-local&amp;#39;); [[Configure Strategy(passport-local)]] Authenticate Requests(local) [[Local Login]] [[Authenticate Requests]]</description></item><item><title>Passport.js</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Passport.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Passport.js/</guid><description>Passport. js npm Passport Stretegies Passport 提供 node 伺服器端使用各平台 OAuth 來登入
1 2 // passport 模組跟 + 使用的特定平台 stretegy npm install passport &amp;lt;看你要用什麼平台登入&amp;gt; [[passport-google-oauth20]] [[passport-local]] [[Sessions in Passport]] [[Authenticate Requests]] [[post-model.</description></item><item><title>path</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/path/</guid><description>path 模組 [[內建模組(Node.js)]] 之一
[[Node.js 的預設參數#路徑相關]]：兩者都是顯示「路徑」，無法單純顯示檔名
1 console.log(path.去文件找功能()); [[使用路徑的兩種寫法#path 模組]]：組合路徑名稱 basename：顯示檔名 extname：副檔名 [[匯入模組]]</description></item><item><title>Pexals API with React</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Fetch/Pexals-API-with-React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Fetch/Pexals-API-with-React/</guid><description>Pexals API with React 本篇使用 Pexels API 做例子，需註冊
精選相片 API 搜尋相片 API [[Fetch]] &amp;lt;main.</description></item><item><title>Position</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/Position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/Position/</guid><description>Position CSS : position 絕對定位與相對定位 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 #css</description></item><item><title>position</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/position/</guid><description>position 參考對象：position-relative 本體：position-absolute 參考點中心 使用 .translate-middle，來配合 transform 的translateX(-50%) 與 translateY(-50%)來將 position 的參考點對於中心
#css/scss #bs/util</description></item><item><title>POST 表單(express)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/POST-%E8%A1%A8%E5%96%AEexpress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/POST-%E8%A1%A8%E5%96%AEexpress/</guid><description>POST ([[Form]]) HTML：form 標籤要設定 method=&amp;quot;POST&amp;quot; [[body-parser]] 可以讓後端使用客戶填入的內容 req.body：[[POST 表單(express)#使用用戶填入的資訊]] 單純收資料 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // index.</description></item><item><title>post-model.js</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/post-model.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/post-model.js/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const mongoose = require(&amp;#39;mongoose&amp;#39;); const postSchema = new mongoose.</description></item><item><title>Postman</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Postman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/Postman/</guid><description>Postman [[還沒建立前端前，用 Postman POST 請求]]
#js #backEnd #api</description></item><item><title>pre</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/pre/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/pre/</guid><description>pre 標籤與通用字體 by Sz tags: Sz HTML 2021夏季切版班 有錯再跟我反應QQ
&amp;lt;pre&amp;gt;是什麼 &amp;lt;pre&amp;gt; 的解釋 by MDN 現在不點開沒關係，下方也會附上，到時候再看就好
但是跳過預備知識很難講，讓我先從前面開始說起
font-family 在 font-family 我們會去定義頁面上的字體 避免字體檔案很大，拖垮網路速度，通常會建議使用內建字體 :::info 如果有更多美感的需求 可能會採用雲端字體（還有其他方法但這裡不提） 常見的有：</description></item><item><title>process(node)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/processnode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/processnode/</guid><description>process (node) javaTpoint
一個 [[Node]] 的全域物件，可以檢視目前的 platform, version 等
1 2 3 4 5 app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { console.</description></item><item><title>profile-route</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/profile-route/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/profile-route/</guid><description>profile-route [[Authenticate Requests]]
[[登入後]] 會顯示 profile.ejs 頁面
[[登入前後頁面的變化]]
匯出匯入 1 2 3 4 // routes/profile-route.js const router = require(&amp;#39;express&amp;#39;).</description></item><item><title>Promise</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Promise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Promise/</guid><description>Promise 解決早期的 [[Callback Hell]] 現象 是一個 [[object]]，要用 [[Constructor]] function (new)來生成，生成的 object 要放入一個 function 分為兩個結果，resolve, reject，前者回傳資訊（then），後者回傳錯誤資訊（catch） [[async, await, try, catch]] 可以改寫 搭配原生 [[API]]：[[Fetch]] 兩個結果 resolve 1 2 3 4 5 6 7 8 9 // constructor let example = new Promise((resolve, reject) =&amp;gt; { resolve({一個 object}); }) example.</description></item><item><title>Promise and Query (Mongoose)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Promise-and-Query-Mongoose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Promise-and-Query-Mongoose/</guid><description>[[Promise]] and Query (Mongoose) Doc 內隨意找個 Model api 來看 很容易看到 Returns 的欄位寫&amp;lt;&amp;lt;Promise&amp;gt;&amp;gt; 或是 &amp;lt;&amp;lt;Query&amp;gt;&amp;gt;（ Queries）
兩者很類似，都可以使用 .then() 跟 .catch() （[[Promise]]）</description></item><item><title>PropTypes：元件參數的 Vaildator</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/PropTypes%E5%85%83%E4%BB%B6%E5%8F%83%E6%95%B8%E7%9A%84-Vaildator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/PropTypes%E5%85%83%E4%BB%B6%E5%8F%83%E6%95%B8%E7%9A%84-Vaildator/</guid><description>PropTypes React 在使用 [[Component：可重複利用、自定參數的元件]] 的時候，參數可以透過 PropTypes 來定義規範，避免每次使用元件時，造成非預期的結果
必須安裝：prop-types（ npm） 這功能會吃掉很多效能，開發期間可以使用 babel-plugin-transform-react-remove-prop-types 關掉： npm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function SayHello({firstName, lastName}) { return ( &amp;lt;div&amp;gt; Hello {firstName} {lastName}!</description></item><item><title>Prototype</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/Prototype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/Prototype/</guid><description>Prototype 一個物件，包含共用的 properties 和 methods，可以供所有繼承的 [物件實例] 讀取（都放在同一個記憶體）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Constructor function Person(name, age, height) { // 大寫開頭 console.</description></item><item><title>Prototype Inheritance</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/Prototype-Inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/Prototype-Inheritance/</guid><description>Prototype Inheritance 我們自己可以設定一個 object，但也可以去讀取裡面沒有設定的 methods，原因是因為有從 prototype 的預設功能繼承
原有的 Constructor 負責放每個物件物件內容都不一樣的部份 一樣的部份就放到 Prototype 裡面，節省記憶體 繼承時兩個部分都要處理
[[Constructor]] 1 2 3 4 5 6 7 8 9 10 // Constructor function Person(name, age, height) { // 大寫開頭 console.</description></item><item><title>push</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/push/</guid><description>title: &amp;ldquo;push&amp;rdquo; tag: push 到遠端 repository 1 2 3 4 git remote add origin https://github.com/Szyln/Joanne.CV.git git branch -M main git push -u origin main git push 在 github 新增 repository 新建 repository 從本機 repository 建立 從 github 給的程式碼來 [[git remote add]]] 記得 git config 確認一下狀態有沒有 remote 內容 push 更新資料到遠端 repository 從 github 給的程式碼的第二行程式碼</description></item><item><title>Push, Commit 的人不是我 why</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Push-Commit-%E7%9A%84%E4%BA%BA%E4%B8%8D%E6%98%AF%E6%88%91-why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Push-Commit-%E7%9A%84%E4%BA%BA%E4%B8%8D%E6%98%AF%E6%88%91-why/</guid><description>Push 的人不是我 why Why are my commits linked to the wrong user?
把 github 的設定內的 email 貼到以下指令內 1 $ git config --global user.</description></item><item><title>quartz test</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/test-quartz/quartz-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/test-quartz/quartz-test/</guid><description>[[test 2]] test 2 [[frontend/test quartz/test 2]] test 2</description></item><item><title>Quartz 特性</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Quartz-%E7%89%B9%E6%80%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Quartz-%E7%89%B9%E6%80%A7/</guid><description>Quartz 特性 Ctrl + K 搜尋 使用 Hugo 反向連結 連結內容預覽 連結圖</description></item><item><title>Quartz 發布 obsidian</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Quartz-%E7%99%BC%E5%B8%83-obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Quartz-%E7%99%BC%E5%B8%83-obsidian/</guid><description>Quartz 發布 Obsidian Quartz
[[Quartz 特性]]
安裝步驟 Get started
你需要的知識： git, Github 基礎理解 終端機基礎操作 [[Fork]] 原作者的 repo quartz 的 repo</description></item><item><title>Query</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Query/</guid><description>[[Routing for Query 回應表單]] [[url(module)]] [[Async（目錄）]][[endpoint]]</description></item><item><title>ratio</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/ratio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/ratio/</guid><description>ratiobuddy
1 2 3 4 5 6 7 $aspect-ratios: ( &amp;#34;1x1&amp;#34;: 100%, &amp;#34;4x3&amp;#34;: calc(3 / 4 * 100%), // 0.</description></item><item><title>React</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/React/</guid><description>React Front-End 框架（不是 Framework） 三大前端框架之一（Vue.js, Angular, React） Facebook 製作，2013 公開，2018 大更新 Component：可重複利用的元件 [[Hook]] 最淺顯易懂： w3schools: React 很多範例： egghead: the-beginner-s-guide-to-react 註：官方文件還保留很多先今不太常用的寫法，不建議先看官方文件 Babel children [Class Component](frontend/React/Component/Class Component.</description></item><item><title>React Snippet</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/React-Snippet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/React-Snippet/</guid><description>React Snippet 需安裝 Vscode Plugin：ES7+ React/Redux/React-Native snippets
rafce(react, function, export) 產出基本 React 架構
1 2 3 4 5 6 7 8 9 10 11 import React from &amp;#34;react&amp;#34;; // 變數名的生成會看你的檔名叫什麼 const Nav = () =&amp;gt; { return &amp;lt;div&amp;gt; &amp;lt;/div&amp;gt;; }; export default Nav; #js/react</description></item><item><title>React 使用的模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/React-%E4%BD%BF%E7%94%A8%E7%9A%84%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/React-%E4%BD%BF%E7%94%A8%E7%9A%84%E6%A8%A1%E7%B5%84/</guid><description>React 使用的模組 [[匯入模組]]
1 2 3 // 最基本要這兩個 import React from &amp;#39;react&amp;#39;; import ReactDOM from &amp;#39;react-dom&amp;#39;; ^19ab2a</description></item><item><title>React 環境</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/React-%E7%92%B0%E5%A2%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/React-%E7%92%B0%E5%A2%83/</guid><description>React 環境 使用 .jsx 取代 .js ：[[JSX]] 要留意 snippets 中 JavaScript 跟 JavaScriptReact 是不一樣的 Vscode Plugin 推薦安裝：ES7+ React/Redux/React-Native snippets [[React Snippet]]</description></item><item><title>React-bootstrap</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/React-bootstrap/React-bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/React-bootstrap/React-bootstrap/</guid><description>React-bootstrap 不包含 styling 部分（SCSS），要客製化要再匯入原生 BS
符合 React 的特性，不會直接操作實體 DOM 元素。
配合 React，將各式各樣的元件已經 Component 化，減少整個程式碼的複雜度。</description></item><item><title>React-bootstrap 建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/React-bootstrap/React-bootstrap-%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/React-bootstrap/React-bootstrap-%E5%BB%BA%E7%BD%AE/</guid><description>安裝 官網
1 npm install react-bootstrap bootstrap@5.1.3 BS 客製化的話要再多安裝原生 BS
1 npm install bootstrap 使用元件 使用元件要個別匯入</description></item><item><title>react-router-dom</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/react-router-dom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/react-router-dom/</guid><description>react-router-dom 1 npm install react-router-dom Routing Link (a 標籤) [[react-router-dom 版本差異]]
Routing 可以在 React 操作 Routing</description></item><item><title>react-router-dom 導向新頁面時不會回到頁面頂端</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/react-router-dom-%E5%B0%8E%E5%90%91%E6%96%B0%E9%A0%81%E9%9D%A2%E6%99%82%E4%B8%8D%E6%9C%83%E5%9B%9E%E5%88%B0%E9%A0%81%E9%9D%A2%E9%A0%82%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/react-router-dom-%E5%B0%8E%E5%90%91%E6%96%B0%E9%A0%81%E9%9D%A2%E6%99%82%E4%B8%8D%E6%9C%83%E5%9B%9E%E5%88%B0%E9%A0%81%E9%9D%A2%E9%A0%82%E7%AB%AF/</guid><description>react-router-dom 導向新頁面時不會回到頁面頂端 Scroll Restoration
新增 scroll 到頂端的元件
1 2 3 4 5 6 7 8 9 10 11 12 import { useEffect } from &amp;#34;react&amp;#34;; import { useLocation } from &amp;#34;react-router-dom&amp;#34;; export default function ScrollToTop() { const { pathname } = useLocation(); useEffect(() =&amp;gt; { window.</description></item><item><title>react-router-dom 版本差異</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/react-router-dom-%E7%89%88%E6%9C%AC%E5%B7%AE%E7%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Routing/react-router-dom-%E7%89%88%E6%9C%AC%E5%B7%AE%E7%95%B0/</guid><description>react-router-dom 版本差異 Wilson 課程影片是 5，該版本有 Switch 的寫法
[[react-router-dom]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Switch, Route } from &amp;#34;react-router-dom&amp;#34;; function App() { return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;Nav /&amp;gt; {/* 主要更改部分 */} {/* Switch 包兩個 Route，Route 包一個頁面（網頁共同部分 Nav, Footer 不含在內） */} &amp;lt;Switch&amp;gt; // exact 代表要完全符合 path 的值, 才會顯示 &amp;lt;Route path=&amp;#34;/&amp;#34; exact&amp;gt; &amp;lt;Homepage /&amp;gt; &amp;lt;/Route&amp;gt; &amp;lt;Route path=&amp;#34;/about&amp;#34; exact&amp;gt; &amp;lt;About /&amp;gt; &amp;lt;/Route&amp;gt; &amp;lt;/Switch&amp;gt; &amp;lt;Footer /&amp;gt; &amp;lt;/div&amp;gt; ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Routes, Route } from &amp;#34;react-router-dom&amp;#34;; function App() { return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;Nav /&amp;gt; {/* Switch 拿掉，改成 Routes 包兩個 Route，Route 內頁面寫在 element 即可*/} &amp;lt;Routes&amp;gt; &amp;lt;Route path=&amp;#34;/&amp;#34; element={&amp;lt;Homepage /&amp;gt;} /&amp;gt; &amp;lt;Route path=&amp;#34;/about&amp;#34; element={&amp;lt;About /&amp;gt;} /&amp;gt; &amp;lt;/Routes&amp;gt; &amp;lt;Footer /&amp;gt; &amp;lt;/div&amp;gt; ); } #js/react #routing #node/npm</description></item><item><title>React.Fragment：同時生成複數標籤</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/React.Fragment%E5%90%8C%E6%99%82%E7%94%9F%E6%88%90%E8%A4%87%E6%95%B8%E6%A8%99%E7%B1%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/React.Fragment%E5%90%8C%E6%99%82%E7%94%9F%E6%88%90%E8%A4%87%E6%95%B8%E6%A8%99%E7%B1%A4/</guid><description>React.Fragment 因為 [[ReactDOM：渲染]] 不能[[同時生成多個標籤]]，如果不想要[[上層多包一個標籤]]可以用這個功能
[[生成標籤：React.createElement()]]：可以多個內文（[[children]]）
1 2 3 4 5 6 7 const element = ( {/* 沒有內容的空標籤原本的內容是：React.</description></item><item><title>ReactDOM：渲染</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/ReactDOM%E6%B8%B2%E6%9F%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/ReactDOM%E6%B8%B2%E6%9F%93/</guid><description>ReactDOM ![[React 使用的模組#^19ab2a]]
React 遵循 [[5.關注點分離]]的規則，JS 的內容寫完後渲染到畫面指定位置上
1 2 3 // 可以直接簡寫成： ReactDom. render(&amp;#39;要渲染的內容&amp;#39;, document. querySelector(&amp;#39;#渲染位置&amp;#39;)); // &amp;lt;要渲染的內容&amp;gt; 只能有一個：[[同時生成多個標籤]] 1 2 3 4 5 &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt; &amp;lt;!</description></item><item><title>readFile</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/readFile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/readFile/</guid><description>1 2 3 4 fs.readFile(&amp;#39;./try.txt&amp;#39;, &amp;#39;utf8&amp;#39;, (e, data) =&amp;gt; { if (e) throw e; console.log(data); }) [[內建模組(Node.js)]]</description></item><item><title>removeItem(key)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/removeItemkey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/removeItemkey/</guid><description>removeItem (key) 刪除指定內容</description></item><item><title>REPL</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/REPL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/REPL/</guid><description>REPL (Read, Evaluate, Print, Loop) 在 Python, Java, [[Node]] 中都有這個功能，可在終端運行該語言（[[介紹 Node.js]]）
1 2 3 // 例如在終端機寫算式 &amp;gt; 2 * 2 // 會得到 4 #js #advanceJs #library #framework #nodeJs #backEnd #CMD</description></item><item><title>Repository</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/Repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/Repository/</guid><description>Respository 在[[Working Tree]]中 Respository 分為兩種
[[本機 Repository]] [[遠端 Repository]] (Github, Bitbucket) #git</description></item><item><title>req.cookies</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/req.cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/req.cookies/</guid><description>req.cookie 使用 cookie，需要安裝 middlewarea 模組 [[cookie-parser]] 可以拿來取得 [[res.cookie]] 傳過來的 [[Cookie]]
1 2 3 4 5 app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { console.</description></item><item><title>req.isAuthenticated()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.isAuthenticated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.isAuthenticated/</guid><description>req.isAuthenticated () 代表客戶端是否有認證完成（設定 passport 之後可以用的資料）</description></item><item><title>req.logout()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.logout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.logout/</guid><description>req.logout () 使客戶端可以登出的 method（設定 passport 之後可以用的資料）</description></item><item><title>req.user</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.user/</guid><description>req.user 客戶端使用者的資料（設定 passport 之後可以用的資料）
1 2 3 router.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { res.render(&amp;#39;page&amp;#39;, { req.user }); }) 可以使用像類似這種資料</description></item><item><title>Request Handling(Express)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Request-HandlingExpress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Request-HandlingExpress/</guid><description>Request Handling (Express) 跟 node.js（ [[Server 建立]]）比起來簡化很多 處理 [HTTP request] [[Routing]] [[send 和 sendFile 回應(express)]] 處理各種網路請求的內容</description></item><item><title>Request handling（搭配數據庫CRUD）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/Request-handling%E6%90%AD%E9%85%8D%E6%95%B8%E6%93%9A%E5%BA%ABCRUD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/Request-handling%E6%90%AD%E9%85%8D%E6%95%B8%E6%93%9A%E5%BA%ABCRUD/</guid><description>Request handling（搭配數據庫 CRUD） 使用數據庫多會用到 [[Promise]] 的功能 需要使用 [[Mongoose]] 進行讀取、存入資料庫的行為 想要做到的效果 用填入資訊建立 object，並且存入資料庫
1 2 3 4 5 首頁(localhost)/ |- students/ -&amp;gt; 數據庫資料顯示與網頁 | |- insert/ -&amp;gt; accept / reject | |- edit/:id -&amp;gt; 更新資料 | |- :id -&amp;gt; 網址輸入 id 就顯示對應學生 [[Find(Read)]] 讀取整個數據庫：[[將數據庫資料顯示於網頁]] 讀取數據庫單一物件：[[使用 Routing for pattern 顯示特定數據庫物件]] [[Create]] [[表單資料存入數據庫]] [[Update]] [[HTTP request#更新]] [[表單更新數據庫既有資料]] [[Delete]]：[[透過 Postman 刪除數據庫資料]] Error handing: [[Routing for all 回應亂打的網址]]：[[404 Not Found]]（一定要放在最後面） [[使用與操作 Mongoose]] [[POST 表單(express)]] #js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #routing #crud</description></item><item><title>required</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/required/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/required/</guid><description>required (Mongoose Validators) 值可以是：
boolean array: [true, &amp;quot;沒有填的時候跳出的錯誤提示&amp;quot;] function: function() { return this.其他欄位 &amp;gt; 3; } 1 2 3 4 5 6 cost studentSchema = new mongoose.</description></item><item><title>Rerender a React Application：有效率的重新渲染</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Rerender-a-React-Application%E6%9C%89%E6%95%88%E7%8E%87%E7%9A%84%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/Rerender-a-React-Application%E6%9C%89%E6%95%88%E7%8E%87%E7%9A%84%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93/</guid><description>Rerender a React Application React 中，重新渲染的時候不會造成整個區塊都被更新的問題 重整範圍：有更新的（ {time} ）屬性的範圍
1 2 3 4 5 6 7 8 9 10 11 12 function tick() { const time = new Date().</description></item><item><title>res.cookie</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/res.cookie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/res.cookie/</guid><description>res.cookie 傳送 cookie 給瀏覽器端儲存
1 2 3 app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { res.cookie(&amp;#39;name&amp;#39;, &amp;#39;Wilson&amp;#39;); }) 也可在 [[Postman]] 看到這些資料</description></item><item><title>res.redirect()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/res.redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/res.redirect/</guid><description>res.redirect () 重導到其他頁面
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 收到 put 更新後，更新數據庫 app.</description></item><item><title>Restful API</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API/</guid><description>Restful API [[Restful API 介紹]]
[[Restful API from Scratch]]；將 [[Express and Mongoose]] 製作成 API 讓他人連接到你的 MongoDB</description></item><item><title>Restful API from Scratch</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API-from-Scratch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API-from-Scratch/</guid><description>Restful API from Scratch 從頭開始製作一個 Restful API （以 [[Express and Mongoose]] 改寫） 把原本要拿來顯示在網頁上的東西（EJS），用資料的方法送給 API 用戶
步驟 [[建置（連接數據庫的表單）]]中 [[Request handling（搭配數據庫CRUD）]]需要更動的有；
不用網頁的介面 Homepage 不用了 EJS 也不用了 也不用提供表單了 傳送的內容幾乎都是 [[Object]] 格式 也不用傳 console.</description></item><item><title>Restful API 介紹</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API-%E4%BB%8B%E7%B4%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API-%E4%BB%8B%E7%B4%B9/</guid><description>Restful API 介紹 Representational state transfer 描述一種製作 API 需要依循的原則（像[[OSI 開放式通訊系統互連參考模型的七層架構]] 也是網路的參考原則） Restful Routing 目前提過的 JokeAPI, openweather API 都是遵照這個原則</description></item><item><title>roadmap 學習路徑</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/roadmap-%E5%AD%B8%E7%BF%92%E8%B7%AF%E5%BE%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/roadmap-%E5%AD%B8%E7%BF%92%E8%B7%AF%E5%BE%91/</guid><description>https://roadmap.sh/frontend/resources</description></item><item><title>rollup-plugin-copy（未完成）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/rollup-plugin-copy%E6%9C%AA%E5%AE%8C%E6%88%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/rollup-plugin-copy%E6%9C%AA%E5%AE%8C%E6%88%90/</guid><description>rollup-plugin-copy 還在看資料 https://www.npmjs.com/package/rollup-plugin-copy
https://github.com/vitejs/vite/issues/762 https://stackoverflow.com/questions/71180561/vite-change-ouput-directory-of-assets https://medium.com/js-dojo/how-to-solve-vue-js-prod-build-assets-relative-path-problem-71f91138dd79 https://stackoverflow.com/questions/68217795/vite-resolve-alias-how-to-resolve-paths
#未完成 #vite #js/react</description></item><item><title>Routing</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Routing/</guid><description>Routing (Express) 路徑的意思，後端處理網路請求時，不同路徑要給不同的內容
[[Routing for all 回應亂打的網址]] [[Routing for pattern 回應有規律的網址]] [[Routing for Query 回應表單]] #js #npm #node #expressJs #server #routing</description></item><item><title>Routing for all 回應亂打的網址</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-all-%E5%9B%9E%E6%87%89%E4%BA%82%E6%89%93%E7%9A%84%E7%B6%B2%E5%9D%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-all-%E5%9B%9E%E6%87%89%E4%BA%82%E6%89%93%E7%9A%84%E7%B6%B2%E5%9D%80/</guid><description>Routing for all 回應亂打的網址 這個要放在 [[Routing#Request Handling]] 的最後面，才不會什麼網址都跑這個
1 2 3 app.get(&amp;#39;*&amp;#39;, (req, res) =&amp;gt; { res.send(&amp;#39;頁面不存在&amp;#39;); }) [[404 Not Found]] #js #npm #node #expressJs #server #routing</description></item><item><title>Routing for pattern 回應有規律的網址</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-pattern-%E5%9B%9E%E6%87%89%E6%9C%89%E8%A6%8F%E5%BE%8B%E7%9A%84%E7%B6%B2%E5%9D%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-pattern-%E5%9B%9E%E6%87%89%E6%9C%89%E8%A6%8F%E5%BE%8B%E7%9A%84%E7%B6%B2%E5%9D%80/</guid><description>Routing for pattern 回應有規律的網址 網址尾端內容，如果是想要顯示有規律的內容（例如搜尋結果） 可以在網址尾端加入 /:不特定內容的群組
1 2 3 app.get(&amp;#39;/某個分支頁面/:分支底下的特定內容&amp;#39;, (req, res) =&amp;gt; { res.send(&amp;#39;你要找的是&amp;#39; + res.params.分支底下的特定內容 + &amp;#39;嗎？&amp;#39;); }) 舉例 搜尋就可以搜不同的內容，網頁上都會顯示同樣的格式</description></item><item><title>Routing for Query 回應表單</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-Query-%E5%9B%9E%E6%87%89%E8%A1%A8%E5%96%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-Query-%E5%9B%9E%E6%87%89%E8%A1%A8%E5%96%AE/</guid><description>回應表單 (Routing for Query) 回應取代一般的 get ，會使用對應 [[Form]] 的 post 功能
[[POST 表單(express)]] [[GET 表單(express)]] [[Query]] #js #expressJs #node #npm #form #server #routing</description></item><item><title>Routing 執行時的 Middleware（Route 中間）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Routing-%E5%9F%B7%E8%A1%8C%E6%99%82%E7%9A%84-MiddlewareRoute-%E4%B8%AD%E9%96%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Routing-%E5%9F%B7%E8%A1%8C%E6%99%82%E7%9A%84-MiddlewareRoute-%E4%B8%AD%E9%96%93/</guid><description>Routing 執行時的 [[Middleware(express)]]（route 中間） 之後在驗證單元會常用到 可以一個以上 1 2 3 4 5 6 7 8 9 10 11 // 通常不會這樣寫，會先把 middleware 存進變數內 // 在第二個參數加入 middleware app.</description></item><item><title>rwd.demo</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/rwd.demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/rwd.demo/</guid><description>#小組任務 #切版班 #homework &amp;lt;picture&amp;gt;不知道可不可以用</description></item><item><title>Salting</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Salting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Salting/</guid><description>Salting 在執行 [[Hash Function]] 之前多一道手續── Salting ──原始密碼先加上一些隨機字元之後再執行加密，使同一組密碼在數據庫內也長得不一樣 加上去的隨機字元並不是隱密的，但因為 [[Hash Function]] 是近乎不可逆的，所以也近乎不能回推原始密碼 #cryptogrphy</description></item><item><title>Schema Type</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Schema-Type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Schema-Type/</guid><description>Schema Type (Mongoose) 怎麼設定 primary key [[Create]] 的時候，需要定義資料類型 搭配 [[Validators]] 可以做更複雜的定義規範 寫法 記得類型要寫大寫</description></item><item><title>Scope</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/Scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/Scope/</guid><description>Scope 作用域 Scope(作用域) 有三種作用域
類型 Global Scope Function Scope [[Block]] Scope 作用域類型 var let const Global O O O Function O O O Block X O O Global Scope Global Scope 的變數，在哪裡都可以讀取</description></item><item><title>scrcpy</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/scrcpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/scrcpy/</guid><description>1 scrcpy 對sndcpy資料夾（延遲很重
1 ./sndcpy</description></item><item><title>SCSS</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/SCSS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/SCSS/</guid><description>SCSS 簡介 金魚腦用｜ Sass cheatsheet
介紹 codepen 的環境下 使用時 css 格式要調整成 scss view complied css - 可切換看編譯前後的 css sass and scss 兩種寫法 scss 接近原本的 css</description></item><item><title>SCSS(JSX)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/SCSSJSX/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/SCSSJSX/</guid><description>SCSS (JSX) 編譯完後的 CSS 檔可以直接匯到 app.jsx 內 不用匯到 main.jsx （ main 只負責 render）
1 2 3 4 5 6 7 8 9 10 11 12 import React from &amp;#39;react&amp;#39;; // 匯入 css import &amp;#39;.</description></item><item><title>secret 的變數設定</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/secret-%E7%9A%84%E8%AE%8A%E6%95%B8%E8%A8%AD%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/secret-%E7%9A%84%E8%AE%8A%E6%95%B8%E8%A8%AD%E5%AE%9A/</guid><description>secret 的變數設定 為了加密內容，secret 不該直接寫入字串，需要將其隱藏，需透過下列三項來達成
[[Node]] 內建全域物件：[[process(node)]] [[dotenv（使用 env 變數）]] 模組：使用與設定 env 變數 [[node 的 gitignore 設定]]：隱藏 env 檔案 在 .</description></item><item><title>select &amp; datalist 選單</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/select-datalist-%E9%81%B8%E5%96%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/select-datalist-%E9%81%B8%E5%96%AE/</guid><description>select &amp;amp; datalist select
兩者差別在 select 只能選取 option 內容 datalist 可自填
select value 要記得寫
1 2 3 4 5 6 7 8 9 10 11 &amp;lt;select name=&amp;#34;choice&amp;#34; required&amp;gt; &amp;lt;!</description></item><item><title>send 和 sendFile 回應(express)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/send-%E5%92%8C-sendFile-%E5%9B%9E%E6%87%89express/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/send-%E5%92%8C-sendFile-%E5%9B%9E%E6%87%89express/</guid><description>回應 html 內容 [[Routing]] 內有更多綜合運用
res.send() [[Express.js#建立 server]] 中 send 可以送出純字串或是 html 都可，跟 [[node]] [[Server 建立]] 的 write 類似
但是只能送一行</description></item><item><title>Server 建立</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E5%BB%BA%E7%BD%AE/Server-%E5%BB%BA%E7%AB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E5%BB%BA%E7%BD%AE/Server-%E5%BB%BA%E7%AB%8B/</guid><description>建立 Server 用[[內建模組(Node.js)]] 來建立 Web server，不太容易，通常會用 [[Express.js]] 來建立
1 2 3 4 5 6 7 8 9 10 11 12 13 14 const http = require(&amp;#39;http&amp;#39;); // 內建模組 const hostname = &amp;#39;127.</description></item><item><title>Session</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/Session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/Session/</guid><description>Session 需使用 [[express-session]] 模組
[[Cookies and Sessions]] 在 [[Cookie]] 無法加密且容量較小 會傳送到客戶端的只有一個 ID（connect.sid） 用途例子：辨識是否登入 通常會搭配 [[Database 數據庫]]，不會只有在記憶體記錄 儲存系統提示用 Session：[[Flash]] req.</description></item><item><title>Session Storage</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Session-Storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Session-Storage/</guid><description>session storage 瀏覽器關掉就會清空</description></item><item><title>Sessions in Passport</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Sessions-in-Passport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Sessions-in-Passport/</guid><description>Sessions in Passport 需安裝 [[cookie-session]] passport.js doc&amp;gt;configure 僅將 userID 存進 [[Session]]
1 2 3 4 // index.</description></item><item><title>setItem(key, value)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/setItemkey-value/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/setItemkey-value/</guid><description>setItem (key, value) 儲存內容進去</description></item><item><title>side-effect</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/side-effect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/side-effect/</guid><description>side-effect 在 React 中，作用域以外發生的事情 例如 網路請求 與第三方溝通 存取 [[Local Storage]] 等等等 #js/react/hook</description></item><item><title>Signing a Cookie</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/Signing-a-Cookie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/Signing-a-Cookie/</guid><description>Signing a Cookie 對 Cookie 進行簽署，辨識客戶端是否更改了 [[Cookie]] 之後傳回來
需要使用 [[cookie-parser]] 配合 [[secret 的變數設定]] 1 2 3 4 5 6 7 8 9 10 11 const cookieParser = require(&amp;#39;cookie-parser&amp;#39;); // cookie-parser 的 middleware // （不建議）填入任意字串，伺服器傳送的時候會將 cookie 內容用這個字串做簽名 // （建議）使用 process 配合 dotenv 做隱藏 app.</description></item><item><title>Single-thread</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Single-thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Single-thread/</guid><description>Single-thread [[JavaScript/介紹/JavaScript]] 屬於 [[Single-thread]] 語言，一次只能處理一件事
1 2 3 4 5 6 // sync(Synchronous) code 同步 console.log(&amp;#39;a&amp;#39;); console.log(&amp;#39;b&amp;#39;); // log a // log b Event Queue 可利用 [[Event Queue]] 可以製造時間差</description></item><item><title>Size</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Size/</guid><description>1 2 3 4 &amp;lt;div class=&amp;#34;min-vw-100&amp;#34;&amp;gt;Min-width 100vw&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;min-vh-100&amp;#34;&amp;gt;Min-height 100vh&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;vw-100&amp;#34;&amp;gt;Width 100vw&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;vh-100&amp;#34;&amp;gt;Height 100vh&amp;lt;/div&amp;gt; #bs #css/scss</description></item><item><title>Spacer</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Spacer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Spacer/</guid><description>1 2 3 4 5 6 7 8 9 10 $spacer: 1rem !default; $spacers: (0: 0, // 01: $spacer / 4, // 42: $spacer / 2, // 83: $spacer, // 164: $spacer * 1.</description></item><item><title>spacer</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/spacer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/spacer/</guid><description>padding 如果寫%，是拿 所屬上層 block 的寬度作為基準 margin-top, bottom 不要用% line-height, 或是單位rem, px
margin-left, right 可用%
padding 沒辦法autoㄉ
#css #padding #margin #spacer</description></item><item><title>SQL</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL/</guid><description>SQL structure query language 架構查詢語言
[[Database 數據庫]] 的其中一種，由 table 構成互相可以建立關係的穩定資料結構，歷史久，查詢速度較慢
[[mySQL]] #sql #database</description></item><item><title>SQL create 製作表格</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-create-%E8%A3%BD%E4%BD%9C%E8%A1%A8%E6%A0%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-create-%E8%A3%BD%E4%BD%9C%E8%A1%A8%E6%A0%BC/</guid><description>製作表格 1 2 3 4 5 6 7 8 9 10 11 createtableemployee(-- 生成表單 -- Constraints：自動遞增 employeeIDintPRIMARYkeyAUTO_INCREMENT,-- Constraints：不可為 null employeeNamevarchar(25)NOTNULL,ageint,-- Constraints：預設值 salaryintDEAFAULT1500,supervisorint,departmentint); 1 2 -- 可以使用的功能 DESCRIBEemployee;-- 檢視屬性 [[Constraints]]：將表格內容限定做規範</description></item><item><title>SQL delete 刪除既有表格內容</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-delete-%E5%88%AA%E9%99%A4%E6%97%A2%E6%9C%89%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-delete-%E5%88%AA%E9%99%A4%E6%97%A2%E6%9C%89%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9/</guid><description>刪除既有表格內容 1 DELETEFROMemployeesWHEREemployeeID=107; Danger Zone 刪除整個表格內容（留下表格本身） 1 DELETEFROMemployees; 刪除整個表格 1 DROPTABLEemployees; #sql #database</description></item><item><title>SQL read 檢視表格內容</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-read-%E6%AA%A2%E8%A6%96%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-read-%E6%AA%A2%E8%A6%96%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9/</guid><description>檢視表格內容 1 SELECT*FROMemployees;-- 檢視整個表單內容 #sql #database</description></item><item><title>SQL update 更新既有表格內容</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-update-%E6%9B%B4%E6%96%B0%E6%97%A2%E6%9C%89%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-update-%E6%9B%B4%E6%96%B0%E6%97%A2%E6%9C%89%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9/</guid><description>更新既有表格內容 1 2 3 4 5 6 7 8 9 SELECT*FROMemployees;-- 更新符合條件（WHERE）的內容，都改成（SET） UPDATEemployeesSETemployeeID=107WHEREemployeeID=108;-- 同時更新好幾個符合條件的也可以 UPDATEemployeesSETsalary=1700WHEREsalary=1500; #sql #database</description></item><item><title>SQL 的 Keys</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-%E7%9A%84-Keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-%E7%9A%84-Keys/</guid><description>Keys Keys 定義 範例 Primary Key 每一筆資料的代表 ID ，不可重複 員工編號 Foreign Key 指向其他資料的 ID coda 的 lookup Natural Key 在數據庫外部有意義的 Primary Key 身分證號 Surrogate Key Surrogate（代理），Natural Key 的相反 資料的編號 Composite Key 組合，沒有辦法單獨表示的 Primary Key 要同時有班級跟班級內的編號才能代表一個同學 Primary Key 標記時會畫底線</description></item><item><title>State</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/State/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/State/</guid><description>State [[useState Hook]]
一個狀態，可以拿來設定說這個狀態改變的話哪裡要一起更動 元件的狀態 React 當中每個元件都可以獨立處理（不影響其他頁面上的元素） 可以利用這個狀態可以重複使用 每當 State, props 更新，都會自動 re-render 原本要用 DOM 來處理（querySelector, addEventListener 等等） [[Rerender a React Application：有效率的重新渲染]]</description></item><item><title>State Lifting</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/State-Lifting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/State-Lifting/</guid><description>State Lifting 當元件一多的時候，會遇到需要跨元件共享同一個資料的狀況
[[State Lifting]] 做的就是將子層元件的 state 提升到母層 再下放到子層的 props 做使用 反過來叫做 [[Colocating]] [[State]]：每個元件都有自己獨立的 state, props，彼此不影響
未來學到 [[Redux]] 就可以解決這問題了，如果專案大了會需要用到</description></item><item><title>Stateful Authentication</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Stateful-Authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Stateful-Authentication/</guid><description>Stateful Authentication [[Session]]
client 發送的請求時，server 會按照請求在 session memory 中尋找對應的 ID 缺點 後端有權限刪除資料：如果在後端刪掉了這個對應的 ID，客戶端持有的資料就會失效 佔據伺服器資源：因為資料都存在 server，隨著登錄的用戶增加，server 的資源也會被佔用 很難擴充：如果伺服器佔滿了，要擴充新的伺服器，要為了新的伺服器寫不同的規則 安全性：cookies 可以透過客戶端修改，可能真的試出別人的資料 [[Stateless Authentication(JWT)]] #session #authentication #oauth</description></item><item><title>Stateless Authentication(JWT)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Stateless-AuthenticationJWT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Stateless-AuthenticationJWT/</guid><description>Stateless Authentication [[Stateful Authentication]]
1 2 客戶端 --- post 登入資訊到 /api/auth/login --&amp;gt; 伺服器端 客戶端 &amp;lt;-- 認證密碼＆生成 JWT 存到客戶端（LocalStorage）-- 伺服器端 客戶端成功登入後，server 會將客戶資料加密，回傳給客戶端（token），存在 [[Local Storage]]（客戶端不能更動） 之後客戶端傳送請求時，會將這個 token 一併送出，server 將 token 解密認證（[[Passport.</description></item><item><title>Static Method</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Static-Method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Static-Method/</guid><description>Static method [[Mongoose Method]] 給 model 用的，[[Instance Method]] 是給 Schema 用的
[[Create#Define a Schema]] 之後
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // create instance method studentSchema.</description></item><item><title>static：僅給 class 內部用的變數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/static%E5%83%85%E7%B5%A6-class-%E5%85%A7%E9%83%A8%E7%94%A8%E7%9A%84%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/static%E5%83%85%E7%B5%A6-class-%E5%85%A7%E9%83%A8%E7%94%A8%E7%9A%84%E8%AE%8A%E6%95%B8/</guid><description>Static 的 properties, methods Static 的屬性與方法僅供 class 內部做呼叫，不會拿來給物件實例做呼叫
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Circle { static pi = 3.</description></item><item><title>stopPropagation</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/stopPropagation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/stopPropagation/</guid><description>stopPropagation 阻止 [[Event Bubbling]] 的方法
stopPropagation() 停止擴散的意思 #js #event #dom</description></item><item><title>Storage</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Storage/</guid><description>Storage 瀏覽器的暫存空間（不是 [[Database 數據庫]]） 放一些很簡單的資料，跟資安無關的內容 都是 object 在 devtools 可以找到 Storage 資料的使用（[[深層拷貝、非 string 類型的資料類型轉換]]） Storage 的 methods [[setItem(key, value)]] [[getItem(key)]] [[removeItem(key)]] [[clear()]] key 是不能重複的</description></item><item><title>string</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/string/</guid><description>string string 的串接 可以做串接（+），但不能做運算（加減乘除）
string concatenate 串接 concatenate 簡稱 concat
1 let str = `hi` + &amp;#34;, I am fine.</description></item><item><title>String 用 Validators</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/String-%E7%94%A8-Validators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/String-%E7%94%A8-Validators/</guid><description>String 用 [[Validators]] [[Create]] 的時候規範 [[Schema Type]] 時可以使用
[[Enum(指定 string, number)]] [[Minlength(number)]] Maxlength(number): 參照 [[Minlength(number)]] Uppercase(boo) Lowercase(boo) #database #nosql #mongoose #mongodb #validators</description></item><item><title>Strongly Weakly type Language</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/Strongly-Weakly-type-Language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/Strongly-Weakly-type-Language/</guid><description>Strongly Weakly type Language Strongly Java, Ruby&amp;hellip;
Weakly JS, C語言&amp;hellip;
#js #intro</description></item><item><title>Styling in JSX</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/Styling-in-JSX/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/Styling-in-JSX/</guid><description>Styling in JSX [[Inline styling(JSX)]]
[[SCSS(JSX)]]
Style Component
[[用元件處理 CSS Styling]]
[[class 或是 className]]</description></item><item><title>Swiper Parameters</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Swiper/Swiper-Parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Swiper/Swiper-Parameters/</guid><description>Swiper Parameters Parameters
spaceBetween：每 Slide 間的寬度，數字 slidesPerView ：一次顯示多少 Slide pagination ：有沒有顯示現在第幾張的提示 #swiper</description></item><item><title>Swiper(React 環境)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Swiper/SwiperReact-%E7%92%B0%E5%A2%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Swiper/SwiperReact-%E7%92%B0%E5%A2%83/</guid><description>Swiper 匯入 模組 1 2 3 4 // 主要匯入的元件 import { Swiper, SwiperSlide } from &amp;#39;swiper/react&amp;#39;; // 其他模組（&amp;lt;Swiper&amp;gt; 的 props） import { Navigation, Pagination, Scrollbar, A11y } from &amp;#39;swiper&amp;#39;; 樣式 1 2 3 4 5 // Import Swiper styles import &amp;#39;swiper/css&amp;#39;; import &amp;#39;swiper/css/navigation&amp;#39;; import &amp;#39;swiper/css/pagination&amp;#39;; import &amp;#39;swiper/css/scrollbar&amp;#39;; 初始設定（預設） JS 的話：</description></item><item><title>table</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E8%B3%87%E6%96%99/table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E8%B3%87%E6%96%99/table/</guid><description>table 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 &amp;lt;table class=&amp;#34;table&amp;#34;&amp;gt; &amp;lt;caption&amp;gt;caption 為表格標題&amp;lt;/caption&amp;gt; &amp;lt;!</description></item><item><title>Template literals (Template strings)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Template-literals-Template-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Template-literals-Template-strings/</guid><description>Template literals, Backstick 1 `字串 ${變數}` ${varible} 可以把變數放到 string 裡的方法 #js #literals #dataType</description></item><item><title>text-nowrap</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/text-nowrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/text-nowrap/</guid><description>https://bootstrapshuffle.com/classes/text/text-nowrap</description></item><item><title>textarea</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/textarea/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/textarea/</guid><description>textarea mdn
1 2 3 4 5 6 &amp;lt;textarea cols=&amp;#34;10&amp;#34; rows=&amp;#34;20&amp;#34; &amp;gt; &amp;lt;/textarea&amp;gt; #html #form</description></item><item><title>this</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/this/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/this/</guid><description>this 目錄 this 的幾種狀況 simple call （不太會這樣用） object 的 function（最常用） 不同物件中的同個函數 陷阱題 object 中還有 object Object 裡面的 function 硬要呼叫全域 function callback function 特性 this 是[[函數的隱藏的參數]]之一 指向會變動 ** function 是從哪裡宣告的，就是指誰**（ES6 的 this 參照[[4.</description></item><item><title>thread</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/thread/</guid><description>執行緒 thread JS 是一種 single-thread 語言 [[計算機概論]]：[[作業系統 OS]] 會決定執行緒的運作優先程度，且一個軟體可以產生多個 thread #computer #js</description></item><item><title>touch</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/touch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/touch/</guid><description>建立檔案 touch
1 touch index.html</description></item><item><title>transition</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/transition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/transition/</guid><description>1 2 3 4 5 6 7 8 9 10 h1 { // property name(屬性), duration(時間), timing function(加速度) transition: all 0.</description></item><item><title>typeof</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/typeof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/typeof/</guid><description>辨認類型 typeof （除[[判斷是否為 Array]]）
1 2 let x = &amp;#34;string&amp;#34; console.log(typeof x) 數字轉字串 數字限定小數點幾位數 字串轉整數 #js #dataType</description></item><item><title>Unix</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/Unix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/Unix/</guid><description>Unix 作業系統
windows MacOS ChromeOS Linux 指令 windows 沒有 unix 指令，必須多下載 unix 指令 mac, linux 有
#git #kernel #shell #cmd #computer</description></item><item><title>Update</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Update/</guid><description>title: &amp;ldquo;Update&amp;rdquo; tag: Update (Mongoose) [[MongoDB CRUD#Update]]
1 2 3 4 // 操作都一樣 model.update(); model.updateOne(); model.updateMany(); 1 2 3 4 5 6 7 8 9 10 11 12 // 直接設定更改前後的內容 Student.</description></item><item><title>Update with Validators</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Update-with-Validators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Update-with-Validators/</guid><description>Update with Validators [[Validators]] 只有在一開始 set 的時候會做驗證，後續跑像是 [[Update]] 的功能就不會再驗證了，要加入一個內容 runValidators
[[Find(Read)#Find and Update]]
1 2 3 4 5 6 7 8 9 Student.</description></item><item><title>url(module)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/urlmodule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/urlmodule/</guid><description>url 模組 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const url = reuqire(&amp;#39;url&amp;#39;); const blaURL = &amp;#39;http://126.</description></item><item><title>use-strict 嚴格模式</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/use-strict-%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/use-strict-%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F/</guid><description>嚴格模式 use strict JavaScript 的嚴格模式 &amp;ldquo;use strict&amp;rdquo; 使撰寫語法的時候，如果用了不嚴謹的寫法，會跳出錯誤提示
使用方法 在全域下 1 2 3 4 // 在全域直接寫 &amp;#39;use-strict&amp;#39;; // 開始寫程式碼 在 [[function]] 下 1 2 3 4 5 function fn() { &amp;#39;use-strict&amp;#39;; // 開始寫 function 內容 }</description></item><item><title>useEffect Hook</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/useEffect-Hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/useEffect-Hook/</guid><description>useEffect Hook 處理 [[side-effect]] 的 [[Hook]]
使用情境 useEffect 會在每次 render 時執行，可以使用 [[Dependency array]] 來限定執行時機
以儲存資料到 [[Local Storage]] 為例 [[自訂 Hooks]]：若有要一起使用的 [[Hook]] （這裡以 [[useEffect Hook]], [[useState Hook]] 為例）可以把他們加到一個函式內，方便使用</description></item><item><title>useRef Hook</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/useRef-Hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/useRef-Hook/</guid><description>useRef Hook useRef 的 ref 與[[物件傳參考]]中提到的 reference 是同一件事 指的是「變數指向記憶體位置上對應到的值」
在 React 中用原始的 DOM 方式（ querySelector 之類）操作元素並不直覺，使用 useRef [[Hook]]，可以直接在元件裡，直接操作元件 允許 render 期間可以維持相同的值 可以儲存可變動值，但不會觸發 re-render useRef 只會回傳一個 current 屬性 useRef() 的 argument 可放入初始值 [[useState Hook]] 更動值的的時候就會觸發 re-render</description></item><item><title>useState Hook</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/useState-Hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/useState-Hook/</guid><description>useState Hook 1 2 import React, { useState } from &amp;#39;react&amp;#39; // 有匯入 useState 的話下面的 React.useState 可簡寫為 useState 1 2 3 4 5 6 7 // name: 自訂名稱，setName：name 的更改 state 用函數 // 初始狀態任意資料類型皆可 // 更詳細的初始狀態設定：[[Lazy Initializer]] const [name, setName] = React.</description></item><item><title>utilities API 修改</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/utilities-API-%E4%BF%AE%E6%94%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/utilities-API-%E4%BF%AE%E6%94%B9/</guid><description>utilities API 修改 Bootstrap 5 Utilities | New Utility API !!
import 順序 在 utilities.scss 匯入之前做修改
1 2 3 4 5 6 7 8 9 10 11 12 // bs 的必須檔案 @import &amp;#34;.</description></item><item><title>UUID</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/UUID/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/UUID/</guid><description>UUID 自動新增隨機的 UUID
npm
1 npm i UUID 1 import { v4 as uuidv4 } from &amp;#39;uuid&amp;#39;; 1 2 // 生成的時候寫這個 uuidv4(); // ⇨ &amp;#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&amp;#39; 使用範例 [[Key prop]]</description></item><item><title>Validators</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Validators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Validators/</guid><description>Validators 官方文件
[[Schema Type#簡易寫法]] 可以簡單的做規範，但通常都還是會搭配 [[Validators]] 來寫
在 [[Mongoose]] 也可以用 [[Validators]] 規範 [[Schema Type]]
類似 [[SQL create 製作表格]] 中有提到 [[Constraints]] 可以將資料內容做規範</description></item><item><title>vanillajs-datepicker</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/vanillajs-datepicker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/form/vanillajs-datepicker/</guid><description>vanillajs-datepicker vanillajs-datepicker
不推薦直接使用原生的 input:date
1 npm install --save-dev vanillajs-datepicker ^e804de
#node/npm #js/module #bs/form #from #未完成</description></item><item><title>var, let, const 的作用域</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/var-let-const-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/var-let-const-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>let, const, var 的差異 【直播記錄】JavaScript 那個 let, const, var 到底差在哪？ block(javascript)
比較內容 var let const [[block]] 內使用造成全域污染（不形成作用域） O X X 顯示在 windows 上 O X X 受非同步影響 O X X hoisting O X X [[暫時性死區(TDZ)]] X O O 再宣告（re-declaration） O X X 再指派（re-assignment 賦值） O O X 未[[初始化(initializer)]]就使用 O O X function function 會形成作用域，var 不會全域污染</description></item><item><title>Vite</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/Vite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/Vite/</guid><description>Vite 比用 create-react-app 快的工具
[[安裝 Node.js]]
在專案 1 npm init vite@latest 會被問 ok to proceed?</description></item><item><title>vite gh發布</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/vite-gh%E7%99%BC%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/vite-gh%E7%99%BC%E5%B8%83/</guid><description>vite gh-page 發布 Deploying Vite App to GitHub Pages
步驟 git 建置 1 2 3 4 5 6 git init git add .</description></item><item><title>vite 發布圖片不會正常顯示問題</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/vite-%E7%99%BC%E5%B8%83%E5%9C%96%E7%89%87%E4%B8%8D%E6%9C%83%E6%AD%A3%E5%B8%B8%E9%A1%AF%E7%A4%BA%E5%95%8F%E9%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/Vite/vite-%E7%99%BC%E5%B8%83%E5%9C%96%E7%89%87%E4%B8%8D%E6%9C%83%E6%AD%A3%E5%B8%B8%E9%A1%AF%E7%A4%BA%E5%95%8F%E9%A1%8C/</guid><description>vite 發布 gh-page 圖片不會正常顯示 css background 的解決方式 建立 &amp;lt;root&amp;gt;/public 路徑，圖放這裡 background-image: url(/icon.jpg) 不使用這個寫法： public/icon.png 使用這個寫法： /icon.png img 標籤的 src 解決方式 放在 public 沒辦法讀取 使用 import 可以但超麻煩 還在看的資料 2022-02-08 vue3+vite assets动态引入图片的几种方式，解决打包后图片路径错误不显示的问题 css url() assets in html not handled in build process #3980</description></item><item><title>vscode 自動換行 word wrap</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/vscode-%E8%87%AA%E5%8B%95%E6%8F%9B%E8%A1%8C-word-wrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/vscode-%E8%87%AA%E5%8B%95%E6%8F%9B%E8%A1%8C-word-wrap/</guid><description>opt+z Visual Studio Code | 自動換行設定教學
#vscode</description></item><item><title>vue 作業問題</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E4%BD%9C%E6%A5%AD%E5%95%8F%E9%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/vue-%E4%BD%9C%E6%A5%AD%E5%95%8F%E9%A1%8C/</guid><description>axios 是要先匯入在一個 &amp;lt;script&amp;gt; 然後再開一個 &amp;lt;script&amp;gt; 寫指令ㄇ ${}的方法在 {{}} 裡面也有嗎 href=&amp;quot;mailto:${ item.email }&amp;quot; 有混文字記得用[[Template literals (Template strings)]]
:src=&amp;ldquo;item.picture.large&amp;rdquo; 只有點記法的話不用${} #vue</description></item><item><title>vue 作業問題</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/vue-%E4%BD%9C%E6%A5%AD%E5%95%8F%E9%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/vue-%E4%BD%9C%E6%A5%AD%E5%95%8F%E9%A1%8C/</guid><description>axios 是要先匯入在一個 &amp;lt;script&amp;gt; 然後再開一個 &amp;lt;script&amp;gt; 寫指令ㄇ ${}的方法在 {{}} 裡面也有嗎 href=&amp;quot;mailto:${ item.email }&amp;quot; 有混文字記得用[[Template literals (Template strings)]]
:src=&amp;ldquo;item.picture.large&amp;rdquo; 只有點記法的話不用${} #vue</description></item><item><title>w1</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w1/</guid><description>以下為第一週個人履歷建議:
1.body 設定的行高 36px 建議改成統一倍率 1.5。
.dark 可以加上前綴 bg- ，這樣在修改時會比較容易分辨出是 背景顏色的 class</description></item><item><title>w2 切版助教直播</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w2-%E5%88%87%E7%89%88%E5%8A%A9%E6%95%99%E7%9B%B4%E6%92%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w2-%E5%88%87%E7%89%88%E5%8A%A9%E6%95%99%E7%9B%B4%E6%92%AD/</guid><description>如何閱讀設計稿 找出共通設定 字體 行高 大小 預設字體 英文 &amp;gt; linux &amp;gt; MAC &amp;gt; Windows &amp;gt; 基礎字體</description></item><item><title>w2.Joanne's Website</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w2.Joannes-Website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w2.Joannes-Website/</guid><description>Joanne&amp;rsquo;s Website 架構整理 base body text-center italic roboto,san-serif h2 class banner__ h1.banner__title span.</description></item><item><title>w3.glass</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w3.glass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w3.glass/</guid><description>電腦 平板 手機 位置 72 32 same index-subContent-2partTitle 64 48 32/72(2) index-banner 48 32/.</description></item><item><title>w3.glasses 助教直播</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w3.glasses-%E5%8A%A9%E6%95%99%E7%9B%B4%E6%92%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w3.glasses-%E5%8A%A9%E6%95%99%E7%9B%B4%E6%92%AD/</guid><description>w3.glasses 助教直播 container 設定 css版本 scss版本 開始覺得我是誰我在哪的請先讀OOCSS
只能設定px，不可以% margin: 0 auto 要一起設定 container 不能加其他內容 加保險不如先搞清楚到底下了什麼XD 斷點一定比 container 大 一開始就先設定好 container！ gutter 網格的間距 padding是gutter除2</description></item><item><title>W3C valid</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/W3C-valid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/W3C-valid/</guid><description>https://twitter.com/html_css_1min/status/1466531622333808643?s=20 VS code 插件：[W3C Validation]</description></item><item><title>w5.form</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w5.form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w5.form/</guid><description>建議可以 h1 用圖片來取代文字，可以參考 連結。( Admin 文字則可以修改為 h2 ) 左下角的 andy0401@mail.com 建議可以使用 a 標籤，mail 可以使用 a:mail，寫成如下，當使用者透過點擊該區塊時，就會自動開啟相對功能： 綠色按鈕可以使用 success 就好。( 這一週的作業不會修改到變數 )。 按鈕可以使用像是 .</description></item><item><title>w6</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w6/</guid><description>助教講義</description></item><item><title>Web Application Client ID 設定</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Web-Application-Client-ID-%E8%A8%AD%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Web-Application-Client-ID-%E8%A8%AD%E5%AE%9A/</guid><description>Web Application Client ID 設定 [[建立 Google 的 OAuth 憑證]]
已授權的重新導向 URI [[Configure Strategy]] 中設定的 callbackURL 要設定到這裡，例如
1 http://localhost:8080/auth/google/redirect</description></item><item><title>webP</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E5%9C%96%E5%83%8F/webP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E5%9C%96%E5%83%8F/webP/</guid><description>https://twitter.com/Freelance_ta/status/1435087886030807040?s=20
https://squoosh.app/</description></item><item><title>webpack Get Started</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/webpack/webpack-Get-Started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/webpack/webpack-Get-Started/</guid><description>SASS 設定 建議的 sass-loader： [[dart-sass(sass) 建置]]
1 npm install sass-loader sass webpack --save-dev 1 2 3 4 5 6 7 rules: [ { test: /\.</description></item><item><title>webpack（未完成）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/webpack/webpack%E6%9C%AA%E5%AE%8C%E6%88%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/webpack/webpack%E6%9C%AA%E5%AE%8C%E6%88%90/</guid><description>webpack（未完成） https://qiita.com/annaaida/items/f2c372000e8358ea8d8f [[webpack Get Started]] 対してwebpackは、バンドルツールなのでバンドルに特化していて、モジュール同士の依存関係をうまい具合に、かつ速く一枚のJavaScriptファイルにバンドルしてくれるものです。 整理、最佳化模組內容，watch 模式中只會
webpackのバンドルが速いという話が出ましたが、なぜかと言うとwebpackのwatchモードでは差分ビルドといって前回保存分と今回の保存分との差のみバンドルしてくれるから。
Webpackとは、CSSやJavaScript、画像などWebコンテンツを構成するあらゆるファイル(アセット)を「モジュール」という単位で取り扱い「バンドル」という１つのファイルに最適な形で変換するためのツールです。（バンドルとは複数ファイルを1 枚のファイルにまとめること）
・機能ごとにファイルを分割（モジュール化）する開発ができるから
・ジュール（npmなどでインストールできるパッケージなど）も利用できるから
・リクエスト数を減らせるから
・依存関係を解決したファイルを出力できるから
ビルド
webpackにおいての「ビルド」は「バンドルを出力するまでの一連の処理」という意味で使われていることが多い（気がする）。
設定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // webpack.</description></item><item><title>Window Object</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/</guid><description>Window Object Properties Console Document [[Storage]] [[Local Storage]] [[Session Storage]] #js #window #object</description></item><item><title>Working Tree</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Working-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Working-Tree/</guid><description>Working Tree 中文稱 Git 資料夾 代表一個版本的一連串流程，從專案當中取出的獨立版本可以在本機編輯 Working Directory 在這裡編輯 Staging Area 在這裡決定下次要 commit 哪些更動 Git Directory (Repository) 將更動儲存為 snapshot 正式 commit 於此 Three States modified 已修改：但尚未 commit 到 database</description></item><item><title>writeFile</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/writeFile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/writeFile/</guid><description>writeFile 1 2 3 4 5 6 7 8 const fs = require(&amp;#39;fs&amp;#39;); // 參數是：寫入的檔案、寫入訊息、function fs.writeFile(&amp;#39;try.txt&amp;#39;, &amp;#39;Today is a good day.</description></item><item><title>{{title}}</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/templates/post/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/templates/post/</guid><description/></item><item><title>上層多包一個標籤</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/%E4%B8%8A%E5%B1%A4%E5%A4%9A%E5%8C%85%E4%B8%80%E5%80%8B%E6%A8%99%E7%B1%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/%E4%B8%8A%E5%B1%A4%E5%A4%9A%E5%8C%85%E4%B8%80%E5%80%8B%E6%A8%99%E7%B1%A4/</guid><description>上層多包一個標籤 [[同時生成多個標籤]]
1 2 3 4 5 6 7 8 9 10 11 12 13 const helloElement = React.</description></item><item><title>中斷執行</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/%E4%B8%AD%E6%96%B7%E5%9F%B7%E8%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/%E4%B8%AD%E6%96%B7%E5%9F%B7%E8%A1%8C/</guid><description>ctrl + C （mac）</description></item><item><title>二進位</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E4%BA%8C%E9%80%B2%E4%BD%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E4%BA%8C%E9%80%B2%E4%BD%8D/</guid><description>二進位 ON/OFF 一條電線可以處理的資訊為：ON/OFF 這讓電子訊息可以處理很多二元的訊息，例如 1/0, TRUE/FALSE, YES/NO 這樣的二元訊息就是一個 bit 如果有更多的電線，就可以處理更複雜的訊息
Binary Digits(bit) 0, 1
Byte 1 2 1 Byte = 8bits 2**8 = 256 #computer</description></item><item><title>介紹 Node.js</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/%E4%BB%8B%E7%B4%B9-Node.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/%E4%BB%8B%E7%B4%B9-Node.js/</guid><description>介紹 一種執行環境，允許原本只能在瀏覽器運行的 [[JavaScript]] 可以在瀏覽器外執行 讓 JS 可以不僅限於前端，可以做 server-side 的動作 JS 可以在哪裡運行 瀏覽器：最一般的運作方法 Node：[[Module Wrapper]] 包住，在瀏覽器外運作 終端機撰寫 JS：[[REPL]]（不常用） #js #advanceJs #library #framework #nodeJs #backEnd</description></item><item><title>作業系統 OS</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-OS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-OS/</guid><description>作業系統 OS 負責控制哪些 [[thread]] 需要先被執行，CPU OS 排程
#computer</description></item><item><title>使用 gulp</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E4%BD%BF%E7%94%A8-gulp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E4%BD%BF%E7%94%A8-gulp/</guid><description>課前該用好的 gulp by Sz gulp 環境安裝流程
gulp 環境設置 一台電腦做一次 ::: info :::spoiler 全域安裝
確認是否安裝 Node.js (這邊省略安裝步驟) 1 node -v 安裝 gulp （失敗請參考下面一行） 1 npm i gulp@4 -g 失敗的話，用管理員權限安裝 1 sudo npm i gulp@4 -g 檢查是否安裝好 gulp 1 gulp -v :::</description></item><item><title>使用 Postman 發出表單請求</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/%E4%BD%BF%E7%94%A8-Postman-%E7%99%BC%E5%87%BA%E8%A1%A8%E5%96%AE%E8%AB%8B%E6%B1%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/%E4%BD%BF%E7%94%A8-Postman-%E7%99%BC%E5%87%BA%E8%A1%A8%E5%96%AE%E8%AB%8B%E6%B1%82/</guid><description>使用 Postman 發出表單請求 ![[api 傳送請求.png]]
寫在 POST（看用什麼請求，更新就用 PUT） → Body → x-www-form-unrencoded 對應的是 POST 表單用的 [[body-parser]]（[[Middleware(express)]]） 不會只限定 GET, POST 請求 #api #js #restfulapi #api #crud #database #json</description></item><item><title>使用 Routing for pattern 顯示特定數據庫物件</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E4%BD%BF%E7%94%A8-Routing-for-pattern-%E9%A1%AF%E7%A4%BA%E7%89%B9%E5%AE%9A%E6%95%B8%E6%93%9A%E5%BA%AB%E7%89%A9%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E4%BD%BF%E7%94%A8-Routing-for-pattern-%E9%A1%AF%E7%A4%BA%E7%89%B9%E5%AE%9A%E6%95%B8%E6%93%9A%E5%BA%AB%E7%89%A9%E4%BB%B6/</guid><description>使用 Routing for pattern 顯示特定數據庫物件 [[Routing for pattern 回應有規律的網址]] [[Find(Read)]]
1 2 3 4 5 6 7 8 9 10 11 12 // 不是完整的版本，catch 還要調整（看下一段） app.</description></item><item><title>使用與操作 Mongoose</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E4%BD%BF%E7%94%A8%E8%88%87%E6%93%8D%E4%BD%9C-Mongoose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E4%BD%BF%E7%94%A8%E8%88%87%E6%93%8D%E4%BD%9C-Mongoose/</guid><description>使用與操作 Mongoose [[Mongoose 建置]]先處理完
[[用資料夾管理 Mongoose models 模組]]
[[建立架構 Define a Schema]]
[[Validators]] [[Mongoose Method]]</description></item><item><title>使用路徑的兩種寫法</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8%E8%B7%AF%E5%BE%91%E7%9A%84%E5%85%A9%E7%A8%AE%E5%AF%AB%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8%E8%B7%AF%E5%BE%91%E7%9A%84%E5%85%A9%E7%A8%AE%E5%AF%AB%E6%B3%95/</guid><description>使用路徑的兩種寫法 [[Node]] 有兩個預設參數 [[Node.js 的預設參數#路徑相關]]，單純使用[[string#string 的串接]]或是使用 [[path]] 模組 + [[join()]] [[send 和 sendFile 回應(express)]] 串接 1 2 3 app.</description></item><item><title>來源</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BE%86%E6%BA%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BE%86%E6%BA%90/</guid><description>https://git-scm.com/book/zh-tw/v2 https://w3c.hexschool.com/git/dba36bc5</description></item><item><title>元件匯出</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/%E5%85%83%E4%BB%B6%E5%8C%AF%E5%87%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/%E5%85%83%E4%BB%B6%E5%8C%AF%E5%87%BA/</guid><description>元件匯出 Components in Files 元件重複利用率高，建議匯出個別檔案使用，增加易讀性 檔案名與元件名稱一樣都必須大寫開頭 [[React Snippet]] 快速生成囉
1 2 3 4 5 6 function Car() { return &amp;lt;h2&amp;gt;Hi, I am a Car!</description></item><item><title>內建模組(Node.js)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84Node.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84Node.js/</guid><description>內建模組 1 2 // 直接匯入即可 const 內建模組 = require(); [[path]] [[url(module)]] [[fs (File System)]] #js #library #framework #nodeJs #backEnd #module</description></item><item><title>其餘參數 Rest Perameters</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%85%B6%E9%A4%98%E5%8F%83%E6%95%B8-Rest-Perameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%85%B6%E9%A4%98%E5%8F%83%E6%95%B8-Rest-Perameters/</guid><description>其餘參數 Rest Perameters 設定 function 在導入之前可以為不特定數量的參數，並且將他們視為陣列來處理
1 2 3 4 function f(a, b, ...theArgs) { // ... } f(1, 2, 3, 4, 5, 6 ,7); 範例 在 [[Math Object]] 的功能中，max 就有這個特性</description></item><item><title>函數的隱藏的參數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%87%BD%E6%95%B8%E7%9A%84%E9%9A%B1%E8%97%8F%E7%9A%84%E5%8F%83%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%87%BD%E6%95%B8%E7%9A%84%E9%9A%B1%E8%97%8F%E7%9A%84%E5%8F%83%E6%95%B8/</guid><description>函數的隱藏參數 除了我們自己定義的參數之外，也可以呼叫內建的參數
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 var a = &amp;#39;全域&amp;#39; function fn(自定參數) { // 沒有設定也可以使用的三個參數 // this, window, arguments console.</description></item><item><title>函數表達式 function expression</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%87%BD%E6%95%B8%E8%A1%A8%E9%81%94%E5%BC%8F-function-expression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%87%BD%E6%95%B8%E8%A1%A8%E9%81%94%E5%BC%8F-function-expression/</guid><description>函數表達式 function expression 將函數儲存進一個變數中 因牽涉給變數賦值，故不會 hoisting
給變數賦予…… 匿名函數｜let funExpressionName = function(parameter) { 功能 } 有名稱的函數｜ let funExpressionName = function fnA(parameter) { 功能 } 執行…… 返回函數結構｜執行 funExpressionName 執行該函數｜執行 funExpressionName({ 要給 argument }) 函數當參數｜callback fuction function fnB(callbackFunc) { callbackFunc(預設要給fnA的參數) } 函數表達式 fnA（一個被賦與匿名函數的變數）當 fnB 的參數，讓 fnB 可以調用 fnA 內嵌函數表達式｜inline function expression fnC(callbackFunc, value) 可以多一個 parameter，來指定給 callback function 的 argument 也可以直接少掉將 callbackFunc 在之前建立函數表達式的步驟，直接在 fnC 的 parameter 裡定義 function #js #function</description></item><item><title>初始化(initializer)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E5%88%9D%E5%A7%8B%E5%8C%96initializer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E5%88%9D%E5%A7%8B%E5%8C%96initializer/</guid><description>初始化 (initializer) 宣告後賦值的動作，宣告後沒有初始化的 const 是不能使用的
1 2 3 4 5 6 7 var a; // 未初始化 let b; // 未初始化 const c; // 未初始化 console.</description></item><item><title>判斷是否為 Array</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E5%88%A4%E6%96%B7%E6%98%AF%E5%90%A6%E7%82%BA-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E5%88%A4%E6%96%B7%E6%98%AF%E5%90%A6%E7%82%BA-Array/</guid><description>判斷是否為 Array 之後讀到物件導向會講更多
因為 typeof 只能判斷是否為 object，使用 Array.isArray(該陣列)來辨識是 object 中的陣列或物件
1 2 3 let ary = [1, 2]; console.</description></item><item><title>利用 Mongoose 連上 MongoDB</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E5%88%A9%E7%94%A8-Mongoose-%E9%80%A3%E4%B8%8A-MongoDB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E5%88%A9%E7%94%A8-Mongoose-%E9%80%A3%E4%B8%8A-MongoDB/</guid><description>利用 Mongoose 連上 MongoDB 1 2 3 4 5 6 7 8 9 10 11 12 13 // connect to mongoDB // 要設定連接成功或失敗的效果 // 連到一個 database（exampleDB 為例，可自訂） mongoose.</description></item><item><title>利用搜尋功能建立目錄</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%88%A9%E7%94%A8%E6%90%9C%E5%B0%8B%E5%8A%9F%E8%83%BD%E5%BB%BA%E7%AB%8B%E7%9B%AE%E9%8C%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%88%A9%E7%94%A8%E6%90%9C%E5%B0%8B%E5%8A%9F%E8%83%BD%E5%BB%BA%E7%AB%8B%E7%9B%AE%E9%8C%84/</guid><description>利用搜尋功能建立目錄 Wiki 式連結的格式（ [[]] ）呈現連接狀態，可以直接拿來當目錄 #obsidian</description></item><item><title>刪除或取代（string）：replace()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E5%88%AA%E9%99%A4%E6%88%96%E5%8F%96%E4%BB%A3stringreplace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E5%88%AA%E9%99%A4%E6%88%96%E5%8F%96%E4%BB%A3stringreplace/</guid><description>刪除或取代（string） 1 2 let str1 = &amp;#39;I am strring.&amp;#39; console.log(str1.replace(&amp;#39;rr&amp;#39;, &amp;#39;r&amp;#39;)) #js/string</description></item><item><title>刪除線寫法 ~~內文內文~~</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%88%AA%E9%99%A4%E7%B7%9A%E5%AF%AB%E6%B3%95-~~%E5%85%A7%E6%96%87%E5%85%A7%E6%96%87~~/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%88%AA%E9%99%A4%E7%B7%9A%E5%AF%AB%E6%B3%95-~~%E5%85%A7%E6%96%87%E5%85%A7%E6%96%87~~/</guid><description>內文內文
#markdown #obsidian</description></item><item><title>前端精神</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E5%89%8D%E7%AB%AF%E7%B2%BE%E7%A5%9E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E5%89%8D%E7%AB%AF%E7%B2%BE%E7%A5%9E/</guid><description>好的網站該追求什麼？ 效能 可維護性 可讀性 #goal</description></item><item><title>匯入(auth-route)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%8C%AF%E5%85%A5auth-route/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%8C%AF%E5%85%A5auth-route/</guid><description>匯入 (auth-route) 1 2 3 4 5 6 7 8 // local login, oauth const router = require(&amp;#39;express&amp;#39;).Router(); const passport = require(&amp;#39;passport&amp;#39;); // 註冊加密用： bcrypt const bcrypt = require(&amp;#39;bcrypt&amp;#39;); // const session = require(&amp;#39;express-session&amp;#39;); const flash = require(&amp;#39;connect-flash&amp;#39;); [[bcrypt]] [[express-session]] [[connect-flash]]</description></item><item><title>匯入其他 EJS 檔</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/%E5%8C%AF%E5%85%A5%E5%85%B6%E4%BB%96-EJS-%E6%AA%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/%E5%8C%AF%E5%85%A5%E5%85%B6%E4%BB%96-EJS-%E6%AA%94/</guid><description>匯入其他 EJS 檔 1 2 // 放在 views 裡面的檔案 &amp;lt;%- include (&amp;#39;檔案.ejs&amp;#39;) %&amp;gt;</description></item><item><title>匯入模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E5%8C%AF%E5%85%A5%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E5%8C%AF%E5%85%A5%E6%A8%A1%E7%B5%84/</guid><description>匯入模組 [[Node.js 的預設參數#取得 Node js 裡的模組 相關]] [[取得 Node.js 裡的模組]]
1 const 給他個名稱 = require(&amp;#34;所在位置&amp;#34;); // 用 const 佳 1 2 // ES6 寫法 import 給他個名稱 from &amp;#39;所在位置&amp;#39;; 舉例 回到 app.</description></item><item><title>匯出模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E5%8C%AF%E5%87%BA%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E5%8C%AF%E5%87%BA%E6%A8%A1%E7%B5%84/</guid><description>匯出 1 2 // 模組.js exports.函數名稱 = 函數名稱(); 匯入
1 2 3 // app.js const 模組 = require(&amp;#39;.</description></item><item><title>原始資料類型 Primitive Data Types</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E5%8E%9F%E5%A7%8B%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B-Primitive-Data-Types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E5%8E%9F%E5%A7%8B%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B-Primitive-Data-Types/</guid><description>原始[[資料類型]] primitive data types 不是物件，沒有自己的屬性與功能 擁有自己的值，不是參考
[[Number]] [[string]] [[Boolean]]: falsy value symbol [[物件傳參考#傳值 Call By Value]] 不會改變原始值（進階的時候才會理解 primitive data types 為什麼不會被改變）</description></item><item><title>原始資料類型使用 Prototype Inheritance 的功能</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/%E5%8E%9F%E5%A7%8B%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B%E4%BD%BF%E7%94%A8-Prototype-Inheritance-%E7%9A%84%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/%E5%8E%9F%E5%A7%8B%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B%E4%BD%BF%E7%94%A8-Prototype-Inheritance-%E7%9A%84%E5%8A%9F%E8%83%BD/</guid><description>原始資料類型使用 Prototype Inheritance 的功能 Coercion [[原始資料類型 Primitive Data Types]]沒有自己的 methods，但因為 JS 有 Coercion 的特性，就算不是物件，也可以使用物件繼承來的功能。
示範 [[原始資料類型 Primitive Data Types#Primitive Coercion]]</description></item><item><title>參考網站</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E5%8F%83%E8%80%83%E7%B6%B2%E7%AB%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E5%8F%83%E8%80%83%E7%B6%B2%E7%AB%99/</guid><description>https://stock.pulpxstyle.com/ https://www.haconiwa-mag.com/design/2021/07/saikin-web-2021-07/</description></item><item><title>取代 @import 的 @use, @forword</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/%E5%8F%96%E4%BB%A3-import-%E7%9A%84-use-forword/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/%E5%8F%96%E4%BB%A3-import-%E7%9A%84-use-forword/</guid><description>取代 @import 的 @use, @forword Kevin Powell 解釋影片
@import 的特性會全域污染，導致不同 .sass / .scss 檔案中若有命名重複的變數會撞名 官方建議使用 @use, @forword 取代</description></item><item><title>取得 Google OAuth Client ID</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%8F%96%E5%BE%97-Google-OAuth-Client-ID/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%8F%96%E5%BE%97-Google-OAuth-Client-ID/</guid><description> 再回到「憑證」頁面 -&amp;gt; 建立憑證 -&amp;gt; OAuth 用戶端 ID 應用程式種類：網路應用程式 名稱：任意 「OAuth 用戶端已建立」：得到用戶端 ID 跟密碼</description></item><item><title>取得 Node.js 裡的模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E5%8F%96%E5%BE%97-Node.js-%E8%A3%A1%E7%9A%84%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E5%8F%96%E5%BE%97-Node.js-%E8%A3%A1%E7%9A%84%E6%A8%A1%E7%B5%84/</guid><description>取得 Node.js 裡的[[模組]] 取得管道 [[內建模組(Node.js)]] [[自製模組(Node.js)]] 他人製作模組（[[npm]]） [[Module Wrapper#取得 Node js 裡的模組 相關]]的參數與模組有關
使用 為了讓專案可以使用模組，需要[[匯入模組]]
#js #advanceJs #library #framework #nodeJs #backEnd #module #npm</description></item><item><title>同時生成多個標籤</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/%E5%90%8C%E6%99%82%E7%94%9F%E6%88%90%E5%A4%9A%E5%80%8B%E6%A8%99%E7%B1%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/JSX/%E5%90%8C%E6%99%82%E7%94%9F%E6%88%90%E5%A4%9A%E5%80%8B%E6%A8%99%E7%B1%A4/</guid><description>同時生成多個標籤 因為 [[ReactDOM：渲染]] 不能同時渲染多個內容，想要生成多個有兩種作法，寫法上大致一樣，差在上級有沒有多包一個標籤
[[上層多包一個標籤]] [[React.Fragment：同時生成複數標籤]] #js/react/jsx</description></item><item><title>命名習慣 Naming Convention</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/%E5%91%BD%E5%90%8D%E7%BF%92%E6%85%A3-Naming-Convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/%E5%91%BD%E5%90%8D%E7%BF%92%E6%85%A3-Naming-Convention/</guid><description>命名習慣 Naming Convention 習慣開頭大寫 [[const]] 物件導向的 [[Constructor]] #js #intro</description></item><item><title>在 Google Cloud Platform 建立憑證</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%9C%A8-Google-Cloud-Platform-%E5%BB%BA%E7%AB%8B%E6%86%91%E8%AD%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%9C%A8-Google-Cloud-Platform-%E5%BB%BA%E7%AB%8B%E6%86%91%E8%AD%89/</guid><description> 建立專案 -&amp;gt; 結束後到「憑證」的頁面 憑證 -&amp;gt; 建立憑證 -&amp;gt; OAuth 用戶端 ID -&amp;gt; 設定同意畫面 -&amp;gt; 外部 應用程式名稱：隨意 使用者支援電子郵件：自己的 email 應用程式首頁：http://localhost:8080 開發者聯絡資訊：自己的 email</description></item><item><title>在 MongoDB Atlas 查看 Collection</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%9C%A8-MongoDB-Atlas-%E6%9F%A5%E7%9C%8B-Collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%9C%A8-MongoDB-Atlas-%E6%9F%A5%E7%9C%8B-Collection/</guid><description>在 MongoDB Atlas 查看 Collection [[Create a Model]]：MongoDB 的 Collection 等同於 Mongoose 的 Model
#mongodb #database</description></item><item><title>在瀏覽器（原生）下運行模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E5%9C%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E5%8E%9F%E7%94%9F%E4%B8%8B%E9%81%8B%E8%A1%8C%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E5%9C%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E5%8E%9F%E7%94%9F%E4%B8%8B%E9%81%8B%E8%A1%8C%E6%A8%A1%E7%B5%84/</guid><description>如何在原生環境下運行 加入 type=&amp;quot;module&amp;quot; 即可
1 &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; #js #module</description></item><item><title>基礎使用</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/jQuery/%E5%9F%BA%E7%A4%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/jQuery/%E5%9F%BA%E7%A4%8E%E4%BD%BF%E7%94%A8/</guid><description>jQuery 基礎使用影片 影片
環境準備 使用外部資料庫有多種方法，舉其二
下載到專案使用（本機） 載點
去官方，下載到專案資料夾內直接使用 可以修改內容、只取需要的部份使用 很多載點選哪種好 uncompressed：想要讀內容的話（可讀性較好） compressed：只是要使用的話（檔案較小） 引入 CDN（雲端） CDN可以這裡找</description></item><item><title>安裝</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/%E5%AE%89%E8%A3%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/%E5%AE%89%E8%A3%9D/</guid><description>安裝管道 Mac 版本 在 terminal 直接輸入 git，如果沒有安裝，他就會提醒你安裝（燈楞） 沒安裝就輸入：$ brew install git
圖形化版本 在 Github 上下載
從原始碼安裝 #git</description></item><item><title>安裝 Node.js</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E5%BB%BA%E7%BD%AE/%E5%AE%89%E8%A3%9D-Node.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E5%BB%BA%E7%BD%AE/%E5%AE%89%E8%A3%9D-Node.js/</guid><description>安裝 Node.js 官網下載
VScode plugin: code runner： 可以讓 vscode 在 vscode 裡面直接運行，不用開 live server 用瀏覽器運行
[[npm 建置與指令]]：安裝完 node 就會直接安裝好 npm 囉！</description></item><item><title>安裝 React</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/%E5%AE%89%E8%A3%9D-React/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/%E5%AE%89%E8%A3%9D-React/</guid><description>安裝 React 事前需要：[[安裝 Node.js]] [[Vite]] 1 npx create-react-app &amp;lt;專案名稱&amp;gt; 用 vs-code 開啟專案 1 code &amp;lt;專案名稱&amp;gt; 執行專案 在專案資料夾中執行，會直接叫出 localhost</description></item><item><title>定義屬性(props)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/%E5%AE%9A%E7%BE%A9%E5%B1%AC%E6%80%A7props/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Component/%E5%AE%9A%E7%BE%A9%E5%B1%AC%E6%80%A7props/</guid><description>定義屬性 HTML 標籤上有很多屬性（例：class, style, action&amp;hellip;&amp;hellip;）都可以透過 React 去設定 也可以自訂屬性寫更客製化的內容：[[Component：可重複利用、自定參數的元件]] 範例：[[用元件處理 CSS Styling]]
屬性的定義有兩種方法，效果一樣 ^1bd0ac 用 JS 寫值本身（單一資料） ^8d0c66 用 JS 寫整個屬性（物件、[[Key-Value Pair]]） 只用 JS 定義屬性的值 Value [[JSX 內的 HTML 加入 JS 程式碼]]</description></item><item><title>客製化 Sass</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/%E5%AE%A2%E8%A3%BD%E5%8C%96-Sass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/%E5%AE%A2%E8%A3%BD%E5%8C%96-Sass/</guid><description>客製化 Sass import 順序 BS variables BS function BS mixins 自訂 variables（命名_customVariables.scss，簡稱 custom） BS 完整版（如果還不知道怎麼挑出需要的，就先放完整版扣掉前面的） 客製化步驟 用 custom 去覆蓋</description></item><item><title>密碼學簡介</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/%E5%AF%86%E7%A2%BC%E5%AD%B8%E7%B0%A1%E4%BB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/%E5%AF%86%E7%A2%BC%E5%AD%B8%E7%B0%A1%E4%BB%8B/</guid><description>簡介 可追溯至羅馬時期，例：[[Caesar cipher]]
數論（mod） RSA ECC #cryptogrphy</description></item><item><title>將數據庫資料顯示於網頁</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E5%B0%87%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99%E9%A1%AF%E7%A4%BA%E6%96%BC%E7%B6%B2%E9%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E5%B0%87%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99%E9%A1%AF%E7%A4%BA%E6%96%BC%E7%B6%B2%E9%A0%81/</guid><description>將數據庫資料顯示於網頁 1 2 3 4 5 6 7 8 9 // /students/（已登入學生表） app.get(&amp;#39;/students&amp;#39;, async (req, res) =&amp;gt; { try { let data = await Student.</description></item><item><title>展開</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E5%B1%95%E9%96%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E5%B1%95%E9%96%8B/</guid><description>展開 Spread Operators [[Object]] 跟 [[Array]] 都有[[展開]]的功能，可以將不同的物件做合併 但與 [[string]] 不同，單純使用 + 無法如期合併，需要使用 concat() 的功能 在 ES6 有新增語法糖
可以適用以下狀況：
陣列擴展，不同陣列合併 物件擴展，導入更多物件 NodeList 轉成純陣列（參照 [[HTMLCollection, Nodelist, array 比較]]） 陣列擴展，不同陣列合併 ES6 有展開的語法糖 .</description></item><item><title>屬性與功能的英文</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/%E5%B1%AC%E6%80%A7%E8%88%87%E5%8A%9F%E8%83%BD%E7%9A%84%E8%8B%B1%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/DOM/%E5%B1%AC%E6%80%A7%E8%88%87%E5%8A%9F%E8%83%BD%E7%9A%84%E8%8B%B1%E6%96%87/</guid><description>屬性與功能 屬性：properties, attribute 功能：function, method #js</description></item><item><title>嵌入其他 markdown 檔案</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%B5%8C%E5%85%A5%E5%85%B6%E4%BB%96-markdown-%E6%AA%94%E6%A1%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%B5%8C%E5%85%A5%E5%85%B6%E4%BB%96-markdown-%E6%AA%94%E6%A1%88/</guid><description>嵌入其他 markdown 檔案 ![[我是其他檔案]] #obsidian</description></item><item><title>常用指令</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid><description>常用指令 cd：移動到該資料夾 touch：新增檔案 mkdir：新增資料夾 Is：顯示資料夾的內容清單 pwd：顯示路徑 中斷執行 rm rmdir cd change directory 移動到該資料夾
1 cd 路徑 方法 自行輸入 拖曳資料夾進來 直接對資料夾右鍵「用終端機開啟」 touch 建立檔案</description></item><item><title>常見的後端的程式語言</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/%E5%B8%B8%E8%A6%8B%E7%9A%84%E5%BE%8C%E7%AB%AF%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/%E5%B8%B8%E8%A6%8B%E7%9A%84%E5%BE%8C%E7%AB%AF%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/</guid><description>後端的程式語言 常見的有
PHP：programming language Node.js + Express + MongoDB：JS Java：programming language, android Ruby on Rails Python(Django)：機械學習 .NET：Microsoft 產 #js #advanceJs #library #framework #nodeJs #backEnd</description></item><item><title>建立 Google 的 OAuth 憑證</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%BB%BA%E7%AB%8B-Google-%E7%9A%84-OAuth-%E6%86%91%E8%AD%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%BB%BA%E7%AB%8B-Google-%E7%9A%84-OAuth-%E6%86%91%E8%AD%89/</guid><description>建立 Google 的 OAuth 憑證 Google Cloud Platform
在 Google Cloud Platform 建立專案 [[在 Google Cloud Platform 建立憑證]] [[取得 Google OAuth Client ID]] 取得用戶端 ID 跟密碼：[[Configure Strategy]] / [[passport-google-oauth20 的 .</description></item><item><title>建立 Web 環境</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E5%BB%BA%E7%AB%8B-Web-%E7%92%B0%E5%A2%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E5%BB%BA%E7%AB%8B-Web-%E7%92%B0%E5%A2%83/</guid><description>建立 Web 環境 載點： repo
引入 cdn 1 &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/resonance-audio/build/resonance-audio.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 客製化 1 &amp;lt;script src=&amp;#34;node_modules/resonance-audio/build/resonance-audio.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; #vr #ar #spatial #audio #mixing #sound</description></item><item><title>建立架構 Define a Schema</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E5%BB%BA%E7%AB%8B%E6%9E%B6%E6%A7%8B-Define-a-Schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E5%BB%BA%E7%AB%8B%E6%9E%B6%E6%A7%8B-Define-a-Schema/</guid><description>建立架構 Define a Schema 如同 [[SQL create 製作表格]] create table 的動作，Mongoose 也會定義物件的 [[Schema Type]]，之後就可以 [[Create a Model]] 做使用了
1 2 3 4 5 6 7 8 9 10 // app.</description></item><item><title>建置</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/%E5%BB%BA%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/%E5%BB%BA%E7%BD%AE/</guid><description>設定 git config ：指向一個資料夾，裡面就是你的 git 設定 這些設定只需要做一遍
讓 Git 認識你 需要設定的有：使用者名稱、email（輸入後無法再更改）
先輸入 git config --list確認有沒有設定過（如果有用過類似 github 的軟體的話就不用再設定了）
沒有的話就輸入</description></item><item><title>建置生命週期（MongoDB Atlas, Passport. OAuth）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%BB%BA%E7%BD%AE%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9FMongoDB-Atlas-Passport.-OAuth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%BB%BA%E7%BD%AE%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9FMongoDB-Atlas-Passport.-OAuth/</guid><description>建置生命週期（MongoDB Atlas, Passport. OAuth） 為什麼是叫 index.js 而不是 app.js？ app.use(express.json()); 是做什麼的？ What Does app.use(express.json()) Do in Express? 匯入 [[匯入模組]] [[dotenv（使用 env 變數）]] [[Express 匯入]] [[Mongoose 建置]] 1 2 3 4 5 6 // index.</description></item><item><title>建置（登入、註冊）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E5%BB%BA%E7%BD%AE%E7%99%BB%E5%85%A5%E8%A8%BB%E5%86%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E5%BB%BA%E7%BD%AE%E7%99%BB%E5%85%A5%E8%A8%BB%E5%86%8A/</guid><description>建置 1 2 3 4 5 6 7 8 9 10 11 12 13 // 匯入：express, ejs, body-parser, express-session, mongoose // 從資料夾匯入 mongoose model （先做完下一標題） const User = require(&amp;#39;.</description></item><item><title>建置（連接數據庫的表單）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E5%BB%BA%E7%BD%AE%E9%80%A3%E6%8E%A5%E6%95%B8%E6%93%9A%E5%BA%AB%E7%9A%84%E8%A1%A8%E5%96%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E5%BB%BA%E7%BD%AE%E9%80%A3%E6%8E%A5%E6%95%B8%E6%93%9A%E5%BA%AB%E7%9A%84%E8%A1%A8%E5%96%AE/</guid><description>建置（連接數據庫的表單） 用用戶填入的表單資料：
顯示在網頁上 存入數據庫 更新數據庫 用請求：
刪除數據庫資料 資料夾 1 2 3 4 5 6 7 8 9 10 11 12 專案資料夾/ |- app/ | |- app.</description></item><item><title>從物件中提取屬性到變數中 Destructing an object</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E5%BE%9E%E7%89%A9%E4%BB%B6%E4%B8%AD%E6%8F%90%E5%8F%96%E5%B1%AC%E6%80%A7%E5%88%B0%E8%AE%8A%E6%95%B8%E4%B8%AD-Destructing-an-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E5%BE%9E%E7%89%A9%E4%BB%B6%E4%B8%AD%E6%8F%90%E5%8F%96%E5%B1%AC%E6%80%A7%E5%88%B0%E8%AE%8A%E6%95%B8%E4%B8%AD-Destructing-an-object/</guid><description>從物件中提取屬性到變數中 Destructing an object [[Destructing Assignment]]
長相像有大括號的變數 可以把物件的屬性提出來使用，不用重複用點記法點屬性 1 2 let {} = // 防失智搜尋用 let {提出來用的物件屬性1, 提出來用的物件屬性2 .</description></item><item><title>想學的框架</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/%E6%83%B3%E5%AD%B8%E7%9A%84%E6%A1%86%E6%9E%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/%E6%83%B3%E5%AD%B8%E7%9A%84%E6%A1%86%E6%9E%B6/</guid><description>GSAP</description></item><item><title>我是其他檔案</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E6%88%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%AA%94%E6%A1%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E6%88%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%AA%94%E6%A1%88/</guid><description>我是其他檔案 使用 ![[檔名]] 來嵌入</description></item><item><title>批次產生樣式 maps + @each</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/%E6%89%B9%E6%AC%A1%E7%94%A2%E7%94%9F%E6%A8%A3%E5%BC%8F-maps-+-each/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/%E6%89%B9%E6%AC%A1%E7%94%A2%E7%94%9F%E6%A8%A3%E5%BC%8F-maps-+-each/</guid><description>批次產生樣式 @each @each+Sass Maps批次產生各元素樣式
BS 的寫法 原始碼長這樣
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // 先有個 maps $types: ( primary : #428bca, success : #5cb85c, info : #5bc0de, warning : #f0ad4e, danger : #d9534f ) !</description></item><item><title>指令(npm)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4npm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4npm/</guid><description>指令 (npm) 安裝 1 npm i {模組名稱} global 安裝（全部的專案都可以用） 1 npm install -g {名稱} 專案會出現 node_modules 資料夾</description></item><item><title>指定特定 Route 之前的 Middleware（Route 前面）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/%E6%8C%87%E5%AE%9A%E7%89%B9%E5%AE%9A-Route-%E4%B9%8B%E5%89%8D%E7%9A%84-MiddlewareRoute-%E5%89%8D%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/%E6%8C%87%E5%AE%9A%E7%89%B9%E5%AE%9A-Route-%E4%B9%8B%E5%89%8D%E7%9A%84-MiddlewareRoute-%E5%89%8D%E9%9D%A2/</guid><description>指定特定 Route 之前的 Middleware（Route 前面） 跟 [[Routing]] 的功能類似，也可以限定使用
1 2 3 4 5 6 7 8 9 10 11 app.</description></item><item><title>排列陣列元素</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%8E%92%E5%88%97%E9%99%A3%E5%88%97%E5%85%83%E7%B4%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%8E%92%E5%88%97%E9%99%A3%E5%88%97%E5%85%83%E7%B4%A0/</guid><description>排列陣列元素 sort() 把元素照順序排([[string#邏輯]]) 會改變原本的陣列 1 2 let ary = [1, 3, 5, 2, 11]; console.log(ary.sort()); // log [1, 11, 2, 3, 5] 按照數字大小排： 1 2 3 function compareNumbers(a, b) { return a - b; } 照 string.</description></item><item><title>接案好好賺？</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E6%8E%A5%E6%A1%88%E5%A5%BD%E5%A5%BD%E8%B3%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E6%8E%A5%E6%A1%88%E5%A5%BD%E5%A5%BD%E8%B3%BA/</guid><description>下班接案好好賺？
喜歡接案？還是錢？ 想要全職接案或是創業會建議接案
接案的技能跟想找更好的工作要的內容不太一樣 接案技術在廣不在精 類型 純切版：幾千到幾萬 前端專案：需要設計稿、api文件，幾萬～幾十萬 功能插件，製作api（ 全站製作，百萬以上（團隊） 地雷 不要低價
客戶的需求很模糊，可以幫他分析，分到他最划算，我們也不用做太多多餘的功能</description></item><item><title>接案相關</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E6%8E%A5%E6%A1%88%E7%9B%B8%E9%97%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E6%8E%A5%E6%A1%88%E7%9B%B8%E9%97%9C/</guid><description> [[接案好好賺？]]</description></item><item><title>撰寫 Middleware</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/%E6%92%B0%E5%AF%AB-Middleware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/%E6%92%B0%E5%AF%AB-Middleware/</guid><description>撰寫 Middleware Routing 前面： [[Middleware 使用 req 參數]] [[Middleware 使用 res.send]] [[指定特定 Route 之前的 Middleware（Route 前面）]] Routing 中間： [[Routing 執行時的 Middleware（Route 中間）]] Route 後面 [[Error Handling（Routing 後面）]] 1 2 3 4 5 6 7 8 9 10 // middleware function 的參數有請求物件、回應物件、跟下一個 middleware app.</description></item><item><title>整合模組匯出匯入</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E6%95%B4%E5%90%88%E6%A8%A1%E7%B5%84%E5%8C%AF%E5%87%BA%E5%8C%AF%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E6%95%B4%E5%90%88%E6%A8%A1%E7%B5%84%E5%8C%AF%E5%87%BA%E5%8C%AF%E5%85%A5/</guid><description>多個模組 .js 檔案一多之後，檔案的可讀性會降低，且[[匯入模組]]的手續也會變複雜
1 2 3 4 5 6 7 8 9 // app.js 夾雜在各種小檔案中間 js/ |– app.js |– hi.</description></item><item><title>文字排版標籤</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E6%A8%99%E7%B1%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/html/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E6%A8%99%E7%B1%A4/</guid><description>文字排版 標籤 &amp;lt;hr&amp;gt;：段落分隔線 &amp;lt;pre&amp;gt;：等距排版（[[pre]]） &amp;lt;br&amp;gt;：換行 text-intent：段落首行縮排 其他 HTML Symbols</description></item><item><title>新增新的 HTML（套用 EJS 模版）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E6%96%B0%E5%A2%9E%E6%96%B0%E7%9A%84-HTML%E5%A5%97%E7%94%A8-EJS-%E6%A8%A1%E7%89%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E6%96%B0%E5%A2%9E%E6%96%B0%E7%9A%84-HTML%E5%A5%97%E7%94%A8-EJS-%E6%A8%A1%E7%89%88/</guid><description>HTML 架構 gulp 內可以新增 html 檔案，表頭上加上以下內容，就可以套用想要用的 EJS 模版 用 live server 檢視時，在網址後面補上這個檔案名稱（檔名.html）即可 1 2 3 4 5 6 7 8 --- title: &amp;lt;title&amp;gt; layout: .</description></item><item><title>新增與刪除</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%96%B0%E5%A2%9E%E8%88%87%E5%88%AA%E9%99%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%96%B0%E5%A2%9E%E8%88%87%E5%88%AA%E9%99%A4/</guid><description>新增與刪除 直接更動原本的陣列
功能 新增 刪除 頭 unshift() shift() 尾 push() pop() 指定位置 - splice(index, amount) return 的內容 新增：array 的長度 刪除：被刪除的成員 新增 1 2 ary.</description></item><item><title>暫時性死區(TDZ)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E6%9A%AB%E6%99%82%E6%80%A7%E6%AD%BB%E5%8D%80TDZ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E6%9A%AB%E6%99%82%E6%80%A7%E6%AD%BB%E5%8D%80TDZ/</guid><description>暫時性死區 (TDZ) 暫時性死區指的是 let, const 在未宣告時，使用會出現 error 的狀況 [[var, let, const 的作用域#重複宣告的狀況#let]]
#js #variable #scope</description></item><item><title>會員頁面</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E6%9C%83%E5%93%A1%E9%A0%81%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E6%9C%83%E5%93%A1%E9%A0%81%E9%9D%A2/</guid><description>會員頁面 是否已經登入？（session 內是否有 isVerified） 否：導回登入頁面 是：顯示 [[Routing 執行時的 Middleware（Route 中間）]] [[Session]] 1 2 3 4 5 6 7 const requireLogin = (req, res, next) =&amp;gt; { if(!</description></item><item><title>本地帳號登入</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E6%9C%AC%E5%9C%B0%E5%B8%B3%E8%99%9F%E7%99%BB%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E6%9C%AC%E5%9C%B0%E5%B8%B3%E8%99%9F%E7%99%BB%E5%85%A5/</guid><description>本地帳號登入 [[本地註冊（Local Signup）]]
[[Passport.js]]</description></item><item><title>本地註冊（Local Signup）</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E6%9C%AC%E5%9C%B0%E8%A8%BB%E5%86%8ALocal-Signup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E6%9C%AC%E5%9C%B0%E8%A8%BB%E5%86%8ALocal-Signup/</guid><description>本地註冊 這個註冊完，存到數據庫後不會有 googleID
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // auth-route // 匯入 bcrypt 做註冊密碼加密 // 匯入 User model router.</description></item><item><title>本機 Repository</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/%E6%9C%AC%E6%A9%9F-Repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/%E6%9C%AC%E6%A9%9F-Repository/</guid><description>本機 Repository 進行版本控制 [[git init]]：初始化，資料夾執行一次 [[git add(track)]]：track，有新檔案就要執行 [[git commit]]：提交更新，要更新版本內容就要執行 其他功能 [[git status]]：查看 [[git add(track)]] 狀態 [[git log]]：查看 [[git commit]] 記錄 [[gitignore]]：建立不會被 [[git add(track)]] 的檔案列表 [[node 的 gitignore 設定]]（後端） #git</description></item><item><title>條件判定陣列的元素</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%A2%9D%E4%BB%B6%E5%88%A4%E5%AE%9A%E9%99%A3%E5%88%97%E7%9A%84%E5%85%83%E7%B4%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%A2%9D%E4%BB%B6%E5%88%A4%E5%AE%9A%E9%99%A3%E5%88%97%E7%9A%84%E5%85%83%E7%B4%A0/</guid><description>條件判定陣列的元素 以下幾個功能可以處理陣列內符合特定條件的元素
Method Return? filter() all correct element find() first correct element some() true(boolean) if any element is correct every() true(boolean) if every element is correct Return 符合條件的元素 [[filter()]]：return 全部符合條件的元素 [[find()]]：return 第一個符合條件的元素 Return boolean （是否符合條件） 1 2 3 4 5 6 7 // 三個 element 都是物件 // 都有個一個屬性 isPerson 判斷是否為人 let ary = [dog, cat, 王小明]; let anyPerson = ary.</description></item><item><title>條件簡寫 ternary operator(語法糖)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/%E6%A2%9D%E4%BB%B6%E7%B0%A1%E5%AF%AB-ternary-operator%E8%AA%9E%E6%B3%95%E7%B3%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/%E6%A2%9D%E4%BB%B6%E7%B0%A1%E5%AF%AB-ternary-operator%E8%AA%9E%E6%B3%95%E7%B3%96/</guid><description>條件簡寫（三元運算符 ternary operator） 可以簡寫[[if, switch#if if else else if]] ()?為判斷句 condition ，: 代表 else
1 2 let price = (age &amp;lt; 18)?</description></item><item><title>模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E6%A8%A1%E7%B5%84/</guid><description>模組 可被重複利用的 JS 功能 (functionality) 可由單個或多個 JS 檔案所組成 可以簡單也可以繁複 [[取得 Node.js 裡的模組]]
#js #module</description></item><item><title>樣板：views 資料夾</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E6%A8%A3%E6%9D%BFviews-%E8%B3%87%E6%96%99%E5%A4%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E6%A8%A3%E6%9D%BFviews-%E8%B3%87%E6%96%99%E5%A4%BE/</guid><description>樣板：views 資料夾 取代一般的 html 的 ejs 檔案必須都放在 views 資料夾下
1 2 3 4 // index.ejs 一定要在 views 資料夾下才會運作，不然會出現 error app.</description></item><item><title>檔案變多之後的模組運用</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/%E6%AA%94%E6%A1%88%E8%AE%8A%E5%A4%9A%E4%B9%8B%E5%BE%8C%E7%9A%84%E6%A8%A1%E7%B5%84%E9%81%8B%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E7%92%B0%E5%A2%83/%E6%AA%94%E6%A1%88%E8%AE%8A%E5%A4%9A%E4%B9%8B%E5%BE%8C%E7%9A%84%E6%A8%A1%E7%B5%84%E9%81%8B%E7%94%A8/</guid><description>檔案變多之後的模組運用 使用更多 React 模組 之後會學到 [[Hook]]，求方便可能會再多匯入個別的 hook，沒有匯入也可以用
有匯入的使用方法：useState() 沒有匯入的使用方法：React.UseState() 1 import React, { useState, useEffect } from &amp;#39;react&amp;#39;; 更多元件的話 之後會學到 React 有個重要觀念是 [[Component：可重複利用、自定參數的元件]]，會習慣將元件個別匯出做使用，不會都放在同一個 jsx 檔案內</description></item><item><title>權重</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E6%AC%8A%E9%87%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E6%AC%8A%E9%87%8D/</guid><description>權重 css 的語法中，下面的語法會蓋過上面的語法 先看權重再看先後
選擇器 權重分數 HTML 標籤選擇器 1 分 Class 選擇器 10 分 ID 選擇器 100 分 inline style 1000 分 !</description></item><item><title>歌單</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/%E6%AD%8C%E5%96%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/%E6%AD%8C%E5%96%AE/</guid><description/></item><item><title>沒辦法全域安裝 npm 模組：code EACCES</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%B2%92%E8%BE%A6%E6%B3%95%E5%85%A8%E5%9F%9F%E5%AE%89%E8%A3%9D-npm-%E6%A8%A1%E7%B5%84code-EACCES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%B2%92%E8%BE%A6%E6%B3%95%E5%85%A8%E5%9F%9F%E5%AE%89%E8%A3%9D-npm-%E6%A8%A1%E7%B5%84code-EACCES/</guid><description>沒辦法全域安裝 npm 模組：code EACCES [ npm install -g less does not work: EACCES: permission denied]( https://stackoverflow.com/questions/33725639/npm-install-g-less-does-not-work-eacces-permission-denied)
裝 [[nvm]] 解決</description></item><item><title>深層拷貝、非 string 類型的資料類型轉換</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E6%B7%B1%E5%B1%A4%E6%8B%B7%E8%B2%9D%E9%9D%9E-string-%E9%A1%9E%E5%9E%8B%E7%9A%84%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B%E8%BD%89%E6%8F%9B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E6%B7%B1%E5%B1%A4%E6%8B%B7%E8%B2%9D%E9%9D%9E-string-%E9%A1%9E%E5%9E%8B%E7%9A%84%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B%E8%BD%89%E6%8F%9B/</guid><description>深層拷貝 (Deep Copy) [[物件不要傳參考的時候：深層、淺層拷貝]]
深層拷貝會將物件先轉成 [[string]] 再轉回物件 賦值到 newObject 之後，與原物件就不會再具有傳參考特性(link)
1 const newObject = JSON.parse(JSON.stringify(object)) [[Storage]] 內的資料使用 非 [[string]] 的資料類型 [[類型轉換]] 由於 storage 裡面只會有 string ，其他的[[資料類型]]都會被轉成 string，如果想要其他的資料提出時還是維持資料原本的類型，可以用以下功能（object, array, boolean 皆可）</description></item><item><title>瀏覽器上運行 ES 模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%8A%E9%81%8B%E8%A1%8C-ES-%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%8A%E9%81%8B%E8%A1%8C-ES-%E6%A8%A1%E7%B5%84/</guid><description>在瀏覽器運行 ES 模組 為何模組化 [[JS 模組化的由來與目的]]
方法 [[在瀏覽器（原生）下運行模組]]
匯出 匯入前要先匯出，原則上都是在 JS 上進行
預設匯出：defaultExport.js 常見的匯出方式，通常用於匯出物件，在 Vue 開發中可用來匯出元件
只能匯出一個 1 export default 具名匯出：namedExport.</description></item><item><title>版本控制介紹</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%B4%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%B4%B9/</guid><description>Version Control System (VCS) 版本控制 管理做過的歷史紀錄
沒有 VCS 的作法 傳統作法：另存檔案，把不同版本存在另一個資料夾 缺點：都是手動進行，容易出錯，到最後也稿不清楚寫到哪個版本了 error prone
RCS 曾經有名的 local 版本控制系統（至今還有很多電腦在使用），會散落在不同電腦 安裝[[開發]]者[[工具包]]之後就有rcs指令可用，透過讀取不同的[[版本控制介紹#patch set 補丁]]就可以產生不同的版本資料</description></item><item><title>物件不要傳參考的時候：深層、淺層拷貝</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E4%B8%8D%E8%A6%81%E5%82%B3%E5%8F%83%E8%80%83%E7%9A%84%E6%99%82%E5%80%99%E6%B7%B1%E5%B1%A4%E6%B7%BA%E5%B1%A4%E6%8B%B7%E8%B2%9D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E4%B8%8D%E8%A6%81%E5%82%B3%E5%8F%83%E8%80%83%E7%9A%84%E6%99%82%E5%80%99%E6%B7%B1%E5%B1%A4%E6%B7%BA%E5%B1%A4%E6%8B%B7%E8%B2%9D/</guid><description>斬斷一切的牽連：淺層拷貝、深層拷貝 開發時如果沒有留意到[[物件傳參考]]特性，會很容易不小心修改到原本的資料 避免此狀況可使用
其他的[[類型轉換]] 淺層拷貝(Shallow Copy) 最外層的 object 是新建的，內層若有其他 object 還是保留傳參考特性，程式碼較單純
Object.assign() 1 const newObject = Object.assign({}, originObject) 第一個 parameter 放空的 object (建立新的記憶體空間) 第二個放想要複製的 object 在空 object 中展開想要複製的物件 在新的空 object 內[[展開]] 1 2 3 const newObject2 = { .</description></item><item><title>物件傳參考</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E5%82%B3%E5%8F%83%E8%80%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E5%82%B3%E5%8F%83%E8%80%83/</guid><description>物件傳參考 備註 找資料的時候看到很多種說法，可能要留意一下是不是在講同件事XD 傳參照、傳參、call by reference、pass by reference
傳？傳什麼？ 五分鐘快速了解 [傳址，傳參考，傳址] JS 的傳值 &amp;amp; 傳參考 這篇還沒看 參考是什麼？ 參考（參照、reference） ，指的是他們存在的記憶體空間 傳參考會共用同一個記憶體空間，不會複製</description></item><item><title>物件字面值</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E5%AD%97%E9%9D%A2%E5%80%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E5%AD%97%E9%9D%A2%E5%80%BC/</guid><description>物件字面值 物件字面值：字面上物件長什麼樣子的意思 [[Key-Value Pair]]
1 2 3 const obj = { key: value, } #js #object</description></item><item><title>物件導向 OOP</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/</guid><description>物件導向 [[Execution Context]] Global Execution Context Function Execution Context Funciton 都是物件 [[Constructor]] [[Constructor]] 可以重複生成相似物件
[[Prototype]] [[Prototype]] 可以將屬性共享給多個物件
[[Prototype Inheritance]] [[Class]] [[static：僅給 class 內部用的變數]] Class 內部呼叫用屬性與方法</description></item><item><title>獲得請求後更新數據庫資料</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E7%8D%B2%E5%BE%97%E8%AB%8B%E6%B1%82%E5%BE%8C%E6%9B%B4%E6%96%B0%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E7%8D%B2%E5%BE%97%E8%AB%8B%E6%B1%82%E5%BE%8C%E6%9B%B4%E6%96%B0%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99/</guid><description>獲得請求後更新數據庫資料 [[HTTP request]]：PUT 對於 html form 是不支援的，需要安裝 npm 模組：[[method-override]] [[findOneAndUpdate]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // 收到 put 更新後，更新數據庫 app.</description></item><item><title>現行的 ES 模組使用技巧</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E7%8F%BE%E8%A1%8C%E7%9A%84-ES-%E6%A8%A1%E7%B5%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E7%8F%BE%E8%A1%8C%E7%9A%84-ES-%E6%A8%A1%E7%B5%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid><description>現行的 ES 模組使用技巧 作用域 每個 type=&amp;quot;module&amp;quot; 的作用域都是獨立的
非模組的狀況 1 2 3 4 5 6 7 8 9 &amp;lt;script&amp;gt; var a = 1; // 設置全域 a 變數 window.</description></item><item><title>環境建立</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%AB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%AB%8B/</guid><description>gulp 環境安裝流程
環境設置 確認是否安裝 Node.js
1 node -v 安裝 gulp （失敗請參考下面）
1 npm i gulp@4 -g 用管理員權限安裝</description></item><item><title>生成標籤：React.createElement()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E7%94%9F%E6%88%90%E6%A8%99%E7%B1%A4React.createElement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E7%94%9F%E6%88%90%E6%A8%99%E7%B1%A4React.createElement/</guid><description>React.createElement () [[JSX 生成標籤]] [[同時生成多個標籤]]
生成標籤的原理，但實際撰寫時會用更方便的方法：[[JSX 生成標籤]]
1 2 3 4 5 6 7 8 9 10 // 匯入 [[React 使用的模組]] // 生成標籤，並指定屬性（第二個參數，為物件） // 屬性參數包含：寫入 CSS、className 等等等 const element = React.</description></item><item><title>生成與使用 EJS 樣板可用的變數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E7%94%9F%E6%88%90%E8%88%87%E4%BD%BF%E7%94%A8-EJS-%E6%A8%A3%E6%9D%BF%E5%8F%AF%E7%94%A8%E7%9A%84%E8%AE%8A%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E7%94%9F%E6%88%90%E8%88%87%E4%BD%BF%E7%94%A8-EJS-%E6%A8%A3%E6%9D%BF%E5%8F%AF%E7%94%A8%E7%9A%84%E8%AE%8A%E6%95%B8/</guid><description>生成 EJS 樣板可用的變數 舉例：
[[EJS 使用網址輸入內容作為變數]] [[EJS 使用 Mongoose 取得數據庫資料作為變數]]（事前知識： [[Mongoose]],[[Promise]]） [[EJS 對超連結使用變數]] #npm #gulp #html #js #ejs #expressJs</description></item><item><title>用 Resonance Audio 開發</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E7%94%A8-Resonance-Audio-%E9%96%8B%E7%99%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E7%94%A8-Resonance-Audio-%E9%96%8B%E7%99%BC/</guid><description>用 Resonance Audio 開發 可調整參數 物件指向性質 近場效應 Sound source spread Geometry-based reverb Occlusions Recording of Ambisonic audio files 效能 靠著 ambisonic 格式來降低 cpu 運轉 取代每個物件都模擬場景的狀況</description></item><item><title>用元件處理 CSS Styling</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/%E7%94%A8%E5%85%83%E4%BB%B6%E8%99%95%E7%90%86-CSS-Styling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Styling/%E7%94%A8%E5%85%83%E4%BB%B6%E8%99%95%E7%90%86-CSS-Styling/</guid><description>用元件處理 CSS Styling [[Component：可重複利用、自定參數的元件]] [[Styling in JSX]]
會多次出現的類似內容，就可以做成元件 內容若有需要微調的需求，則設定參數供調整 找出類似內容 1 2 3 4 5 6 7 const element = ( &amp;lt;div&amp;gt; {/* 觀察有沒有可以異中求同的要素： className 有 box */} &amp;lt;div className=&amp;#34;box box-small&amp;#34;&amp;gt;small box&amp;lt;/div&amp;gt; &amp;lt;div className=&amp;#34;box box-medium&amp;#34;&amp;gt;medium box&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) 拉出來做成元件 [[Component：可重複利用、自定參數的元件#生成元件]]</description></item><item><title>用資料夾管理 Mongoose models 模組</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E7%94%A8%E8%B3%87%E6%96%99%E5%A4%BE%E7%AE%A1%E7%90%86-Mongoose-models-%E6%A8%A1%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E7%94%A8%E8%B3%87%E6%96%99%E5%A4%BE%E7%AE%A1%E7%90%86-Mongoose-models-%E6%A8%A1%E7%B5%84/</guid><description>管理 Mongoose models 模組（非必要） 可以建立一個 models 資料夾統一管理，每個 Schema + Model 的建立都分在不同的 js 檔案裡，各自匯出給 app 用
匯入 mongoose 模組：[[匯入模組]] [[建立架構 Define a Schema]] 建立規則：[[Validators]] [[Create a Model]] [[匯出模組]] 可以到 app.</description></item><item><title>登入前後頁面的變化</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%85%A5%E5%89%8D%E5%BE%8C%E9%A0%81%E9%9D%A2%E7%9A%84%E8%AE%8A%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%85%A5%E5%89%8D%E5%BE%8C%E9%A0%81%E9%9D%A2%E7%9A%84%E8%AE%8A%E5%8C%96/</guid><description>登入前後頁面的變化 nav 登入狀態時，不顯示登入按鈕，顯示 porfile, post 頁面 反之，登出狀態不顯示登出按鈕 &amp;lt;% } %&amp;gt;
&amp;lt;% if(!user) { %&amp;gt; Sign Up&amp;lt;% } %&amp;gt;</description></item><item><title>登入後</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%85%A5%E5%BE%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%85%A5%E5%BE%8C/</guid><description>登入後 1 2 3 4 5 6 7 8 9 // 取得 configure strategy 的資料後 router.get(&amp;#39;/google/redirect&amp;#39;, // middleware // 到 config passport verified callback passport.</description></item><item><title>登入頁面</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2/</guid><description>有加密的登入頁面 檢查是否有這個帳號 否：「帳密有誤」 是：用戶輸入的密碼加密後是否跟 DB 內容一致？ 否：「帳密有誤」 是：導向會員頁面 與[[註冊頁面]]一樣，都使用 [[bcrypt]] 加密</description></item><item><title>登出</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%87%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%87%BA/</guid><description>登出 [[req.logout()]]
1 2 3 4 5 // login route 後面 router.get(&amp;#39;/logout&amp;#39;, (req, res) =&amp;gt; { req.logout(); res.redirect(&amp;#39;/&amp;#39;); })</description></item><item><title>程序 process</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E7%A8%8B%E5%BA%8F-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E7%A8%8B%E5%BA%8F-process/</guid><description>程序 process 一個程序會有一個專屬編號 (PID) 一個程序裡面會有很多的執行緒，等待被執行 #computer</description></item><item><title>簡介</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E7%B0%A1%E4%BB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E7%B0%A1%E4%BB%8B/</guid><description>什麼是 Resonance Audio Google 發佈的多平台 spatial audio SDK 透過模擬聲音物件如何
[[與人耳的互動 (HRTFs) - 事前知識#與人耳的互動]] 與環境的互動 互動[[與人耳的互動 (HRTFs) - 事前知識]]，來實現 AR, VR、 遊戲、影音的聲音效果</description></item><item><title>簡介</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/%E7%B0%A1%E4%BB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/%E7%B0%A1%E4%BB%8B/</guid><description>Spatial audio https://www.highfidelity.com/blog/what-is-spatial-audio
可以實現聲音在真實空間內的所在的聲音技術 如果聽者移動位置或角度，也會隨之調整
運作 使用技術
HRTFs 耳廓 使用時機 多聲場合 What If Zoom Had Spatial Audio? clubhouse</description></item><item><title>系統帳號</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/mac/%E9%99%A4%E9%8C%AF/%E7%B3%BB%E7%B5%B1%E5%B8%B3%E8%99%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/mac/%E9%99%A4%E9%8C%AF/%E7%B3%BB%E7%B5%B1%E5%B8%B3%E8%99%9F/</guid><description>https://apple.stackexchange.com/questions/340155/account-is-already-signed-in-to-icloud-in-mojave-but-its-not
#mac #bug</description></item><item><title>給 Markdown 檔案新增別名：alias</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E7%B5%A6-Markdown-%E6%AA%94%E6%A1%88%E6%96%B0%E5%A2%9E%E5%88%A5%E5%90%8Dalias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E7%B5%A6-Markdown-%E6%AA%94%E6%A1%88%E6%96%B0%E5%A2%9E%E5%88%A5%E5%90%8Dalias/</guid><description>aliases: &amp;lt;輸入別名&amp;gt;, &amp;lt;也可以用這個名稱做連結&amp;gt; #obsidian</description></item><item><title>編譯</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E7%B7%A8%E8%AD%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E7%B7%A8%E8%AD%AF/</guid><description>編譯 編譯？ 程式為了更方便撰寫者進行撰寫，會透過一些工具來輔助，但這些工具不一定可以直接被電腦讀懂 會需要透過「編譯」的過程，來轉換成電腦讀得懂的語言
GULP 的編譯 gulp 整合了很多個原本往往要很多工具才能做到的事
SCSS -&amp;gt; CSS 樣板語言（[[EJS]]） -&amp;gt; HTML 原始圖檔（未壓縮） -&amp;gt; 網頁用圖檔（壓縮） JS -&amp;gt; 每個瀏覽器都讀得懂的 JS 編譯位置 在 assets（偶爾會叫 public） 的資料夾，就會被編譯到 dist 去</description></item><item><title>編譯 EJS 樣板 res.render()</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E7%B7%A8%E8%AD%AF-EJS-%E6%A8%A3%E6%9D%BF-res.render/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E7%B7%A8%E8%AD%AF-EJS-%E6%A8%A3%E6%9D%BF-res.render/</guid><description>編譯 EJS 樣板 res.render () ejs 檔案要放在[[樣板：views 資料夾]]裡
1 2 3 4 5 // 單純編譯 // .ejs 可以省略 res.</description></item><item><title>置換函數的 this 指向</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E7%BD%AE%E6%8F%9B%E5%87%BD%E6%95%B8%E7%9A%84-this-%E6%8C%87%E5%90%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E7%BD%AE%E6%8F%9B%E5%87%BD%E6%95%B8%E7%9A%84-this-%E6%8C%87%E5%90%91/</guid><description>置換函數的 this 指向 這些是函數都可以使用的 methods
常見 methods bind call apply bind 綁定 [[this]] 指向，需要把 bind 過的內容丟到一個新的變數內使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 let Sam = { name: &amp;#39;Sam&amp;#39;, age: 25 } function getAge() { // 此 this 是 simple call，指全域 console.</description></item><item><title>自製模組(Node.js)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E8%87%AA%E8%A3%BD%E6%A8%A1%E7%B5%84Node.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E8%87%AA%E8%A3%BD%E6%A8%A1%E7%B5%84Node.js/</guid><description>自製 Node.js [[模組]] 會利用到 [[Module Wrapper]] 的預設參數 [[Module Wrapper#exports require module]]
建立模組檔案（舉例 hi, bye）
1 2 3 4 js/ |– app.</description></item><item><title>自訂 Hooks</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/%E8%87%AA%E8%A8%82-Hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/React/Hook/%E8%87%AA%E8%A8%82-Hooks/</guid><description>自訂 Hooks [[Hook]]
若有要一起使用的 [[Hook]] 可以把他們加到一個函式內，方便使用 慣例上會以 use 作為開頭命名（[[eslint-plugin-react-hooks]] 會加以辨識） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 將 useState, useEffect 從 Greeting () 元件抽出，組合成一個自訂 Hook function useLocalStorageState(key, defaultValue = &amp;#39;&amp;#39;) { // [[Destructing Assignment]] // 命名保有通用性，不管什麼值都符合 const [state, setState] = React.</description></item><item><title>與人耳的互動 (HRTFs) - 事前知識</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E8%88%87%E4%BA%BA%E8%80%B3%E7%9A%84%E4%BA%92%E5%8B%95-HRTFs-%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E8%88%87%E4%BA%BA%E8%80%B3%E7%9A%84%E4%BA%92%E5%8B%95-HRTFs-%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98/</guid><description>與人耳的互動 (HRTFs) 真實情況下，聲音與人耳的互動，取決於他的水平與高度定位，以及耳朵內部的影響
兩耳時間差 interaural time difference (ITD) 水平 辨別低頻聲音定位 兩耳音量差 interaural level differences, (ILD) head’s acoustic shadow 兩耳聽到的音量會因為隔著一顆頭，所以聲音音量聽起來不一樣 水平 辨別高頻定位 耳廓效應 Spectral effects 除了上述兩項 耳廓可以幫我們更完整立體的定位 #vr #ar #spatial #audio #mixing #sound #事前知識</description></item><item><title>與環境的互動 - 事前知識</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E8%88%87%E7%92%B0%E5%A2%83%E7%9A%84%E4%BA%92%E5%8B%95-%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E8%88%87%E7%92%B0%E5%A2%83%E7%9A%84%E4%BA%92%E5%8B%95-%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98/</guid><description>與環境的互動 包含頭的移動與物件的移動
頭部追蹤定位 空間反射 空間障礙物 聲音物件指向性、發聲性質 頭的移動 Head-mounted displays 追蹤頭的移動 Resonance Audio 會以裝置的相反方向來呈現
早期反射、殘響 Early reflections and reverb 真實狀況下，聲波傳播時，只要碰上任何介面都會反彈，產生出複雜的混合狀態 Resonance Audio 將其拆分為三種狀態</description></item><item><title>處理 Validators 錯誤的寫法</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/%E8%99%95%E7%90%86-Validators-%E9%8C%AF%E8%AA%A4%E7%9A%84%E5%AF%AB%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/%E8%99%95%E7%90%86-Validators-%E9%8C%AF%E8%AA%A4%E7%9A%84%E5%AF%AB%E6%B3%95/</guid><description>[[Validators]] Error Handling Validators 的 error 要透過 crud 的 [[Promise]] (.catch) 來完成，Handling 成功的話回傳給網頁一個 error object
save 的狀況 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // define a Schema const monkeySchema = new mongoose.</description></item><item><title>表單更新數據庫既有資料</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E8%A1%A8%E5%96%AE%E6%9B%B4%E6%96%B0%E6%95%B8%E6%93%9A%E5%BA%AB%E6%97%A2%E6%9C%89%E8%B3%87%E6%96%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E8%A1%A8%E5%96%AE%E6%9B%B4%E6%96%B0%E6%95%B8%E6%93%9A%E5%BA%AB%E6%97%A2%E6%9C%89%E8%B3%87%E6%96%99/</guid><description>表單更新數據庫既有資料 GET：[[EJS 提供用戶更新的資料的表單]] PUT：[[獲得請求後更新數據庫資料]] 獲得 put 請求，更新數據庫 完成後重新導向([[res.redirect()]])學生個人頁面 （更新後的資料） #js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #crud</description></item><item><title>表單資料存入數據庫</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E8%A1%A8%E5%96%AE%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5%E6%95%B8%E6%93%9A%E5%BA%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E8%A1%A8%E5%96%AE%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5%E6%95%B8%E6%93%9A%E5%BA%AB/</guid><description>表單資料存入數據庫 提供表單 傳送表單發送 POST 請求 確認請求後存入數據庫 1 2 3 4 // student/insert/ app.get(&amp;#39;/students/insert&amp;#39;, (req, res) =&amp;gt; { res.</description></item><item><title>製作登入、註冊介面</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E8%A3%BD%E4%BD%9C%E7%99%BB%E5%85%A5%E8%A8%BB%E5%86%8A%E4%BB%8B%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E8%A3%BD%E4%BD%9C%E7%99%BB%E5%85%A5%E8%A8%BB%E5%86%8A%E4%BB%8B%E9%9D%A2/</guid><description>製作登入介面 需要的效果 [[註冊頁面]]：加密後資料存入 [[Database 數據庫]] [[POST 表單(express)]] [[建置（登入、註冊）]] [[登入頁面]]：檢查輸入的帳密是否吻合 DB 資料 如果吻合，導向[[會員頁面]] 絕對不可以直接儲存資料，要加密（[[Authentication and Cryptography#Cryptography 密碼學]]）</description></item><item><title>製作破版樣式</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A3%BD%E4%BD%9C%E7%A0%B4%E7%89%88%E6%A8%A3%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A3%BD%E4%BD%9C%E7%A0%B4%E7%89%88%E6%A8%A3%E5%BC%8F/</guid><description>製作破版樣式 如圖，左右兩區塊（字 ＋ Swiper 圖）共計的網格占比要超過原本的網格占比 舉例
字：col-5 圖：col-10 col-10 會因為超過寬度 wrap 到下一行，但可以用 flex: nowrap，的語法防止 這時候在整個區塊最外層加入 overflow: hidden 的語法即可避免出現 x 軸滾輪</description></item><item><title>視差滾動</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95/</guid><description>視差滾動 animation 語法介紹
常用語法 animation-name animation-duration animation-delay animation-iteration-count: 跑的次數 數字 infinite（無限、吃效能） animation-fill-mode backwards，跑第一個影格 forwards：留在最後一個影格 both：第一個跟最後一個影格都會停住 none（預設）：如果起始、終點都設在同一位置，會很滑順 範例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 div{ position:absolute; left:0; width:50px; height:50px; background:#f00; // 對應下面的 @keyframes animation-name:oxxo; animation-duration:2s; } @keyframes oxxo{ from{ left:0; } to{ left:100px; } } 多步驟的動畫 1 2 3 4 5 6 7 8 // 多步驟的動畫 @keyframes example { 0% {background-color:pink; left:0px; top:0px;} 25% {background-color:yellow; left:200px; top:0px;} 50% {background-color:blue; left:200px; top:200px;} 75% {background-color:green; left:0px; top:200px;} 100% {background-color:red; left:0px; top:50px;} } 動畫 cheatsheet https://animate.</description></item><item><title>計算機概論</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96/</guid><description>電腦做什麼事情 前後端都該理解的計算機概論 How Computers Work
流程 1 INPUT --&amp;gt; [ STORAGE &amp;lt;--&amp;gt; PROCESSING ] --&amp;gt; OUTPUT INPUT 透過滑鼠、鍵盤、麥克風、攝影機等，作為電腦的接收器</description></item><item><title>設計模式</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/</guid><description>建置流程 建置流程
命名 progress, timeline ::: success 以功能性、外觀來命名 :::
1 2 3 4 5 // 通用性不夠 .orderProgress {} .</description></item><item><title>註冊頁面</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E8%A8%BB%E5%86%8A%E9%A0%81%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E8%A8%BB%E5%86%8A%E9%A0%81%E9%9D%A2/</guid><description>有加密的註冊頁面 這個帳號有沒有被註冊過？ 是：「此帳號已註冊」 否：將密碼加密，存入數據庫 先看[[註冊頁面#未加密的註冊頁面]]理解流程，再使用 [[bcrypt]] 模組來達成加密
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 app.</description></item><item><title>變數 variables</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E8%AE%8A%E6%95%B8-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E8%AE%8A%E6%95%B8-variables/</guid><description>變數 有三種變數
declaration 宣告 let [[const]] var（不建議用） assignment 指派 =：指派，右邊指派到左邊，不是等於 let 宣告完可以再指派，const 不行
1 2 let x = 10; x = 5; 屬性與變數的差異 屬性可以被刪除 (a = 1) 變數無法被刪除 (var a = 1) 作用域 [[var, let, const 的作用域]]內詳細</description></item><item><title>變數簡寫語法糖</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E8%AE%8A%E6%95%B8%E7%B0%A1%E5%AF%AB%E8%AA%9E%E6%B3%95%E7%B3%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E8%AE%8A%E6%95%B8%E7%B0%A1%E5%AF%AB%E8%AA%9E%E6%B3%95%E7%B3%96/</guid><description>物件內的變數簡寫語法糖 [[物件字面值]]中，一組屬性皆以 [[Key-Value Pair]] 形式出現，在 ES6 中，如果變數的 value 與 key 同名，可以直接省略 key
原本寫法 1 2 3 4 5 6 7 8 // 第一個物件 const person = { name: &amp;#39;小明&amp;#39; }; // 將 person 設定為 people 中 person 的 value const people = { person: person } ES6 語法糖 導入物件 A 到 B 物件當 value 時，如果屬性與 value 同名，則可以簡寫</description></item><item><title>資料夾架構</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E8%B3%87%E6%96%99%E5%A4%BE%E6%9E%B6%E6%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E8%B3%87%E6%96%99%E5%A4%BE%E6%9E%B6%E6%A7%8B/</guid><description>dist： 編譯後的結果，不要亂動 app：HTML, EJS 直接放這，以下的內容會自動[[編譯]]到 dist 資料夾去 assets：HTML, CSS, JS, 圖檔影片等等放這 script：JS 放這 style：SCSS 放這 images：圖檔放這 gulpfile.</description></item><item><title>資料類型</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/</guid><description>資料類型、資料型別 JavaScript 的資料型別與資料結構
型 返値 Undefined &amp;quot;undefined&amp;quot; Null &amp;quot;object&amp;quot;( 備註) 真偽値 &amp;quot;boolean&amp;quot; 数値 &amp;quot;number&amp;quot; BigInt (ECMAScript 2020 の新機能) &amp;quot;bigint&amp;quot; 文字列 &amp;quot;string&amp;quot; シンボル (ECMAScript 2015 の新機能) &amp;quot;symbol&amp;quot; Function オブジェクト (implements [[Call]] in ECMA-262 terms) &amp;quot;function&amp;quot; その他のオブジェクト &amp;quot;object&amp;quot; 最新的 ECMAScript 標準定義了七種資料型別： 有六種資料型別是 原始型別 (en-US)： Boolean Null Undefined (en-US) Number BigInt (en-US) String (en-US) Symbol (en-US)（於 ECMAScript 6 新定義） 另外還有 Object #js #dataType</description></item><item><title>輕量化</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/%E8%BC%95%E9%87%8F%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/%E8%BC%95%E9%87%8F%E5%8C%96/</guid><description>查看流量 devtools-&amp;gt;network 影音最吃流量
減量 tinypng 如果流量一直被吃掉的話 可以使用規則-&amp;gt;全部快取來避免一直被吃流量</description></item><item><title>透過 Mongoose 存入 MongoDB(Save)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E9%80%8F%E9%81%8E-Mongoose-%E5%AD%98%E5%85%A5-MongoDBSave/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E9%80%8F%E9%81%8E-Mongoose-%E5%AD%98%E5%85%A5-MongoDBSave/</guid><description>save Jon to DB 1 2 3 4 5 6 7 8 Jon.save() .then(() =&amp;gt; { console.log(&amp;#39;Jon has been saved into DB&amp;#39;); }) .</description></item><item><title>透過 Postman 刪除數據庫資料</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E9%80%8F%E9%81%8E-Postman-%E5%88%AA%E9%99%A4%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E9%80%8F%E9%81%8E-Postman-%E5%88%AA%E9%99%A4%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99/</guid><description>透過 Postman 刪除數據庫資料 (API) [[HTTP request]]：DELETE
除了用 Postman 發出 delete 請求之外，也可以用[[表單更新數據庫既有資料]]的方法刪除
1 2 3 4 5 6 7 8 9 10 11 app.</description></item><item><title>通用的 Validators</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/%E9%80%9A%E7%94%A8%E7%9A%84-Validators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/%E9%80%9A%E7%94%A8%E7%9A%84-Validators/</guid><description>通用的 Validators 所有 [[Schema Type]] 都可以用：
[[required]]：必填 Default：預設值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 另一種寫法 cost studentSchema = new mongoose.</description></item><item><title>進入 Tiktok 的過程與往國外發展該如何精進自己</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/%E5%A4%A7%E7%A5%9E%E4%BE%86%E5%85%AD%E8%A7%92/%E9%80%B2%E5%85%A5-Tiktok-%E7%9A%84%E9%81%8E%E7%A8%8B%E8%88%87%E5%BE%80%E5%9C%8B%E5%A4%96%E7%99%BC%E5%B1%95%E8%A9%B2%E5%A6%82%E4%BD%95%E7%B2%BE%E9%80%B2%E8%87%AA%E5%B7%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%89%8D%E7%AB%AF/%E5%A4%A7%E7%A5%9E%E4%BE%86%E5%85%AD%E8%A7%92/%E9%80%B2%E5%85%A5-Tiktok-%E7%9A%84%E9%81%8E%E7%A8%8B%E8%88%87%E5%BE%80%E5%9C%8B%E5%A4%96%E7%99%BC%E5%B1%95%E8%A9%B2%E5%A6%82%E4%BD%95%E7%B2%BE%E9%80%B2%E8%87%AA%E5%B7%B1/</guid><description>進入 Tiktok 的過程與往國外發展該如何精進自己 講者：布魯斯 TikTok 前端工程師
講者課程 Bootstrap5 Tailwind CSS 組合包
目錄 如何成為前端工程師 tiktok面試流程 前端工程師的兩階段 英文能力？ 對 leetcode 的看法 前端履歷 不是盲目的努力 緊張的覺得自己不夠好，盲目的努力會累 如果目標明確，就算失敗，過程也會有意義 那些過程會創造出不同的可能性</description></item><item><title>運算</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/%E9%81%8B%E7%AE%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/%E9%81%8B%E7%AE%97/</guid><description>運算</description></item><item><title>運算符號 numbers operators</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/%E9%81%8B%E7%AE%97%E7%AC%A6%E8%99%9F-numbers-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/%E9%81%8B%E7%AE%97%E7%AC%A6%E8%99%9F-numbers-operators/</guid><description>運算 比較運算子 =,&amp;lt;=,&amp;gt;,&amp;lt;,!==,!=
==：類型可不同，但值相同 ===：完全相同 =：宣告用非比較 餘 remainder operator 1 17 % 3 // 答案：2 次方 power 1 7**4 // 答案：7 的 4 次方 ++ 之後 [[loop 迴圈]]會用到</description></item><item><title>遠端 Repository</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/%E9%81%A0%E7%AB%AF-Repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/%E9%81%A0%E7%AB%AF-Repository/</guid><description>遠端 Repository 連接遠端 repo 在 push 之前，git 只有在本機的 git 運作， 若資料要儲存在網路上，則需要連到遠端的 repo，有兩種方法
[[本機 Repository#進行版本控制]] -&amp;gt; [[git remote add]] [[git clone]]：[[遠端 Repository]] 下載 更新本機 repo 內容 多人協作時，有人更新了 repo （位於遠端）後使用 [[git pull]] 來更新本機的資料</description></item><item><title>選擇什麼方式登入</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E9%81%B8%E6%93%87%E4%BB%80%E9%BA%BC%E6%96%B9%E5%BC%8F%E7%99%BB%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E9%81%B8%E6%93%87%E4%BB%80%E9%BA%BC%E6%96%B9%E5%BC%8F%E7%99%BB%E5%85%A5/</guid><description>選擇什麼方式登入 請求包含/auth/login ？[[Local Login]] 包含/auth/google ？[[Google Login]]</description></item><item><title>還沒建立前端前，用 Postman POST 請求</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E9%82%84%E6%B2%92%E5%BB%BA%E7%AB%8B%E5%89%8D%E7%AB%AF%E5%89%8D%E7%94%A8-Postman-POST-%E8%AB%8B%E6%B1%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E9%82%84%E6%B2%92%E5%BB%BA%E7%AB%8B%E5%89%8D%E7%AB%AF%E5%89%8D%E7%94%A8-Postman-POST-%E8%AB%8B%E6%B1%82/</guid><description>還沒建立前端前，用 Postman POST 請求 在後端測試（登入系統）的時候，可以用 Postman 來發出請求看看 Body -&amp;gt; raw -&amp;gt; 格式選 JSON 來發出</description></item><item><title>邏輯運算子</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90/</guid><description>邏輯運算子 AND｜&amp;amp;&amp;amp; OR｜|| NOT｜! #js #math #logic</description></item><item><title>關注點分離(SoC)</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2SoC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/Vue/%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2SoC/</guid><description>關注點分離 Separation of concerns，SoC
#js #vue #Soc</description></item><item><title>陣列的循環 for, forEach, map</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E9%99%A3%E5%88%97%E7%9A%84%E5%BE%AA%E7%92%B0-for-forEach-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E9%99%A3%E5%88%97%E7%9A%84%E5%BE%AA%E7%92%B0-for-forEach-map/</guid><description>陣列的循環 for forEach({callback function}) map() [[判定]] 比較 特性 for forEach() map() 更動原陣列 O X X 分別 log 出更改後的元素 X O - return 更動後新陣列（存到變數） X X O 中斷循環 O X - for 1 2 3 4 5 6 7 let ary = [1, 2, 3]; for (let element of ary) { console.</description></item><item><title>電腦科技的應用：加密</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/%E9%9B%BB%E8%85%A6%E7%A7%91%E6%8A%80%E7%9A%84%E6%87%89%E7%94%A8%E5%8A%A0%E5%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/%E9%9B%BB%E8%85%A6%E7%A7%91%E6%8A%80%E7%9A%84%E6%87%89%E7%94%A8%E5%8A%A0%E5%AF%86/</guid><description>電腦科技的應用：加密 嘗試登入時，伺服器會加密我們的密碼 線上交易時，內容都會被加密（RSA, ECC 數學上（暴力破解）很難被破解（不會提到）） 傳送 email 時，也需要加密 #cryptogrphy</description></item><item><title>預設參數</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E9%A0%90%E8%A8%AD%E5%8F%83%E6%95%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E9%A0%90%E8%A8%AD%E5%8F%83%E6%95%B8/</guid><description>預設參數 function 可以預設 argument 的 value，不需要每次呼叫都重填
1 2 3 4 5 function sum(a, b = 2) { return a + b; } sum(2); #js #function</description></item><item><title>類型轉換</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E9%A1%9E%E5%9E%8B%E8%BD%89%E6%8F%9B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E9%A1%9E%E5%9E%8B%E8%BD%89%E6%8F%9B/</guid><description>類型轉換 [[typeof]]：辨識類型（除[[判斷是否為 Array]]） number method 不會改變原始值（進階的時候才會理解 primitive data types 為什麼不會被改變）
number.toString() {該數字}.toString()
number.toFixed(填入幾位數) 規定小數點幾位數
string string&amp;rsquo;s property length：長度 index：length - 1 個 string method slice() indexOf() toLowerCase() toUpperCase() split() Number(string) parseInt(string) （字串轉成整數） 1 2 3 // length: string&amp;#39;s property let str = &amp;#39;hello&amp;#39;; console.</description></item><item><title>麥克風</title><link>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/%E9%BA%A5%E5%85%8B%E9%A2%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://szyln.github.io/trustYourSecondBrain/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/%E9%BA%A5%E5%85%8B%E9%A2%A8/</guid><description>+48v 幻象關起來才能更動裝置
input +48 1點鐘方向（一半多一隔）
mac 輸出輸入 in： 64ch （要錄出去的聲音） 電腦＋人聲 2ch + interface
out：2ch（電腦的聲音的出口） LadioCast in 實體 interface input 麥克風：1 點鐘方向（一半多一隔） output 耳機：100%</description></item></channel></rss>