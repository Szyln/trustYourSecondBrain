{"/":{"title":"trustYourSecondBrain","content":"## 目錄\n- [All Notes](/notes)\n- [Setup-related Notes](/tags/setup)\n- [frontend](/frontend)\n\n\n- [React](frontend/React/React.md)\n\n\n- [quartz test](/frontend/test%20quartz/quartz%20test.md)\n- [test 2](/frontend/test%20quartz/test%202.md)","lastmodified":"2022-04-23T12:34:05.56886504Z","tags":null},"/frontend/":{"title":"_index","content":"---","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/rwd.demo":{"title":"rwd.demo","content":"#小組任務 #切版班 #homework \n`\u003cpicture\u003e`不知道可不可以用","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/vue-%E4%BD%9C%E6%A5%AD%E5%95%8F%E9%A1%8C":{"title":"vue 作業問題","content":"- [ ] axios 是要先匯入在一個 `\u003cscript\u003e` 然後再開一個 `\u003cscript\u003e` 寫指令ㄇ\n- [x] `${}`的方法在 {{}} 裡面也有嗎\n\n\nhref=\"`mailto:${ item.email }`\" 有混文字記得用[[Template literals (Template strings)]]\n\n:src=\"item.picture.large\" 只有點記法的話不用${}\n#vue","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w1":{"title":"w1","content":"以下為第一週個人履歷建議:\n\n1.body 設定的行高 36px 建議改成統一倍率 1.5。\n\n2. .dark 可以加上前綴 bg- ，這樣在修改時會比較容易分辨出是 背景顏色的 class","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w2-%E5%88%87%E7%89%88%E5%8A%A9%E6%95%99%E7%9B%B4%E6%92%AD":{"title":"w2 切版助教直播","content":"## 如何閱讀設計稿\n- 找出共通設定\n\t- 字體\n\t- 行高\n\t- 大小\n## 預設字體\n英文 \u003e linux \u003e MAC \u003e  Windows \u003e 基礎字體\n\n- 前面有讀完就不會載往後面讀了\n- 有兩個以上單字的字體需要用\"\"包起來\n- 縮寫 font 比較不好用，建議不用\n\n## 字體大小\n預設 16 px\n## line-height\n```\n// 這幾週幾乎都是這樣預定\nbody {\n\tline-height: 1.5\n}\n// 偶爾會這樣改\nh1, h2, h3, h4, h5, h6 {\n\tline-height: 1.2\n}\n```\n\n## 曖昧的語意\n字體的大小不一定代表h1, h2 的順序\n\n## 標籤上的宣告\n建議不要\n\n## 圖片的 class\n不要用編號\n\n## wrap\n放在所有東西之上，沒什麼必要\n\n## top bottom 選一個\n#切版 #助教","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w2.Joannes-Website":{"title":"w2.Joanne's Website","content":"# Joanne's Website 架構整理\n## base\n- body\n\t- text-center\n\t- italic\n\t- roboto,san-serif\n- h2\n## class\n- banner__\n\t- h1.banner__title\n\t\t- span.banner__tiltle-span\n\t- p.banner__para\n- content__\n\t- h2（不需要）\n\t- h3.content__title-sub\n\t- ul\u003eli*3.list-item\n\t\t- birth\n\t\t- school\n\t\t- ul.exp\n\t- p.content__para\n- card__\n\t- h3.card__title\n\t- img\n- fotter__\n\t- ul.footer__list\n\t- \n## component\n- ul.exp\u003eli*3\nbutton\n## util\n### bg\n-   dark\n\t-   color(設在bg同層)\n\n-   d-flex\n### text-color\n- text-light\t\n- text-dark\n### text-weight\n- medium\n- bold\n- black（不需要，直接寫在h1）\n\n\n## font-size\n\n-   20\n\t-   /30 / medium 500\n\t-   /42\n\t-   r_para\n\t-   h3.card-title\n-   24\n\t-   /42\n\t\t-   medium 500\n\t\t-   bold 700\n\t\t\n\t\t-   h1.banner__title-span\t      \n\t\t-   about__h3\n\t-   /36\n\t\t-   medium 500\n\t\t-   bold 700\n\t\t-   .banner__para\n\t\t-   .content__para\n\t\t-   footer__list-item\n-   64/84/medium\n\t-   h2.content__title\n\t-   h2.banner__para\n-   80/106\n\t-   h1.title\n\n## bg\n\n-   bg-dark\n\t-   color\n-   bg-light\n\t-   color\n\n\n\n\n\n## 助教指導\n-   [ ] 不同區塊用分開的 container \n\t-   container 語意：**將最重要的內容放在畫面中間**\n\t- [x]  gallary 的地方重複開了\n\t- [x]  可以觀看[第二週助教直播](https://courses.hexschool.com/courses/2020112/lectures/33513281)\n-  [x] font-weight 沒有 medium 的值，要用 500\n-   [x] .banner 建議依照設計稿設定高度 958px[slack對話](https://hexschool-share.slack.com/archives/C0201HR4W5P/p1625934891322900)），避免解析度不同時畫面跑掉\n-   [x] banner 內層可以不需使用 flex，元素本身就是由上而下排列的摟\n-   [x] 連結都可以嘗試設定 hover 效果，增加使用者體驗哦\n-  [x]  ul 子層只能是 li，建議將 .line 移出 ul 外哦\n-   [x] 紅色圓點也可以嘗試使用偽元素來設計\n\n\n\n#homework #設計稿整理","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w3.glass":{"title":"w3.glass","content":"電腦 | 平板 | 手機 | 位置 |\n|-|-|-|-|\n72|32|same|index-subContent-2partTitle|\n64|48|32/72(2)|index-banner\n48|32/.15|24/48(2)|index-content-title\n48/80|same|same|page-title|\n48|32/.15|20/48(2.4)|index-subContent-Title\n48|28/72|same|index-subContent-3partTitle\n36|20|16/30(1.875)|index-banner, footer\n24|same|same|index-content-item-title|\n20|same|same|nav|\n20|16|same|form-p|\n16|same|same|message-card-body,footer(預設)\n16|14|same|form-label,submit-btn\n16|same|14|copyright\n14|same|same|message-card-header, message-card-footer\n16|same|same|index-content-item-p|\n24/30|16/30|14/30|shop-select-label|\n18/26|16/24|14/24|shop-select-input|\n24|16|same|shop-card-header|\n20|14|same|shop-card-body|\n19/27|14|same|shop-card-btn\n\n\n用streched link 調整 nav 不知道好不好\n\n## layout\n- index-layout\n\t- index-nav\n- product-layout\n\t- page-nav\n\t- product-sub-nav\n\t- product-title\n- info-layout\n\t- page-nav\n\t- info-title\n- blog-layout\n\t- page-nav\n\t- blog-sub-nav\n\t- info-title\n-  articalLayout\n\t- blog-title\n\n## partial layout\nindex-nav\npage-nav\nproduct-sub-nav\nblog-sub-nav\nproduct-title\ninfo-title\n\n\n### index\n#### h1\nlogo\n#### header\nnavbar\n\n\n### product\n#### h1\nproduct-title\n#### header\nnavbar\nproduct-nav\n\n### shop\n#### h1\ninfo-title\n#### header\nnavbar\n\n### blog\n#### h1\ninfo-title\n#### header\nnavbar\nblog-nav\n\n##### **這邊以 Lv3 檢視並提供幾點建議：**\n\n**整體：**\n\n- [ ]   一開始 PC 版 container 就已經有設定左右 padding 了，之後就可以不需再設定一次摟 ~（(max-width: 768px)、(max-width: 576px)）\n\n  \n\n**細節：**\n\n- [x]   .navbar-title 可以不需使用 align-self: stretch\n- [x]   在手機版時，banner 背景圖片可以嘗試換成 [較小張的圖片](https://github.com/hexschool/webLayoutTraining1st/blob/master/week3/banner-sm.png) 哦\n- [x]   .index-feature 可以不需設定 margin-bottom。另外這邊可以嘗試使用 ul li 結構哦\n- [x]   「經典系列鏡框」也可以嘗試使用 ul li 結構哦\n- [x]   .feedback-card__info 非列表，可以不需使用 ul li 結構。顧客名稱可以使用 h3 標題標籤，其餘可以使用 p 標籤\n- [x]   border: 0 1px 1px 1px solid #DEE2E6; border 沒有這種寫法哦\n- [x]   「確認送出」按鈕依照設計稿寬度應為 50% 哦\n\n\n## [](https://hackmd.io/48BTVPQVR_y4jq2E0PFHXQ?view#Sz \"Sz\")[Sz](https://github.com/Szyln/slicing.w4.glasses)\n\n1. [ ]  不建議叫做 import 資料夾名稱，會建議拉出來在第一層上，import 這名稱比較像是外部套件，若是載入外部套件 SCSS，會使用 vendor 的名稱\n2. [ ]  變數嘗試得不錯，如果[這裡](https://github.com/Szyln/slicing.w4.glasses/blob/main/app/assets/style/import/abstract/_variables.scss#L3-L4)使用率不高，建議可不用成變成變數\n3. [ ]  mixin 嘗試得不錯\n4. [ ]  base 資料夾不適合放進 reset.scss\n5. [ ]  _length.scss 比較合適叫做 _sizing.scss，可以觀看此[區](https://bootstrap5.hexschool.com/docs/5.0/utilities/sizing/)\n6. [ ]  如果有用到 BEM，.feedback-card，請叫做 .feedbackCard\n7. [ ]  以前會推崇有 theme.scss，但自從有了 util 概念後，其實你 theme 資料夾裡面都可稱為是 util 設計\n\n\n\n\n\nw4\n**整體：**\n\n- [ ]   手機版型時 container 寬度應為 375px（345+30）\n- [ ]   「確認送出」按鈕可以設定 cursor: pointer; 當滑過去時可以出現小手點選\n- [ ]   已經有在 logo 使用 h1，各個分頁標題建議都可以改為 h2 哦\n\n  \n\n**系列鏡框：**\n\n- [ ]   .banner-product 可以隨著斷點更換高度哦\n- [ ]   .product-version 為可以點選的設計，可以使用 a 或 button 標籤哦\n- [ ]   .pagination 可以嘗試使用 flex 技巧置中，可以不需設定寬度哦\n\n  \n\n**門市據點：**\n\n- [ ]   電話可以使用 a 標籤，讓使用者可以點選並開啟相應功能\n- [ ]   「詳細資訊」可以使用 a 標籤，讓使用者可以點選並連至門市據點詳細頁面\n\n  \n\n**這邊回覆同學的問題：**\n\n**Q1. 在上傳時遇到了一個問題是，在 VS code 即時預覽時，設定在 layout 的 head 裡面的 favicon 有跑出來，但上傳之後就看不到，請問我該更改哪個部分呢？**\n\n- [ ] **＞** 這邊觀看是同學的路徑問題哦 ~ 改為相對路徑就可以哩！\n\n  \n\n**Q2. 首頁的「經典系列鏡框」的部份，我有嘗試設定讓 link 效果可以擴展到整個 li 都吃得到效果，但在切到手機版斷點之後， link 效果就只限定在字的範圍了，想詢問如何更正？**\n\n- [ ] **＞** 將 .index-classic__title 設定 width: 100%; height: 100%，再使用 flex 技巧將文字置中就可以哩 ~","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w3.glasses-%E5%8A%A9%E6%95%99%E7%9B%B4%E6%92%AD":{"title":"w3.glasses 助教直播","content":"# w3.glasses 助教直播\n## container 設定\ncss版本\n![](https://i.imgur.com/162fdwy.png)\nscss版本\n![](https://i.imgur.com/LcOYhTj.png)\n\n[開始覺得我是誰我在哪的請先讀OOCSS](https://hsiangfeng.github.io/css/20200517/168089779/)\n\n* 只能設定px，不可以%\n* margin: 0 auto 要一起設定\n* container 不能加其他內容\n* 加保險不如先搞清楚到底下了什麼XD\n* 斷點一定比 container 大\n* **一開始就先設定好 container！**\n## gutter\n網格的間距\npadding是gutter除2\n\n\u003eGutters 是介於欄位之間的間隙，經水平方向的 padding 產生。 我們在每一欄設置 padding-right 與 padding-left ，並使用負值的 margin 來抵銷每行的開頭與結尾以對齊網格內容。\n\u003e[name=引用 bootstrap]\n### gutter問題\n\u003e container的那個padding跟gutter的寬度不一定會一樣嗎\n\n看規範\n\n\n## reset\n```sass=\nimg{\n    max-width: 100%;\n    height: auto;\n    vertical-align:middle; // display: block;\n}\n```\n\n\n## container 裡面的內容物\ncontainer 是設定 max-width\n內容物是%數\n\n\n\n## RWD 寫的順序\n先寫好整個響應式變化再往下寫\n範例\n![](https://i.imgur.com/5InNx6N.png)\n手機載具用絕對相對位置\n\n\n## HTML 5 語意標籤\n\n### section\n一定要有標籤\n\n### aside\n關連度較低的部份\n廣告、篩選工具等等等\n刪除後也沒關係的內容（像 rwd 改為欄位較少的時候）\n\n## 無語意標籤\n![](https://i.imgur.com/AnTRBb0.png)\n![](https://i.imgur.com/XyesS1B.png)\n\ndiv divider\n\n## link 的 padding\n點擊體驗\n[第三週講義補充記得看](https://hackmd.io/@hexschool/rJNtWj0pu#%E5%BD%B1%E9%9F%B3%E8%A7%80%E5%BF%B5%E8%A3%9C%E5%85%85)\n### 動線設計\n欄位減少時，次要資訊要做取捨\n#### 少即是多\n同樣的元素，不同載具時的資訊量要做取捨\n### 斷點時機\n不同載具都有良好的視覺效果（易讀性）\n以行寬度為例：舒適的行寬度\n### 點擊範圍\n44px 原則\n給指腹 44px 以上的空間點選\n### 斷點元素\n同個區塊，不一定用同樣形式呈現\n例如：navbar toggle\n### 載具特性\ntouch \u0026 hover\n\n## icon\n記得找到 icon 的 外層 XD\n\n## 圖片取代文字的疑問\n[隱藏的文字與連結](https://developers.google.com/search/docs/advanced/guidelines/hidden-text-links)\n[Google 圖片最佳做法](https://developers.google.com/search/docs/advanced/guidelines/google-images)\n\n#切版 #助教 #week2","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w5.form":{"title":"w5.form","content":"-   建議可以 h1 用圖片來取代文字，可以參考[連結](https://ithelp.ithome.com.tw/articles/10193599)。( Admin 文字則可以修改為 h2 )\n-   左下角的 [andy0401@mail.com](mailto:andy0401@mail.com) 建議可以使用 a 標籤，mail 可以使用 a:mail，寫成如下，當使用者透過點擊該區塊時，就會自動開啟相對功能：\n\n\u003cli\u003eMail：\u003ca href=\"mailto:xxxd@hexschool.com\"\u003exxxd@hexschool.com\u003c/a\u003e\u003c/li\u003e\n\n-   綠色按鈕可以使用 success 就好。( 這一週的作業不會修改到變數 )。\n-   按鈕可以使用像是 .btn-outline-success 就好，不需要加上 .text-success。不然 hover 時會無法改變顏色唷。\n-   「Send Verification Mail」與「Deactivate This Account」按鈕高度要再調整一下喔，設計稿是 16px。\n-   #adminInfo 裡面不會使用到 ul \u003e li 結構唷，如[圖片](https://imgur.com/a/tzzk7c1)。\n-   表單 .table 可以加上 .table-hover 來產生 hover 效果。","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E4%BD%9C%E6%A5%AD/w6":{"title":"w6","content":"[助教講義](https://quip.com/6UqcAvxsVH9G)","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E5%89%8D%E7%AB%AF%E7%B2%BE%E7%A5%9E":{"title":"前端精神","content":"# 好的網站該追求什麼？\n- 效能\n- 可維護性\n- 可讀性\n\n#goal","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E5%8F%83%E8%80%83%E7%B6%B2%E7%AB%99":{"title":"參考網站","content":"https://stock.pulpxstyle.com/\nhttps://www.haconiwa-mag.com/design/2021/07/saikin-web-2021-07/","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E6%8E%A5%E6%A1%88%E5%A5%BD%E5%A5%BD%E8%B3%BA":{"title":"接案好好賺？","content":"[下班接案好好賺？](https://hackmd.io/8W4IHr_gTpKSxhuezCiIJA)\n\n## 喜歡接案？還是錢？\n想要全職接案或是創業會建議接案\n- 接案的技能跟想找更好的工作要的內容不太一樣\n- 接案技術在廣不在精\n\n\n\n## 類型\n- 純切版：幾千到幾萬\n- 前端專案：需要設計稿、api文件，幾萬～幾十萬\n- 功能插件，製作api（\n- 全站製作，百萬以上（團隊）\n\n## 地雷\n- 不要低價\n- 客戶的需求很模糊，可以幫他分析，分到他最划算，我們也不用做太多多餘的功能\n- 客戶不會知道專案的難度\n- 時辰評估很重要\n- 有合約問題 → 律師免費諮詢\n- 專案管理的能力（可能有很多個夥伴一起做、跟窗口的溝通）\n\n- 成本在溝通跟修改，不是本體\n- 合約很重要不要亂簽\n- 不要相信人XD\n- 爛 CODE 不要碰，沒看到不要碰\n- 包三層都還算正常，四成以上就不要了\n- 每個案子都很趕，趕的就是不要接（？）\n\t- 給對方工作天，不要給日期（會拖（月單位））\n- 對方的高標準，要評估自己的時間真的能不能接\n- 不付錢 → 司法院\n\t- 人間蒸發：要先[查清楚](https://law.judicial.gov.tw/FJUD/default.aspx)對方案底\n\t- 支付命令、請求給付通知、借款\n\t- 喜歡亂比價\n- 不可能 100% 沒有 bug\n- 沉沒成本，沒有辦法挽回的損失，就認賠殺出，放棄這個案子吧\n\n## 小知識\n### 如何領錢\n小錢：可能直接匯款\n希望開發票：勞務報酬單\n百萬級：可能還沒開公司，但幾乎就是要公司級才能處理\n合約怎麼擬：找類似公司的合約來參考、諮詢律師或是進階的客製化\n\n## 實戰\n### 報價技巧\n一個小時應該賺多少？\n```\n時薪200 * 預估工時100 * 3(交通、溝通、事後修改) +（殺價、機車、對方來來回回、妥協不妥協）\n```\n### 合約\n失敗要你賠超過你的報酬以上就是無效的合約\n### 業主的一百萬個需求\n- 怎樣都好像不太對 → 加價、折衷、壓修改（細修）時間、間隔、次數\n- 不理想的客戶，完成案子之後你也不會喜歡他\n\n- 主動給他自己能做的選擇，不要讓他開放式回答\n- 親友的案子要馬不收錢要馬不要接（友情與錢，不要冒險）\n#### 施壓\n- 講「不收錢了，不做了」對方也很有壓力，對方也會願意退讓，不用什麼都自己揹\n- 請對方整個團隊出來一起談\n\n## 如何接案\n應徵：給技術\n接案：給類型、風格\n\n\n## 管道\n- 外包社群（比較好） \u003e 外包網（雷）\n- 多丟點自己的作品、打廣告\n- 認識 PM、企劃、老闆、業務（？？？？）\n\t- 幫忙看看→接起來了（？）\n- 提供一些新功能\n\n- 也不用急著接，可以先去理解、認識人\n\n## 設立公司\n\n## 開發流程\n- 大部分都瀑布流\n- 敏捷（不可能）","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/%E6%8E%A5%E6%A1%88%E7%9B%B8%E9%97%9C":{"title":"接案相關","content":"- [[接案好好賺？]]","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E4%BD%9C%E5%93%81%E8%88%87%E7%9B%AE%E6%A8%99/roadmap-%E5%AD%B8%E7%BF%92%E8%B7%AF%E5%BE%91":{"title":"roadmap 學習路徑","content":"https://roadmap.sh/frontend/resources","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%88%A9%E7%94%A8%E6%90%9C%E5%B0%8B%E5%8A%9F%E8%83%BD%E5%BB%BA%E7%AB%8B%E7%9B%AE%E9%8C%84":{"title":"利用搜尋功能建立目錄","content":"# 利用搜尋功能建立目錄\n\n![](https://i.imgur.com/hVOROPt.png)\nWiki 式連結的格式（ `[[]]` ）呈現連接狀態，可以直接拿來當目錄\n![](https://i.imgur.com/qxpprGz.png)\n\n#obsidian","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%88%AA%E9%99%A4%E7%B7%9A%E5%AF%AB%E6%B3%95-~~%E5%85%A7%E6%96%87%E5%85%A7%E6%96%87~~":{"title":"刪除線寫法 ~~內文內文~~","content":"~~內文內文~~\n\n#markdown #obsidian","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E5%B5%8C%E5%85%A5%E5%85%B6%E4%BB%96-markdown-%E6%AA%94%E6%A1%88":{"title":"嵌入其他 markdown 檔案","content":"# 嵌入其他 markdown 檔案\n\n![[我是其他檔案]]\n#obsidian","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E6%88%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%AA%94%E6%A1%88":{"title":"我是其他檔案","content":"## 我是其他檔案\n\u003e使用 `![[檔名]]` 來嵌入","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/%E7%B5%A6-Markdown-%E6%AA%94%E6%A1%88%E6%96%B0%E5%A2%9E%E5%88%A5%E5%90%8Dalias":{"title":"給 Markdown 檔案新增別名：alias","content":"---","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Hotkey++":{"title":"Hotkey++","content":"# Hotkey++\n\n複製當前行\n```\noption + shift + 方向鍵\n```\n\n#obsidian","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Markdown-Table-Generator":{"title":"Markdown Table Generator","content":"[Table Generator](https://www.tablesgenerator.com/markdown_tables)","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obisidian-%E5%8A%9F%E8%83%BD":{"title":"Obisidian 功能","content":"- 複製搜尋結果\n\t- 建議加上 tag 才不會造成過大的連結性\n\n\n#obsidian","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-%E5%BF%AB%E6%8D%B7%E9%8D%B5":{"title":"Obsidian 快捷鍵","content":"---\n`cmd-O` 快速搜尋\n`cmd-E` 切換預覽 / 編輯\n`cmd-shift-F` 搜尋\n`cmd-opt-方向鍵`返回\n`cmd-點擊`另開 group 顯示\n自訂：\n`opt + 方向鍵`與上一行互換\n\nIf you have the [[Command palette]] enabled, You can use `Ctrl/Cmd+P` to bring it up, which will show you all currently available commands and their keyboard shortcuts.\n\nMost keyboard shortcuts can be customized for your needs in Settings =\u003e Hotkeys. \n\nThe default keyboard shortcuts are listed below. \n\nFunction                        |   | Shortcut","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-%E9%81%A0%E7%AB%AF%E7%99%BC%E4%BD%88%E7%9B%B8%E9%97%9C":{"title":"Obsidian 遠端、發佈相關","content":"---","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Obsidian-Git":{"title":"Obsidian Git","content":"# Obsidian Git\n1. [[使用 gulp#git]]（git 的部份就好）\n 1. [Day 26 : 插件篇 05 — 做好筆記備份，使用 Obsidian Git自動備份筆記到 Github](https://ithelp.ithome.com.tw/articles/10280373)\n2. 可能會要求金鑰，開終端機寫比較快（帳號是帳號，密碼輸金鑰）\n\n## 遇到問題\n必須一直重新登入：\n- [裝GCM(沒有解決)](https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git)\n- [GCM repo](https://github.com/GitCredentialManager/git-credential-manager)\n- 可能重開機可以解決救命到底是什麼時候解決ㄉ\n\n[[Push, Commit 的人不是我 why]]\n\n#obsidian #git","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/Obsidian/Push-Commit-%E7%9A%84%E4%BA%BA%E4%B8%8D%E6%98%AF%E6%88%91-why":{"title":"Push, Commit 的人不是我 why","content":"# Push 的人不是我 why\n\u003e[Why are my commits linked to the wrong user?](https://docs.github.com/en/pull-requests/committing-changes-to-your-project/troubleshooting-commits/why-are-my-commits-linked-to-the-wrong-user)\n\n\n\n1. 把 github 的設定內的 email 貼到以下指令內\n![](https://i.imgur.com/lq40cUO.png)\n```shell\n$ git config --global user.email \"\u003c設定內的email\u003e\"\n```\n2. 然後檢查一下\n```shell\n$ git config --global user.email\nemail@example.com\n```\n\n## 還是怪怪的話再做這個\n[Adding an email address to your GitHub account](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-email-preferences/adding-an-email-address-to-your-github-account)\n\n#git #obsidian","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/Editor-%E5%BF%AB%E6%8D%B7%E9%8D%B5":{"title":"Editor 快捷鍵","content":"`ctrl` / `cmd` +\n- P：找檔案\n- K+W 關所有檔案\n- N 開新檔（已使用 advance file 取代\n- 1,2 切換 focus group\n\n`ctrl`/`cmd` +` shift` +\n- T：開啟最近關閉檔案\n- [ 跟 ]：左右分頁\nalt(option) + shift\n- 上下鍵：duplicate\n- \n\n\n最後可能會想用 terminal\n\n## 第一週\n### VS (mac)\n- [x] 開啟檔案：`ctrl + P`\n選檔案後按`enter`, (想開在不同 group 就 `ctrl + enter`)\n- [x] 切換正在使用的 group ：`ctl + 1, 2` (mac)\n- [x] live server\n    - mac:`ctrl + L + O`\n    - windows: `Alt + Shift + B`\n    - linux:`ctrl + L  ctrl + O`\n- [x] 左側 bar 開關： `ctrl + B`\n- [x] VS code 裡面開 Terminal ：`^+`\n    - windows：`F1`\n- [x] palette: `cmd + shift + P`\n- [x] Duplicate 該行到上下行：`alt(option) + shift + 上下鍵`\n\n\n\n### emmet \n\n\n- [x] [Update Image Size](https://docs.emmet.io/actions/update-image-size/)：直接用 `cmd + shift + P` 輸入\n可以自動更新圖片的 width, height（在 html, css 都適用\n\n\u003e height 寫與不寫的差別，是差在 [loading 的時候](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img)\n\u003e 如果有寫，html 會預留 img 的欄位\n\u003e 圖片還沒 loading 完之前，以下的內容才不會擠上來\n\u003e [name=Sz 分享][color=#BB84F5] \n\u003e\u003e Use both width and height to set the intrinsic size of the image, allowing it to take up space before it loads, to mitigate content layout shifts. \n\u003e\u003e [name= MDN]\n\n\n- [x] wrap with abbreviation -\u003e 自訂 `cmd + shift + a`\n- [x] merge line -\u003e 直接用 `cmd + shift + P` 輸入\n- [ ] [Increment/Decrement Number](https://docs.emmet.io/actions/inc-dec-number/)\n    * 這好酷，我還以為我在用 ps\n    * 可以用快捷鍵以 0.1, 1, 10 為單位加減\n    * 目前還沒想到要用哪個快捷鍵好，暫時不用\n- [ ] [Select Item](https://docs.emmet.io/actions/select-item/)：`ctrl + shift + , and .`\n    * 可以直接左右移動選取標籤\n\n\n#vscode","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/mac-%E5%8F%AA%E6%9C%89-vs-%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%B8%8D%E8%83%BD%E6%89%93%E5%B0%8F%E5%AF%AB%E8%8B%B1%E6%96%87":{"title":"mac 只有 vs 終端機不能打小寫英文","content":"[VScodeのターミナル機能内だけ、英字を入力すると大文字が出てくる](https://teratail.com/questions/223865)","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/VsCode/vscode-%E8%87%AA%E5%8B%95%E6%8F%9B%E8%A1%8C-word-wrap":{"title":"vscode 自動換行 word wrap","content":"opt+z\n[Visual Studio Code | 自動換行設定教學](https://medium.com/@l0418ya26/visual-studio-code-%E8%87%AA%E5%8B%95%E6%8F%9B%E8%A1%8C%E8%A8%AD%E5%AE%9A%E6%95%99%E5%AD%B8-35c0732bb83e)\n\n\n#vscode","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/mac/%E9%99%A4%E9%8C%AF/%E7%B3%BB%E7%B5%B1%E5%B8%B3%E8%99%9F":{"title":"系統帳號","content":"https://apple.stackexchange.com/questions/340155/account-is-already-signed-in-to-icloud-in-mojave-but-its-not\n\n#mac #bug","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/mac/mac-%E5%BF%AB%E6%8D%B7%E9%8D%B5":{"title":"mac 快捷鍵","content":"# 顯示隱藏檔案 cmd+shift+.\n```\ncmd+shift+.\n```\n\n對該資料`cmd+shift+.`就可以看到隱藏資料夾囉（[[MAC]]）\n[MAC 叫出隱藏檔案](https://macuknow.com/2017/08/26/1428/%e4%b8%89%e6%8b%9b%e8%ae%93-mac-%e9%a1%af%e7%a4%ba%e5%87%ba%e9%9a%b1%e8%97%8f%e6%aa%94%e6%a1%88/)\n\n\n#mac","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/%E4%B8%AD%E6%96%B7%E5%9F%B7%E8%A1%8C":{"title":"中斷執行","content":"`ctrl + C `（mac）","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4":{"title":"常用指令","content":"# 常用指令\n- cd：移動到該資料夾\n- touch：新增檔案\n- mkdir：新增資料夾\n- Is：顯示資料夾的內容清單\n- pwd：顯示路徑\n- 中斷執行\n- rm\n- rmdir\n\n## cd\nchange directory\n移動到該資料夾\n```\ncd 路徑\n```\n\n### 方法\n- 自行輸入\n- 拖曳資料夾進來\n- 直接對資料夾右鍵「用終端機開啟」\n\n## touch\n建立檔案\n````\ntouch index.html\n````\n\n## mkdir\nmake directory\n新增資料夾\n\n## Is\nlist all files\n顯示資料夾檔案\n\n## 中斷執行\n`ctrl + C `（不是 command）\n\n## pwd\nprint work directory\n顯示所在位置\n\n## rm\nremove file\n刪除檔案\n\n## rmdir\n#cmd #git #shell","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/Kernel":{"title":"Kernel","content":"# Kernel\n電腦核心\n\n## Shell\n與 kernel 互動的 interface（介面），分為圖形化、指令兩種介面\n- GUI(graphical user interface)\n- CMD(command prompt)\n\n\n\n#git #kernel #shell #cmd","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/Unix":{"title":"Unix","content":"# Unix\n作業系統\n- windows\n- MacOS\n- ChromeOS\n- Linux\n\n## 指令\nwindows 沒有 unix 指令，必須多下載 unix 指令\nmac, linux 有\n\n#git #kernel #shell #cmd #computer","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/cd":{"title":"cd","content":"# cd\n\n移動到資料夾\n進得了資料夾，才能對他版本控制\n\n`cd 拖曳資料夾於此`","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/ls":{"title":"ls","content":"顯示資料夾檔案","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/mkdir":{"title":"mkdir","content":"新增資料夾","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E7%A1%AC%E9%AB%94%E7%94%9F%E7%94%A2%E5%8A%9B/terminal/touch":{"title":"touch","content":"建立檔案 touch\n```shell\ntouch index.html\n```","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/%E6%AD%8C%E5%96%AE":{"title":"歌單","content":"","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/%E9%BA%A5%E5%85%8B%E9%A2%A8":{"title":"麥克風","content":"+48v 幻象關起來才能更動裝置\n\ninput +48 1點鐘方向（一半多一隔）\n\n\n## mac\n## 輸出輸入\n### in： 64ch （要錄出去的聲音）\n電腦＋人聲\n2ch + interface\n\n### out：2ch（電腦的聲音的出口）\n## LadioCast\n### in\n#### 實體 interface\ninput 麥克風：1 點鐘方向（一半多一隔）\noutput 耳機：100%\n\n#### 電腦聲音 2ch\nspotify：100%\n電腦：100%\n\n### out\n#### 64ch\n送出去的聲音，不要爆音\n![](https://i.imgur.com/YR15SSk.png)\n中間拉桿不影響原本聲音，\n#### interface\n\nhttps://www.plurk.com/p/nvmvxf","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/jitsi":{"title":"jitsi","content":"# jitsi 低延遲設定（台灣地區）\n## 推薦給音樂相關的語音、視訊交流\n- 對想開歌窗的人來說，jitsi 可以直接輸出瀏覽器音效（chrome 限定）\n- jitsi 是開源軟體，比較不用被大公司綁架\n- 就算沒有知識背景，也可以用現成的台灣伺服器使用，實現低延遲效果\n- 音質可以自己設定\n- \n## 其他選擇\n 想開歌窗需要權衡很多要素\n - 錢\n - 方便性\n - 使用限制\n - 品質\n\n|使用軟體|環境建置（伴奏）|使用限制|品質|參加簡單度|\n|-|-|-|-|-|-|\n|discord|自助+閹割*|需註冊|音質差*|需註冊|\n|直播|自助|一人主持|佳（可自訂）|無腦|\n|jitsi|有內建(chrome)|需搭配其他平台來邀請他人|佳（可自訂）|無腦|\n|其他會議軟體|自助|-|不可調整|-|\n\n\u003e註：discord 可以透過升級（付費）的方法取得較高音質的輸出\n\n條列一下[用公開的 Jitsi 服務也可以上遠端音樂課？](https://blog.abysm.org/2021/06/hd-audio-using-public-jitsi-server/)提到的重點\n\n- 音質可調整\n- 有內建輸出瀏覽器音效功能（chrome限定）\n- 有台灣伺服器低延遲\n\n- jitsi 就算沒有自己架站的知識背景，也可以用現成\n\n\nconfig.audioQuality.stereo=true\n- `disableAP` ：以下三項全關\n- `disableAGC`：Auto Gain Control\n- `disableAEC`：Acoustic Echo Cancellation\n- `disableNS`：Noise Suppression（降噪）\n- `disableHPF`：Disables Highpass Filter\n\n\nconfig.audioQuality.opusMaxAverageBitrate=128000\nconfig.enableNoisyMicDetection=false\n\nhttps://jitsi.pdis.dev/唱兩首來打扣耐久#config.enableNoisyMicDetection=false\u0026config.stereo=true\u0026config.audioQuality.opusMaxAverageBitrate=92000\u0026config.p2p.enabled=false\u0026config.startAudioOnly=true\u0026config.prejoinPageEnabled=true\u0026config.enableWelcomePage=true","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/%E9%8C%84%E9%9F%B3/scrcpy":{"title":"scrcpy","content":"```\nscrcpy\n```\n對sndcpy資料夾（延遲很重\n```\n./sndcpy\n```","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/A-frame":{"title":"A-frame","content":"https://test.domojyun.net/MEMO/3D/aframejs.html","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Equalization":{"title":"Equalization","content":"---\n[Parametric Equalization](https://webtet.net/apcl/#/parametric)\n\n| EQ      | Sound                             |\n|","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E5%BB%BA%E7%AB%8B-Web-%E7%92%B0%E5%A2%83":{"title":"建立 Web 環境","content":"# 建立 Web 環境\n載點：[repo](https://github.com/resonance-audio/resonance-audio-web-sdk)\n\n## 引入\n### cdn\n```html\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/resonance-audio/build/resonance-audio.min.js\"\u003e\u003c/script\u003e\n```\n### 客製化\n```html\n\u003cscript src=\"node_modules/resonance-audio/build/resonance-audio.min.js\"\u003e\u003c/script\u003e\n```\n\n\n#vr #ar #spatial #audio #mixing #sound","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E7%94%A8-Resonance-Audio-%E9%96%8B%E7%99%BC":{"title":"用 Resonance Audio 開發","content":"# 用 Resonance Audio 開發\n\n\n## 可調整參數\n- 物件指向性質\n- 近場效應\n- Sound source spread\n- Geometry-based reverb\n-   Occlusions\n-   Recording of Ambisonic audio files\n\n## 效能\n靠著 ambisonic 格式來降低 cpu 運轉\n取代每個物件都模擬場景的狀況\n## 品質\nambisonic 解析度是可以調整的 (order) \n#vr #ar #spatial #audio #mixing #sound","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E7%B0%A1%E4%BB%8B":{"title":"簡介","content":"# 什麼是 Resonance Audio\nGoogle 發佈的多平台 spatial audio SDK\n透過模擬聲音物件如何\n\n- [[與人耳的互動 (HRTFs) - 事前知識#與人耳的互動]]\n- 與環境的互動\n\n互動[[與人耳的互動 (HRTFs) - 事前知識]]，來實現 AR, VR、 遊戲、影音的聲音效果\n\n## 支援格式\n-   Unity\n-   Unreal\n-   FMOD\n-   Wwise\n-   Web\n-   Digital Audio Workstation (DAW)\n-   Android\n-   iOS\n\n## 優點\n- 視覺化\n- 格式支援度高\n- 支援手機環境\n- 平價\n\n#vr #ar #spatial #audio #mixing #sound","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E8%88%87%E4%BA%BA%E8%80%B3%E7%9A%84%E4%BA%92%E5%8B%95-HRTFs-%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98":{"title":"與人耳的互動 (HRTFs) - 事前知識","content":"## 與人耳的互動 (HRTFs)\n真實情況下，聲音與人耳的互動，取決於他的水平與高度定位，以及耳朵內部的影響\n\n## 兩耳時間差 interaural time difference (ITD)\n- 水平\n- 辨別低頻聲音定位\n\n## 兩耳音量差 interaural level differences, (ILD)\n- head’s acoustic shadow\n- 兩耳聽到的音量會因為隔著一顆頭，所以聲音音量聽起來不一樣\n- 水平\n- 辨別高頻定位\n\n## 耳廓效應 Spectral effects\n除了上述兩項\n耳廓可以幫我們更完整立體的定位\n#vr #ar #spatial #audio #mixing #sound #事前知識","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/%E8%88%87%E7%92%B0%E5%A2%83%E7%9A%84%E4%BA%92%E5%8B%95-%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98":{"title":"與環境的互動 - 事前知識","content":"# 與環境的互動\n包含頭的移動與物件的移動\n- 頭部追蹤定位\n- 空間反射\n- 空間障礙物\n- 聲音物件指向性、發聲性質\n\n## 頭的移動\n### Head-mounted displays\n追蹤頭的移動\nResonance Audio 會以裝置的相反方向來呈現\n\n## 早期反射、殘響 Early reflections and reverb\n真實狀況下，聲波傳播時，只要碰上任何介面都會反彈，產生出複雜的混合狀態\nResonance Audio 將其拆分為三種狀態\n- Direct sound\n- Early reflections\n- Late reverb\n![](https://resonance-audio.github.io/resonance-audio/images/concepts/reflections.png)\n### 直達聲 Direct sound\n依照與聲音的距離，決定音量（衰減）大小\n### 早期反射 Early reflections\n可呈現空間大小、形狀\n\n### 晚期反射 Late reverb\n呈現整個空間的材質\n\n## 非直達聲音 Occlusion\n模擬物件與人耳中間有東西阻擋時的狀態\n變更高低頻狀態\n高頻比較容易受到阻擋而衰減\n\n## 聲音物件指向性 Directivity\n有時候發出聲音的物件通常帶有指向性，比如人講話，站對面聽聲音會比較大聲，站背後則比較小\n\n### 可調整參數  \n-   **Alpha**: Represents pattern shape. You can use cardiod, circular, or figure-eight shapes.\n-   **Sharpness**: Represents pattern width.\n\n## ambisonics\n透過這個格式來統整球體空間的聲音\n#vr #ar #spatial #audio #mixing #sound #事前知識","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Resonance-Audio/Audio-Design-%E6%8C%87%E5%8D%97":{"title":"Audio Design 指南","content":"## 聲音物件 Sound sources (point sources)\n一個發聲源，存在在空間中\n通常為 mono 的格式，透過設定聲音指向與聲音特性做表現\n製作時必須是一個乾檔，不包含任何環境效果\n透過聲音物件散佈於球體中，來達到環境音效\n\n## Ambisonic soundfields\nlight probes \u003c--\u003e空間視覺運算\nAmbisonic soundfields \u003c--\u003e空間聽覺運算\n運算在聽者的周遭球體空間\n可以解碼到 third-order Ambisonics\n\n由於這部份只會在受頭部旋轉影響，\n遠景的音效能達到最好的呈現\n#vr #ar #spatial #audio #mixing #sound","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/%E7%B0%A1%E4%BB%8B":{"title":"簡介","content":"# Spatial audio\nhttps://www.highfidelity.com/blog/what-is-spatial-audio\n\n可以實現聲音在真實空間內的所在的聲音技術\n如果聽者移動位置或角度，也會隨之調整\n\n## 運作\n使用技術 \n- HRTFs\n- 耳廓\n\n## 使用時機\n多聲場合\n[What If Zoom Had Spatial Audio?](https://www.youtube.com/watch?v=fWsPvzw5Z8M)\n[clubhouse](https://twitter.com/Clubhouse/status/1432014506247417860)\n\u003e[Cocktail Party Effect](https://www.youtube.com/watch?v=iO3jTl0WuS4)\n\u003e人類可以在一個吵雜的派對當中，只聽清楚一個感興趣的對話，不受其他聲音影響\n\n\n## 3D audio technology solutions\n [AirPods Pro](https://www.apple.com/airpods-pro/)有支援 dynamic head tracking\n \n ## [**Dolby Atmos**](https://www.dolby.com/technologies/dolby-atmos/)\n ### 混音工具\n -   Dolby Hardware and Rendering Unit (RMU)\n-   Dolby Master Suite\n-   [Dolby Atmos Production Suite](https://professional.dolby.com/content-creation/Dolby-Atmos-for-content-creators/)\n### 聆聽工具\n- 耳機\n- Dolby Atmos-enabled speakers\n\n\n## Auro-3D\n- channel-based：三層聲道\n- uncompressed PCM：音質比 atoms 好\n- Auro 9.1, 10.1（頭頂的）, 11.1（家庭）\n- Auro Max（劇院）\n### 三層聲道\n![](https://auro-3d.jp/assets/images/6about/head_kraken-c4d9041062.png)\n- top layer\n- height layer\n- lower layer\n\n## [**DTS:X**](https://dts.com/dtsx/)\n[# 想問一下YAMAHA的X DTS是什麼意思](https://www.mobile01.com/topicdetail.php?f=348\u0026t=6053105)\n- object-based\n- 開源\n\n## [**Sony 360 Reality Audio**](https://www.sony.net/Products/create360RA/?j-short=create360RA)\n- object-based\n- 耳機\n- 特殊喇叭\n- 主要針對音樂製作π","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/Ambisonics":{"title":"Ambisonics","content":"# Ambisonics 動手做\n## Ambisonics in Reaper\n[Ambisonics in Reaper](https://www.youtube.com/watch?v=fc5IXiR4KiQ)\n### Why don't you use Reaper?\n- 價格讚\n- ambisonic 領域中算蠻主流的\n- nuendo, ableton, pro tools 其實都可以做到（其他 daw 還是要查）\n\n\n## 目前有的工具類型\n受眾有兩個極端\n- 學術派（研究）\n- 製作派（劇場、音樂）\n\n導致尋找工具時，可以找到 \n- open source 完全免費（開源社區、研究）\n- 超貴的工具（有大廠支援）\n\n### free tools\n- [IEM](https://www.youtube.com/redirect?event=video_description\u0026redir_token=QUFFLUhqa3JrMUdmcEZmU1NmazE0YkZCR3JZUDg5Zmp0QXxBQ3Jtc0ttUm04ZlZFUmZZLWJVcGNJRk5kaEVYNHlHZUtIUTZ4S0ZkcV9EUnZuYlNReUI4X1Q1NUFYMlk2UWhhem9TamxrRmY2RXRtMWR3eVlXWkdQbWVHY1M3TTA0V2NPemwtaGZIOTFNV2V6a2YwX2I3eFdBUQ\u0026q=https%3A%2F%2Fplugins.iem.at%2F)\n\t- 7OA\n- [SPARTA](https://www.youtube.com/redirect?event=video_description\u0026redir_token=QUFFLUhqbUVoWWlId0JWZXlJOHR5YUowQVphVjJ4UXo4QXxBQ3Jtc0ttTlNjNk1tYmVhY1NvTmdKTmZUMlAyMlVEaDVlM2UwVTVyQWpKLV91OFl0NEo2Z3Zua041T2hBWmlYbjhRdG5GSFZfNXd3all3Q1pGNmtEVmkyMXl5STVYZDl3QTBhV1phZWdqNS1pUUZic3daS1NrQQ\u0026q=http%3A%2F%2Fresearch.spa.aalto.fi%2Fprojects%2Fsparta_vsts%2F)\n\t- 7OA\n- [ATK](https://www.ambisonictoolkit.net/)\n\t- FOA\n\n## workflow\t(ATK)\n![](https://www.ambisonictoolkit.net/assets/images/documentation/workflow/atk-network.png)\n### Author 生產\n讀取或產生 soundfield ，進行**編譯**\nCapture or synthesise an Ambisonic soundfield.\n\n### Image 加工\n對空間加工，使原物件產生原本沒有的互動效果\nSpatially filter an Ambisonic soundfield.\n\n### Monitor 監管\n監控產出符合聆聽者環境的效果\nPlayback or render an Ambisonic soundfield.\n## Reaper IEM 建置\n[IEM官方demo](https://www.youtube.com/watch?v=wTNe4P6sYTg\u0026list=PLLnvq7Y-dSoaEERYb3eIjdj2rJt1tYKL8\u0026index=1)\n[IEM官方詳細介紹](https://plugins.iem.at/docs/plugindescriptions/)\n### instrument track\n#### 物件導入到場景（stereo -\u003e ambisonic (7OA)）\nrouting -\u003e track channel -\u003e 64ch\n#### panner 讓物件真的動起來\nFX -\u003e IEM(stereo encoder)\n![](https://i.imgur.com/hGrn2wF.png)\n\n![](https://i.imgur.com/f6M5mHp.png)\n水平/垂直\n但只是導入到場景內，還是會只有 2ch，stereo encoder 是要讓 stereo 可以換成 ambisonic  \n\n### master track\n#### 場景\nrouting -\u003e track channel -\u003e 64ch（目前的 monitor 還是只有在 2ch ）\n\n#### decode\n如果沒有 decode 其實 master track 聆聽的結果是不會呈現 360 度的 \n nx head track waves\n ### 輸出 bounce\n - decode 要關掉\n \n\n\n\n## Reaper ATK 建置\n[atk+reaper+蚊子聲贊喔beeformat](https://youtu.be/ClgVMjczaFc) \n- Ambisonic Toolkit\n- FOA\n- 這個可以試試，decode 有 HRTFs preset\n- atk 官網有提供 sample 音檔\n\n### instrument track\nrouting -\u003e track channel -\u003e 4ch\n#### panner\nFX -\u003e ATK FOA Planewave \n![](https://i.imgur.com/XwGmZsm.png)\n\n可以再看官網的其他複雜建構\n#### 手動改變automation\n- 手繪\n- 錄製\n![](https://i.imgur.com/3tFOzH2.png)\n把 azimth 抓出來 autimation\n- letch\n### master track \nrouting -\u003e 4ch\n#### decode\n![](https://i.imgur.com/RXc1SHo.png)\nFX -\u003e ATK FOA Decode Binaural\n需要選 HRTF\n\n### 輸出\nmaster 的 fx (decode)記得關\n![](https://i.imgur.com/KqH9SyH.png)\n\n\n\n## Reaper ambiX 建置\n[ambiX給的文獻](http://www.matthiaskronlachner.com/wp-content/uploads/2013/01/ICSA2014_KronlachnerZotter_AmbisonicTransformations.pdf)\n[ambiX給的文獻2](https://lac.linuxaudio.org/2013/papers/51.pdf)\n### decode\n#### preset\nbinaural decoder presets：如果想從耳機聽(含 decoder matrices + binaural loudspeaker impulse responses)\n```\nWindows 7/8: _C:\\Users\\username\\AppData\\Roaming\\ambix\\binaural_presets\\_  \nMacOS: _~/Library/ambix/binaural_presets/_  \nLinux: _~/ambix/binaural_presets/_\n```\n如果要自己做 preset，要自己建立 decoding matrix，可以用**Ambisonic Decoder Toolbox** by **Aaron Heller** 然而看起來爆幹難[[Source repo](https://bitbucket.org/ambidecodertoolbox/adt.git \"Ambisonic Decoder Toolbox Repository\")] [[LAC Article](http://lac.linuxaudio.org/2014/papers/17.pdf \"Ambisonic Decoder Toolbox Linux Audio Conference Article\")].\n## zylia zm-1 錄的\n這真的很誇張w\n[3OA的直升機](https://www.youtube.com/watch?v=RnpqaQB8b5k)\n- [ ] [直升機音效](https://soundbible.com/323-Military-Helicopter.html)（等等自己試試看）\n只有左右的定位，沒有辦法清楚表達「空間的反射」\n\n## logic pro X\n## Ambisonic data exchange formats\n[Ambisonic data exchange formats](https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats)\n### 混亂時期\n在早期的多軌錄音有過格式混亂的時期\n在研究 HOA 的系統時，並沒有一個統一的格式標準，而且在聲學中並還沒有導入太多有關球諧函數的概念，所以有些人透過化學、量子力學、電腦製圖等其他領域去設計格式，導致不同的研究雖然最終是在講同一件事但卻無法相容。\n### 格式必須的要件\n- [Component ordering](https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Component_ordering)\n-  [Normalisation](https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Normalisation)\n-  [Polarity](https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Polarity)\n#### Component ordering\n##### FuMa\n![](https://i.imgur.com/GKkWdEh.png)\n##### ACN\n![](https://i.imgur.com/evF1bgW.png)\nSN3D, N3D 都用這個\n#### Normalisation\n- maxN\n- SN3D\n#### Polarity\n### Reference table of layouts and normalisations\nFor Furse-Malham (and traditional B-format), sort by FuMa column and multiply the spherical harmonic by the maxN factor.\n-   For basic AmbiX, sort by ACN and use the SN3D factor.\n-   For extended AmbiX and all other combinations, good luck!\n### 檔案格式\n- `.amb`：FuMa\n- `.caf`： AmbiX\n### Ambisonic Channel Number (ACN)\n![](https://i.imgur.com/e9hD5Vj.png)\n\n為了未來有更高的 HOA，目前已經引入了 ACN(Ambisonic Channel Number) 這個公式\n目前已經廣泛運用在 SN3D, N3D 等格式中\n## SN3D\n[HOA Technical Notes - SN3D B-Format](https://blueripplesound.com/b-format)\n### B-Format\nB-Format 是在 HOA 中最主流的音訊格式，他是 multichannel 但不對應聲道，解碼後，會直接呈現一個 soundfield\n\n傳統的 multichannel 是對應聲道的，好處就是不需要再解碼，就可以直覺對應視聽設備\n\nB-format 乍聽之下似乎有點麻煩，但他可以解決傳統 channel-based 的問題，就是不管視聽配置為何，只需要處理一次，而不需為不同配置重新混音了\n\n### Coordinate System\nambisonic 的 Coordinate System 一般設定 X 前，Y 左，Z 上\n\n### Content\n有三種狀況可以使用 B-Format\n\n-   [[Ambisonics#Panning]]\n-   [[Ambisonics#Recording]]\n-   [[Ambisonics#Upmixing]]\n\n### Panning\n將音訊編譯進 HOA 最簡易的方法，就是將 mono pan（或我們說 encode）進一個 B-Format 裡，符合他的格式\n\n目前有幾種 B-format，數學上是一樣的，但並不相容，目前最主流是 SN3D\n\n#### FuMa, N3D and SN3D\n- FuMa 是早期的經典格式（自1970）\n- SN3D 目前主流（例如 YT）\n- N3D 與 SN3D 有點不同，在數學上比較易於使用，但在工作室內比較少見\n### Recording\n使用 ambisonic 麥克風\n### Upmixing\n![](https://blueripplesound.com/sites/default/files/images/o3aup51.png)\n如果想要將 channel based 轉為 B-Format，有幾種方法\n- 把每個聲道都當做一個聲音物件，把他們各自 pan 到 soundfield 中原有的位置\n- 另一種就是使用現成的 upmixing 的插件或工具\n\n# 其他\n[logic pro X 作法](https://beyondstereoentertainment.wordpress.com/2020/10/15/spatial-audio-in-a-daw/)\n\n[學習推薦ㄉ目錄](https://www.courville.uqam.ca/ambisonic/)\n[MPEG-H](https://www.iis.fraunhofer.de/en/ff/amm/broadcast-streaming/mpegh.html)\nhttps://github.com/hyperdelia/hex002-womb\n\n[sandbox測試了很多東西？]https://codesandbox.io/u/kirbysayshi\n\nhttps://medium.com/samsung-internet-dev/audio-on-the-web-for-games-and-vr-efcd523a3d58\n\n[宇宙](https://www.youtube.com/watch?v=Wl8axtBNdQw)\npreset\nhttps://www.youtube.com/watch?v=VCXQp7swp5k\n\nfb htrfs\nhttps://news.nweon.com/86521\n\nopenal 3d audio\nhttps://openal.org/games/\n\n\n題外\nhttps://threejs-journey.xyz/\n\n網站\nhttps://gothamsiti.it/\nhttps://www.dermast.art/\nhttps://www.chiaraluzzana.com/work\n\n[high fidelity](https://www.highfidelity.com/solutions/spatial-audio-api-and-sdks)\n\ncalla\nhttps://www.calla.chat/\n推薦網站\nhttps://www.awwwards.com/\n\nmozilla vr\nhttps://blog.mozvr.com/\n互動藝術程式創作入門\nhttps://hahow.in/courses/5d1ba52a0d5f3b0021dbb996/main\n\n\n\n\n## sony 360 reality audio\n[Sony 360 Reality Audio review: This headphone-virtualization system expands music beyond your head](https://www.techhive.com/article/3519268/sony-360-reality-audio-review.html)\n## free daw which is cool\n[tracktion](https://www.tracktion.co-m/)\nLMMS\n## 把手機當成頭部追蹤器 \n目前 mac 好像沒有在支援\n暫緩這篇\n[opentrack phone head track](https://www.youtube.com/watch?v=6Pts_sotjMA)\n\n## list of ambisonic software wiki\n[List of Ambisonic software](https://deletionpedia.org/en/List_of_Ambisonic_software)\n\n## plugins for PD\n[cubemixer](https://ambisonics.iem.at/xchange/products/cubemixer)\n\n## logic pro \nhttps://japanese.engadget.com/apple-logic-pro-025039322.html?1\n開始支援 atoms\n\n那本書\nhttps://link.springer.com/chapter/10.1007/978-3-030-17207-7_1","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/%E8%81%B2%E5%AD%B8/Spatial-Audio/dolby-atoms":{"title":"dolby atoms","content":"# 突破 channel base\n5.1\n7.1\n- pan through array\n- bed\n\n![](https://i.imgur.com/ch3bEb8.png)\nscalable / adaptive \n- 高解析度\n- 高適應性（到客戶端）\n\n![](https://i.imgur.com/Rkl6MF9.png)\n- bed 音床，基礎聲音背景\n- object 空間中的物件\n- 合併起來會是一個 atoms deliverable\n\n## workflow(Protools)\n![](https://i.imgur.com/xwHFnWB.png)\n![](https://i.imgur.com/AfBuLus.png)\nio 藉由 madi 協定傳送到渲染器\n\n![](https://i.imgur.com/FRgW8tp.jpg)\n\n### render input\n![[Pasted image 20210917152541.png]]\n![[Pasted image 20210917152904.png]]\n\n要講一個音軌channel跟真的喇叭輸出之間的關係\n\npro tools 音訊設定\ninput: dolby audio bridge(送到renderer)\n![[Pasted image 20210917153059.png]]\n### dolby atoms production suite\nplugin\n處理 atoms 的複雜處理，最後可以 render 到喇叭環境\n但沒有太複雜的需求的話，也可接到現成的介面，render 成 binaural 等\n![[Pasted image 20210917153355.png]]\n一開始可以先用試用版軟體＋耳機做嘗試\n\n## 效能\n很吃效能\n![[Pasted image 20210917153718.png]]\n\n## dolby cinema\n第一間\n桃園星光影城\n\n![[Pasted image 20210917154117.png]]\nHE RMU= Home Entertainment Rendering Mastering Unit\n\n## MTRX\n![[Pasted image 20210917154329.png]]\n可以連結到多個 hdx 系統\n複雜的大型系統\n\n## binaral 跟 stereo輸出\n兩個的渲染不一樣要注意\n\n## 實際設定\nio -\u003e bus -\u003e use dolby atoms renderer stereo\ndefault\n\n## panner\ndolby atoms panner\n也有 pt 內建的 panner\n\n低頻就算 pan 可能效果也不大\n\n覺得要呈現空間感跟石膏翻模很像\n\nbass 組可以放 bed\n節奏組 再來華麗無雙\n\n\n## control\n跟studio one 一樣都有觸控版的 controller\n空間panning好幫手free\n\n## airpods pro \n![[Pasted image 20210917162616.png]]","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%85%B6%E4%BB%96/Affinity":{"title":"Affinity","content":"# 快捷鍵\nX: 正副顏色對調\nD: 切回原本顏色","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/%E5%A4%A7%E7%A5%9E%E4%BE%86%E5%85%AD%E8%A7%92/%E9%80%B2%E5%85%A5-Tiktok-%E7%9A%84%E9%81%8E%E7%A8%8B%E8%88%87%E5%BE%80%E5%9C%8B%E5%A4%96%E7%99%BC%E5%B1%95%E8%A9%B2%E5%A6%82%E4%BD%95%E7%B2%BE%E9%80%B2%E8%87%AA%E5%B7%B1":{"title":"進入 Tiktok 的過程與往國外發展該如何精進自己","content":"# 進入 Tiktok 的過程與往國外發展該如何精進自己\n## 講者：布魯斯\nTikTok 前端工程師\n### 講者課程\n[Bootstrap5](https://hiskio.com/fundraising/529/about?s=tc)\n[Tailwind CSS](https://hiskio.com/fundraising/533/about?s=tc)\n[組合包](https://hiskio.com/packages/LJrNdGmy6)\n\n## 目錄\n- 如何成為前端工程師\n- tiktok面試流程\n- 前端工程師的兩階段\n- 英文能力？\n- 對 leetcode 的看法\n- 前端履歷\n\n## 不是盲目的努力\n緊張的覺得自己不夠好，盲目的努力會累\n如果目標明確，就算失敗，過程也會有意義\n那些過程會創造出不同的可能性\n\n## 面試流程\n1. 跟工程師 A\n2. 跟工程師 B\n3. 跟技術主管\n4. 跟 HR\n\t1. 還是有可能被刷\n\n技術、自我介紹印象要深\nJS, JS, JS\n問題要可以舉一反三，讓面試者，也要讓他覺得不是浪費時間\n## 提問\n技術上的反饋\n團隊上的合作流程\n\n## 面試準備\n刷題\n\t- 演算法\n\t\n## 投就對了\n公司也不是只想找真命天子\n履歷稍微符合就有機會了\n不要有太多小劇場\n\n## 記事本也要寫得出code\n\n## 關於大公司用演算法篩人\n厲害的人連演算法都可以征服（？？？）\n\n## 前端工程師兩階段\n1. 能做出東西\n2. 能解決問題\n\n## 切版之後的路\n前端入門的切版門檻很低\n但到寫程式的時候就會開始很精采XD\n\n## node.js 必學\n\n## 三大框架一個就夠了\n\n## 寫不出來就參考答案\nhttps://medium.com/@koheiarai94/60-leetcode-questions-to-prepare-for-coding-interview-8abbb6af589e\n會看答案很重要\nBFS cp值高\n\n[# Top 10 Algorithms for the Coding Interview (for software engineers)](https://www.youtube.com/watch?v=r1MXwyiGi_U)\n## 履歷\n經驗寫自己做了什麼，不要寫團隊做了什麼，又用了什麼技能（面試官可以直接看到你的技能程度怎麼用）\n我為了……去做……\n解決問題的能力\n新手：放作品，還有做作品時遇到什麼問題\n\n\n## side project\n去學參與開源計畫\n做作品，學東西\n\n## 面試失敗也可以大膽問問題\n\n## leetCode\n卡關很多時候是基礎知識不懂，補足基礎知識也很重要\n\n\n#多元 #海外 #前端 #開發 #雞湯","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/%E6%83%B3%E5%AD%B8%E7%9A%84%E6%A1%86%E6%9E%B6":{"title":"想學的框架","content":"[GSAP](https://greensock.com/)","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/%E8%BC%95%E9%87%8F%E5%8C%96":{"title":"輕量化","content":"### 查看流量\ndevtools-\u003enetwork\n影音最吃流量\n### 減量\ntinypng\n![](https://i.imgur.com/IkSwobm.png)\n如果流量一直被吃掉的話\n可以使用規則-\u003e全部快取來避免一直被吃流量","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/BEM":{"title":"BEM","content":"bem 看這個\nCSS 優良手冊\nhttps://ithelp.ithome.com.tw/users/20040221/ironman/3567","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/%E5%AE%A2%E8%A3%BD%E5%8C%96-Sass":{"title":"客製化 Sass","content":"# 客製化 Sass\n## import 順序\n-   BS variables\n-   BS function\n-   BS mixins\n-   自訂 variables（命名_customVariables.scss，簡稱 custom）\n-   BS 完整版（如果還不知道怎麼挑出需要的，就先放完整版扣掉前面的）\n\n## 客製化步驟\n用 custom 去覆蓋\n### 修改預設變數\n直接在 _custom 複製該變數，去掉 !default 進行修改即可\n\n### 修改 Maps\n```scss\n// 想要修改的顏色\n$primary: $blue !default;\n$secondary: $gray-600 !default;\n  \n// 他們所在的 map\n$theme-colors: (\n\"primary\": $primary,\n\"secondary\": $secondary, ...\n) !default;\n\n\n// 在 _custom 中修改 map 中特定項目，同修改變數後，重寫一次 map\n$primary: #0074d9;\n$danger: #ff4136;\n\n$theme-colors: (\n\"primary\": $primary,\n\"secondary\": $secondary, ...\n) ;\n```\n#### 添加至 map\n```scss\n// 在 _custom\n// 新增一個 map\n$custom-colors: (\n \"custom-color\": #900\n);\n\n// 合併到原本的 map\n**$theme-colors: map-merge($theme-colors, $custom-colors);**\n```\n#bs/customize #css/scss/customize","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Accordion-%E6%89%8B%E9%A2%A8%E7%90%B4":{"title":"Accordion 手風琴","content":"# Accordion 手風琴\n[[Collapse]]\n#bs/component/accordion","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/BS-%E5%85%83%E4%BB%B6%E4%B8%80%E8%A6%BD-Cheatsheet":{"title":"BS 元件一覽 Cheatsheet","content":"-   [BS4 component 一覽](https://assets.materialup.com/uploads/843d5c9b-f0ee-42c1-a648-31ef9f63c933/attachment.jpg)\n-   [做元件一覽的時候可用：cheetsheet](https://bootstrap5.hexschool.com/docs/5.1/examples/cheatsheet/)\n\n#bs/component","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Bootstrap":{"title":"Bootstrap","content":"# Bootstrap\n\n- [[background (util)]]\n- [[bs grid system]]\n- [[BS 元件一覽 Cheatsheet]]\n- [[Cards]]\n- [[codepen環境]]\n- [[container]]\n- [[Font]]\n- [[Grid 格線系統]]\n- [[gulp 環境的客製化]]\n- [[image]]\n- [[Modal]]\n- [[position]]\n- [[ratio]]\n- [[Size]]\n- [[Spacer]]\n- [[utilities API 修改]]\n- [[客製化 Sass]]\n- [[form(bootstrap)]]\n\n#bs #index","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Cards":{"title":"Cards","content":"# Cards\n\n## 基本結構\n`card` 不包含 `margin`，預設寬度適應父層\n```html\n\u003c!-- card，寬度可自訂 --\u003e\n\u003cdiv class=\"card\"\u003e\n  \u003c!-- card-img-top --\u003e\n  \u003cimg src=\"...\" class=\"card-img-top\" alt=\"...\"\u003e\n  \u003c!-- card-body --\u003e\n  \u003cdiv class=\"card-body\"\u003e\n    \u003c!-- card-title --\u003e\n    \u003ch5 class=\"card-title\"\u003eCard title\u003c/h5\u003e\n\t\u003c!-- card-text --\u003e\n    \u003cp class=\"card-text\"\u003eSome quick example text to build on the card title and make up the bulk of the card's content.\u003c/p\u003e\n    \u003ca href=\"#\" class=\"btn btn-primary\"\u003eGo somewhere\u003c/a\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n```\n\n## 父層\n- `card`\n\n## 子層\n### 卡片結構\n有頁頭、頁尾、內文，除了文字的頁頭頁尾，也有圖像的頁頭頁尾\n- `\u0026-header`\n- `\u0026-footer`\n- `\u0026-body`\n- 圖像版看下段\n\n### 圖像相關\n- `\u0026-img-top`\n- `\u0026-img-bottom`\n- `\u0026-img`：佔滿\n- `\u0026-img-overlay`：取代 `card-body`\n\n### 其他搭配\n- `list-group-flush`\n\n\n## 孫層\n可以在子層任意位置使用\n- `\u0026-title h*`\n- `\u0026-subtitle h*`\n- `\u0026-text`\n- `\u0026-link`：link 在卡片裡可以並排\n- 還可以搭配其他小元件\n\n### 列表群組\n- 搭配 `list-group-flush`可以在卡片內建立群組  \n\n```html\n\u003c!-- 可放入 .card 子層，加上 list-group-flush --\u003e\n\u003cul class=\"list-group list-group-flush\"\u003e\n  \u003cli class=\"list-group-item\"\u003eAn item\u003c/li\u003e\n  \u003cli class=\"list-group-item\"\u003eA second item\u003c/li\u003e\n  \u003cli class=\"list-group-item\"\u003eA third item\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n\n## 網格換行\n`.row-cols-數字`\n可控制該從第幾張卡片開始換行\n\n\n## 等高\n### 卡片群組化\n如果外層加上 `card-group`，卡片們會群組化，並且等高\n### 對卡片加上等高設定\n如果不想群組化要等高的話，要在 card 層加上 h-100\n\n#css/scss  #bs/component/card","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Collapse":{"title":"Collapse","content":"---\n# Collapse\n\n| 作用               | 按鈕                                            | 展開內容                                        |\n|","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Font":{"title":"Font","content":"```scss\n$font-sizes: (\n1: $h1-font-size,  // 40\n2: $h2-font-size,  // 32\n3: $h3-font-size,  // 28\n4: $h4-font-size,  // 24\n5: $h5-font-size,  // 20\n6: $h6-font-size   // 16\n) !default;\n```\n\n#bs #css/scss","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Modal":{"title":"Modal","content":"---\n# Modal\n\n\n## 運作\n- 除 html, css 也需要 js 才能運作\n- 啟動時無法滾動 `body` 內容\n- 只能一個同時用單一 `modal`\n- 點擊背景會關閉視窗：（`.modal` 上寫 `data-bs-backdrop=\"static\"` 可取消)\n- 內容過長時可滾動視窗（ `.modal\u003e.modal-dialog`加上`.modal-dialog-scrollable`可不滾動視窗只滾動 `modal` 內文）\n\n## 基本組合\n\n| 屬性                 | 按鈕                                              | Modal（`.modal`）           | `.modal\u003e.modal-dialog`     |\n|","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Size":{"title":"Size","content":"```html\n\u003cdiv class=\"min-vw-100\"\u003eMin-width 100vw\u003c/div\u003e\n\u003cdiv class=\"min-vh-100\"\u003eMin-height 100vh\u003c/div\u003e\n\u003cdiv class=\"vw-100\"\u003eWidth 100vw\u003c/div\u003e\n\u003cdiv class=\"vh-100\"\u003eHeight 100vh\u003c/div\u003e\n```\n#bs #css/scss","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/Spacer":{"title":"Spacer","content":"```scss\n$spacer: 1rem !default;\n\n$spacers: (\n0: 0, \t\t\t // 0\n1: $spacer / 4,\t // 4\n2: $spacer / 2,\t // 8\n3: $spacer,\t\t // 16\n4: $spacer * 1.5,// 24\n5: $spacer * 3,  // 48\n) !default;\n```\n\n#bs #css/scss","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/bs-grid-system":{"title":"bs grid system","content":"## 配置規則\n-   row 底下只能是 column\n-   column 之上只能是 row\n## Rows（列） 與 Columns（欄）\n### gutter\n- column 間的水平 padding \n用來控制 column 之間的間距\n\n- 由相鄰的 col 的兩個 padding 所構成\n gutter = col 的 padding * 2\n \n - 背景圖片會無視 gutters\n## row 的設定\n### 最左、右邊的 column \n row 會加上負值 margin 抵消多餘的 padding\n 確保每一 column 中的內容在視覺上沿左側向下對齊\n \n%%目前先隱藏這段 每一 row 也支持使用修飾符 class，以統一 row 與 column  的大小和 Gutters 來更改內容的間距。%%\n\n%%-   在 row 上快速設定 col （等寬）\n-   row-cols-{breakpoint}-{欄位數}\n-   gutters%%\n\n\n#bs/grid","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/codepen%E7%92%B0%E5%A2%83":{"title":"codepen環境","content":"# 在 codepen 用 bs\nsetting \u003e css \u003e add external stylesheets/pens \u003e search: bootstrap\n\n需注意版本\n5.0 尚未實裝，還是要手動改\n#codepen #bs","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/flexbox/d-flex":{"title":"d-flex","content":"# d-flex\n```css\n.d-flex {\n\tdisplay: flex;\n}\n```\n內容取消 inline 設定","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/formbootstrap":{"title":"form(bootstrap)","content":"# form (bootstrap)\n- `form`\n\t- `div` ：每個 input 都用 div 包住，設定 `mb-*`\n\t\t- `label.form-label`\n\t\t\t- `for` 對應 `input` 的 `id`\n\t\t\t- `aria-describedby=\"註解\"`\n\t\t- `input.form-control`\n\t\t\t- 屬性：type, id（對應 `label` 的 `for` ）\n\t\t- `div.form-text#註解` （不想用 block 元素的話可以用 `span`, `small`, `p` 都可 ）\n\t\t\t- id 對應 label 的 `aria-describedby`\n\n## input(bootstrap)\n- `class=\"form-control\"`\n\t- `form-control-尺寸` （sm, lg） \n- type\n- id(對應 label for)\n- disabled\n- readonly：搭配 `.form-control-plaintext` 可使 input 取消樣式（外框），僅保留文字\n\n![[fieldset(form)#^c9e148]]\n\n### 親和性\n可以使用的（推薦 -\u003e 還可以）\n1. label\n2. aria-labelledby\n3. title\n4. aria-label\n5. placeholder\n\n# select \u0026 datalist(bs)\n[[select \u0026 datalist 選單]]\n- `select.form-select`\n\t- `form-select-尺寸` (sm, lg)\n\n# checks \u0026 radios\n - `div.form-check-inline` ：input + label 成 inline 狀態\n- `div.form-check`\n\t- `input.form-check-input` `type=\"checkbox\"`\n\t- `label.form-check-label`\n\n- `div.form-check`\n\t- `input.form-check-input` `type=\"radio\"`\n\t- `label.form-check-label`\n\n# switch\n- `div.form-check.form-switch`\n\t- `input.form-check-input` `type=\"checkbox\" role=\"switch\"`\n\t- `label.form-check-label`\n\n\n#bs/form #form","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/gulp-%E7%92%B0%E5%A2%83%E7%9A%84%E5%AE%A2%E8%A3%BD%E5%8C%96":{"title":"gulp 環境的客製化","content":"# gulp 環境下的 bootstrap 客製化\n## 檔案結構\n目前還不太清楚為什麼要放在 node_modules 裡  \n```text\nyour-project/\n├── scss\n│   └── custom.scss\n└── node_modules/\n    └── bootstrap\n        ├── js\n        └── scss\n```\n\n## 匯入至專案\n有兩種方法  \n- 全部匯入 `bootstrap.scss`（入門）\n- 部分匯入（進階）\n\n### 全部匯入\n```sass\n// 選項 A: 放入完整 bs 檔\n\n// 匯入欲覆蓋既有變數的自訂變數（但 function 不會運作）\n\n@import \"../node_modules/bootstrap/scss/bootstrap\";\n\n// 匯入新增的自訂變數\n```\n### 部分匯入\n熟悉之後會建議採取這個方法  \n一開始會不知道怎麼去取用要哪些檔案  \n我目前的作法是直接把 `bootstrap.scss` 裡面有匯入的都先匯入，等到專案做完之後我再把拿掉不影響的檔案拿掉。  \n\n```sass\n//選項 B: 放入部分 bs 檔（只放專案有用到的部份）\n\n// 1. 匯入 functions (按照這個順序，後面可以啟動 manipulate colors, SVGs, calc 等功能)\n@import \"../node_modules/bootstrap/scss/functions\";\n\n// 2. 匯入欲覆蓋既有變數的自訂變數\n@import \"修改原有變數、map 的 scss\";\n\n// 3. 匯入運作 bs 必須的檔案（包含原本的變數檔案）\n@import \"../node_modules/bootstrap/scss/variables\";\n@import \"../node_modules/bootstrap/scss/mixins\";\n\n// 4. 匯入「新增或刪除」的自訂變數\n@improt \"刪除或新增 map 的 scss\";\n\n//　5. 匯入選用的 bs 檔案（專案有用到的部份）\n@import \"../node_modules/bootstrap/scss/root\";\n@import \"../node_modules/bootstrap/scss/reboot\";\n@import \"../node_modules/bootstrap/scss/type\";\n@import \"../node_modules/bootstrap/scss/images\";\n@import \"../node_modules/bootstrap/scss/containers\";\n@import \"../node_modules/bootstrap/scss/grid\";\n\n// 6. 匯入其餘自訂的 scss 檔案\n@import \"其他手刻檔案\";\n```\n\n## 客製化\n欲修改的內容有幾個部分  \n- 變數 variables\n- 修改 map 既有子變數\n- 添加子變數至 map\n- 刪除 map 既有子變數（難）\n\n\n### 覆蓋預設變數\n預設變數**前**匯入，並且不加上 !default\n```sass\n// bs 運作的必須檔案先匯入\n@import \"../node_modules/bootstrap/scss/functions\";\n\n// 既有的變數覆蓋成自訂參數，並且拿掉 !default \n$body-bg: #000;\n$body-color: #111;\n\n// 匯入其他必須檔案，!default 的參數若是已經有遭到更改，則不會讀取\n@import \"../node_modules/bootstrap/scss/variables\";\n@import \"../node_modules/bootstrap/scss/mixins\";\n\n// Bootstrap and its default variables\n\n// 匯入其他選用檔案\n@import \"../node_modules/bootstrap/scss/root\";\n@import \"../node_modules/bootstrap/scss/reboot\";\n@import \"../node_modules/bootstrap/scss/type\";\n// etc\n```\n###  修改 map 既有子變數\nbs 裡，map 裡出現過的變數，都可以找到額外設定一個獨立的變數  \n\u003e map 是什麼？[[批次產生樣式 maps + @each]], [[Maps]]\n\n而 map 裡的變數都會從獨立變數匯入  \n想要更改 map 就必須從獨立變數改起，map 則維持原樣  \n\n```sass\n$primary: #0074d9;\n$danger: #ff4136;\n```\n```sass\n$theme-colors: (\n  \"primary\": $primary,\n  \"danger\": $danger\n);\n```\n簡單來說，修改變數的動作，與修改 map 是一樣的  \n\n### 添加子變數至 map\n一旦是要無中生有或是化有為無的動作就要特別小心  \n這個動作就是無中生有的部分  \n\n要在預設變數匯入之**後**進行  \n\n\n```sass\n// 在預設變數匯入之後進行\n// 新建的 map 包含子變數\n$custom-colors: (\n  \"custom-color\": #900\n);\n\n// 與 既有的 map Merge 起來 \n$theme-colors: map-merge($theme-colors, $custom-colors);\n```\n\n\n### 刪除 map 既有子變數\n刪除原本 map 裡面的內容，時機跟上述的不太一樣，要在必須的檔案匯入後再執行  \n```sass\n// Required\n@import \"../node_modules/bootstrap/scss/functions\";\n@import \"../node_modules/bootstrap/scss/variables\";\n@import \"../node_modules/bootstrap/scss/mixins\";\n\n$theme-colors: map-remove($theme-colors, \"info\", \"light\", \"dark\");\n\n// Optional\n@import \"../node_modules/bootstrap/scss/root\";\n@import \"../node_modules/bootstrap/scss/reboot\";\n@import \"../node_modules/bootstrap/scss/type\";\n// etc\n```\n#gulp #bs/customize","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/image":{"title":"image","content":"# image\n\n\n## 縮圖連結\n`.img-thumbnail`\n#bs #css/scss","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/nav-item":{"title":"nav-item","content":"# nav-item\n細項\n```html\n\u003cli class=\"nav-item\"\u003e\n\t\u003ca class=\"nav-link active\" aria-current=\"page\" href=\"#\"\u003eHome\u003c/a\u003e\n\u003c/li\u003e\n```\n## dropdown\n在 `.nav-item` 內可以使用 `.dropdown`\n```html\n\u003cli class=\"nav-item dropdown\"\u003e\n  \u003ca class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"\u003e\n    Dropdown link\n  \u003c/a\u003e\n  \u003cul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\"\u003e\n    \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\"\u003eAction\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\"\u003eAnother action\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca class=\"dropdown-item\" href=\"#\"\u003eSomething else here\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/li\n```\n\n#bs/component/navbar","lastmodified":"2022-04-23T12:34:05.620865372Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/nav-link":{"title":"nav-link","content":"# nav-link\n特指在 navbar 內的連結設定（不會影響到其他 btn-link）\n- `.active` 代表當前頁面（搭配 `aria-current=\"page\"` 屬性使用）\n```html\n\u003ca class=\"nav-link active\" aria-current=\"page\" href=\"#\"\u003eHome\u003c/a\u003e\n```\n\n#bs/component/navbar","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar":{"title":"navbar","content":"# navbar\n```html\n\u003cnav class=\"navbar navbar-light bg-secondary-light navbar-expand-lg\"\u003e\n\t\u003c!-- navabr: 主要 class\n\t\u003c!-- navbar-light：淺字（配合深底）\n\t\u003c!-- bg-\u003ctheme-color（自訂變數的話，要設定API）\u003e --\u003e\n\t\u003c!-- navbar-expand-\u003cbreakpoint\u003e：設定什麼時候要將細項收起來 --\u003e\n\u003c/nav\u003e\n```\n\u003e可以搭配[定位](https://bootstrap5.hexschool.com/docs/5.0/utilities/position/)的通用類別\n## container\n避免內容貼邊\n```html\n\u003cnav\u003e\n\t\u003cdiv class=\"container\"\u003e\n\t\t\t\u003c!-- 內容不貼邊 --\u003e\n\t\u003c/div\u003e\n\u003c/nav\u003e\n```\n\n## 子元素\n- [[navbar-brand]]：品牌\n- [[navbar-toggler]]：收合按鈕\n- [[navbar-nav]]：細項群組\n\n- [[navbar 內放入 form 元素（button, input...）]]\n\n#bs/component/navbar","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-%E5%85%A7%E6%94%BE%E5%85%A5-form-%E5%85%83%E7%B4%A0button-input...":{"title":"navbar 內放入 form 元素（button, input...）","content":"## navbar 內放入 form 元素（button, input...）\n也可以放入表單、按鈕等內容，視有沒有收合需求放入 `.navbar-nav` 內\n```html\n\u003cform class=\"container-fluid justify-content-start\"\u003e\n  \u003cbutton class=\"btn btn-outline-success me-2\" type=\"button\"\u003eMain button\u003c/button\u003e\n  \u003cbutton class=\"btn btn-sm btn-outline-secondary\" type=\"button\"\u003eSmaller button\u003c/button\u003e\n\u003c/form\u003e\n```\n\n#bs/component/navbar","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-brand":{"title":"navbar-brand","content":"# navbar-brand\n## 對 `\u003ca\u003e` 最適用\n```html\n\u003ca class=\"navbar-brand\" href=\"/\"\u003eDOYOGA\u003c/a\u003e\n```\n\n## 加入 `\u003cimg\u003e` \n```html\n\u003ca class=\"navbar-brand\" href=\"#\"\u003e\n\t\u003cimg src=\"/docs/5.0/assets/brand/bootstrap-logo.svg\" alt=\"\" width=\"30\" height=\"24\"\u003e\n\u003c/a\u003e\n```\n\n### `\u003cimg\u003e` + 文字\n```html\n\u003cnav class=\"navbar navbar-light bg-light\"\u003e\n  \u003cdiv class=\"container-fluid\"\u003e\n    \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n      \u003cimg src=\"/docs/5.0/assets/brand/bootstrap-logo.svg\" alt=\"\" width=\"30\" height=\"24\" class=\"d-inline-block align-text-top\"\u003e\n      Bootstrap\n    \u003c/a\u003e\n  \u003c/div\u003e\n\u003c/nav\u003e\n```\n\n#bs/component/navbar","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-nav":{"title":"navbar-nav","content":"# navbar-nav\n- 細項群組（會被收起來的）\n\n## 寫法\n- `ul.navbar-nav` \u003e `li`.[[nav-item]]\u003e `a`.[[nav-link]]\n-  `div.navbar-nav` \u003e a.[[nav-link]]\n\n```html\n\u003cul class=\"navbar-nav me-auto mb-2 mb-lg-0\"\u003e\n\t\u003cli class=\"nav-item\"\u003e\n\t\t\u003ca class=\"nav-link active\" aria-current=\"page\" href=\"#\"\u003eHome\u003c/a\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n![[navbar-toggler#collapse 跟 navbar-collapse class]]\n\n\u003e[srolling（收起來的內容的滾動效果）](https://bootstrap5.hexschool.com/docs/5.0/components/navbar/#scrolling)\n\u003e加入一個選填的屬性 `.navbar-scroll` 來設置 `max-height`\n\n\n#bs/component/navbar","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/navbar/navbar-toggler":{"title":"navbar-toggler","content":"# navbar-toggler\n收合的按鈕\n```html\n\u003cbutton class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n\t\u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n\u003c/button\u003e\n```\n\n#bs/component/navbar \n\n\n## collapse 跟 navbar-collapse class\n`div.collapse.navbar-collapse` 內的標籤會收合\n```html\n\u003cdiv class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"\u003e\n\t\u003c!-- toggle 的範圍要包在這裡面 --\u003e\n\t\u003cul class=\"navbar-nav\"\u003e\n\t\u003c/ul\u003e\n\u003c/div\u003e\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/position":{"title":"position","content":"# position\n- 參考對象：`position-relative`\n- 本體：`position-absolute`\n\n\n## 參考點中心\n\n使用 `.translate-middle`，來配合 `transform` 的`translateX(-50%)` 與 `translateY(-50%)`來將 position 的參考點對於中心\n\n\n#css/scss #bs/util","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/ratio":{"title":"ratio","content":"[ratiobuddy](https://ratiobuddy.com/)\n\n```scss\n$aspect-ratios: (\n  \"1x1\": 100%,\n  \"4x3\": calc(3 / 4 * 100%), \t\t// 0.75\n  \"16x9\": calc(9 / 16 * 100%),\t// 0.5625\n  \"21x9\": calc(9 / 21 * 100%)\t\t// 0.4285714286\n\t\n);\n```\n\n\n#bs/util","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Bootstrap/utilities-API-%E4%BF%AE%E6%94%B9":{"title":"utilities API 修改","content":"# utilities API 修改\n[Bootstrap 5 Utilities | New Utility API !!](https://www.youtube.com/watch?v=gNCAmxBwD9I)\n\n## import 順序\n在 `utilities.scss` 匯入之前做修改\n```sass=\n// bs 的必須檔案\n@import \"../../../node_modules/bootstrap/scss/functions\";\n@import \"../../../node_modules/bootstrap/scss/variables\";\n@import \"../../../node_modules/bootstrap/scss/mixins\";\n\n// 自訂的 utilities \n@import \"./helpers/utilitiesAPI\";\n// 原本 bs 的 utilities\n@import \"../../../node_modules/bootstrap/scss/utilities\";\n\n// 剩餘其他選用 bs 檔案\n@import \"../../../node_modules/bootstrap/scss/bootstrap\";\n```\n\n## 自訂的 utilitiesAPI 檔案內容\n```sass=\n// utilities API\n$utilities: ()!default;  // 覆蓋原本的檔案\n\n$utilities: map-merge(   // 合併自訂與預設的檔案\n  $utilities,\n  (\n    \"font-size\": (         // 從 bs utilities 檔案中複製出\n      rfs: true,           // 需要修改的 utilities\n      property: font-size, // 這裡以 font-size 做示範\n      responsive: true,\n      class: fs,\n      values: $font-sizes\n    ),  // 如有多個，用 , 分開，再接續其他 utilties\n  )\n);\n```\n\n## 可添加參數\n|選項|類型|介紹|\n|-|-|-|\nproperty|必要|屬性的名稱，可以是字串或是字串陣列 ( 例如，水平的 padding 或 margin )。|\n|values|必要|清單中的值或 map，在您不希望 class 名稱與值相同時使用。如果將 null 作為 map 鍵值，則不會編譯它。\n|class|可選|當您不希望 class 名稱與屬性相同時所使用的變數。如果您不提供 class 鍵值，且 property 鍵值是字串陣列，則 class 名稱將是 property 陣列的第一個元素。\n|state|可選|為通用類別生成的虛擬類別類清單，像是 :hover 或 :focus。沒有預設值。\n|responsive|可選|用於指示是否要生成響應式類別的布林值。預設值為 false。\n|rfs|可選|用於啟用流體縮放的布林值。可以查看 RFS 頁面以了解如何運作。預設值為 false。\n|print|可選|用於指示是否要生成 print 類別的布林值。預設值為 false。\n|rtl|可選|用於指示是否要將通用類別保留於 RTL 中的布林值。預設值為 true。|\n\n#bs/customize","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/%E6%AC%8A%E9%87%8D":{"title":"權重","content":"---\n# 權重\ncss 的語法中，下面的語法會蓋過上面的語法\n先看權重再看先後\n\n\n| 選擇器| 權重分數 | \n|","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A3%BD%E4%BD%9C%E7%A0%B4%E7%89%88%E6%A8%A3%E5%BC%8F":{"title":"製作破版樣式","content":"---\n# 製作破版樣式\n![](https://i.imgur.com/arnvFhJ.png)\n如圖，左右兩區塊（字 ＋ Swiper 圖）共計的網格占比要超過原本的網格占比\n舉例\n- 字：col-5\n- 圖：col-10\n\ncol-10 會因為超過寬度 wrap 到下一行，但可以用 `flex: nowrap`，的語法防止\n這時候在整個區塊最外層加入 `overflow: hidden` 的語法即可避免出現 x 軸滾輪","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95":{"title":"視差滾動","content":"## 視差滾動\n[animation 語法介紹](https://www.oxxostudio.tw/articles/201803/css-animation.html)\n### 常用語法\n- `animation-name`\n- `animation-duration`\n- `animation-delay`\n- `animation-iteration-count`: 跑的次數\n    - 數字\n    - `infinite`（無限、吃效能）\n- `animation-fill-mode`\n    - `backwards`，跑第一個影格\n    - `forwards`：留在最後一個影格\n    - `both`：第一個跟最後一個影格都會停住\n    - `none`（預設）：如果起始、終點都設在同一位置，會很滑順\n\n### 範例\n```css\ndiv{\n    position:absolute;\n    left:0;\n    width:50px;\n    height:50px;\n    background:#f00;\n    // 對應下面的 @keyframes\n    animation-name:oxxo;\n    animation-duration:2s;\n}\n@keyframes oxxo{\n    from{\n        left:0;\n    }\n    to{\n        left:100px;\n    }\n}\n```\n### 多步驟的動畫\n```css\n// 多步驟的動畫\n@keyframes example {\n  0%   {background-color:pink; left:0px; top:0px;}\n  25%  {background-color:yellow; left:200px; top:0px;}\n  50%  {background-color:blue; left:200px; top:200px;}\n  75%  {background-color:green; left:0px; top:200px;}\n  100% {background-color:red; left:0px; top:50px;}\n}\n```\n\n\n\n## 動畫 cheatsheet\nhttps://animate.style/\n可以代 class 進來用讚啦\n\n## transform\n不會影響到排版，都是照原本的空間\n\n## transition vs animation\nhttps://cssanimation.rocks/transition-vs-animation/\ntransition 過渡動畫\nanimation 真的很有意識要用的動畫（？）\n\n\n## aos\nhttps://michalsnik.github.io/aos/\n\n利用 js 會動態加入 class\n如果快要移動到該區塊，就會動態加入\n\n```htmlembedded=\n\u003c!-- body 尾部 --\u003e\n\u003clink rel=\"stylesheet\" href=\"https://unpkg.com/aos@next/dist/aos.css\" /\u003e\n\u003cscript src=\"https://unpkg.com/aos@next/dist/aos.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n AOS.init();\n\u003c/script\u003e\n\n```\n\n```htmlembedded=\n\u003c!-- 在物件上加 --\u003e\n\u003cdiv\n    data-aos=\"fade-up\"\n    data-aos-offset=\"200\"\n    data-aos-delay=\"50\"\n    data-aos-duration=\"1000\"\n    data-aos-easing=\"ease-in-out\"\n    data-aos-mirror=\"true\"\n    data-aos-once=\"false\"\n    data-aos-anchor-placement=\"top-center\"\u003e\n  \u003c/div\u003e\n\n```\n\n\n### 客製化\n#### CSS\n```htmlembedded=\n\u003clink href=\"https://unpkg.com/aos@2.3.1/dist/aos.css\" rel=\"stylesheet\"\u003e\n```\n#### JS\n```htmlembedded=\n\u003cscript src=\"https://unpkg.com/aos@2.3.1/dist/aos.js\"\u003e\u003c/script\u003e\n```\n#### aos 初始化\n```htmlembedded=\n\u003cscript\u003e\n  AOS.init();\n\u003c/script\u003e\n```\n\n### init 的客製化內容\n```javascript=\nAOS.init({\n  // Global settings:\n  disable: false, // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function\n  startEvent: 'DOMContentLoaded', // name of the event dispatched on the document, that AOS should initialize on\n  initClassName: 'aos-init', // class applied after initialization\n  animatedClassName: 'aos-animate', // class applied on animation\n  useClassNames: false, // if true, will add content of `data-aos` as classes on scroll\n  disableMutationObserver: false, // disables automatic mutations' detections (advanced)\n  debounceDelay: 50, // the delay on debounce used while resizing window (advanced)\n  throttleDelay: 99, // the delay on throttle used while scrolling the page (advanced)\n  \n\n  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:\n  offset: 120, // 單位px 滾輪滑到觸發動畫的距離 offset (in px) from the original trigger point\n  delay: 0, // values from 0 to 3000, with step 50ms\n  duration: 400, // values from 0 to 3000, with step 50ms\n  easing: 'ease', // default easing for AOS animations\n  once: false, // whether animation should happen only once - while scrolling down\n  mirror: false, // whether elements should animate out while scrolling past them\n  anchorPlacement: 'top-bottom', // defines which position of the element regarding to window should trigger the animation\n\n});\n```\n\nonce-\u003etrue\n已經執行過的動畫就不再重跑了\n\noffset: 120\n滑接近多少才會觸發\n\noffset, duration 觸發時間改這兩個","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F":{"title":"設計模式","content":"## 建置流程\n[建置流程](https://cacoo.com/diagrams/VbC7q11GWcnik5BV/16E53)\n\n\n### 命名\n#### progress, timeline\n:::    success\n以功能性、外觀來命名\n:::\n\n```css\n// 通用性不夠\n.orderProgress {}\n.registerProgress {}\n// 在不同場景都可以用\n.progress {}\n```\n#### banner\nbanner 的別名 hero\n\n## 結構設計等級\n* Level 1：頁面(page)， 有一頁就新增一頁\n* Level 2：佈局(Layout)， 會額外拉出來處理\n     - 到這階段才適合與後端合作\n* Level 3：工具(helper、util)，會將常用的 class 拉出來獨立使用\n* Level 4：格線(grid) 會有自己的格線系統\n* Level 5：模組(component) 會將常用的內容拉出來模組化\n\n## momo\n不是響應式，但會不同載具去轉址\n主要還是為了圖像做調整\n\n## 設計模式\n## SMACSS\n\n[SMACSS](https://docs.google.com/presentation/d/12EBuvos1SIwUWzIsl8KCp9W96J6jbwXjKuGMKtG5PQc/edit#slide=id.p197)\n### state(狀態)\n用is- 來設定全域狀態：is-error、is-hidden\n子模組設定：.is-tab-active\n\n\n### Minimizing the Depth(最小化深度)\n將模組下共通樣式使用單一class進行合併\n```css\n// 未設定子元件\n.aaa ul { color: brown; }\n.aaa li { color: brown; }\n\n// 設定子元件做合併\n.aaa-text {\n  color: brown;\n}\n```\n\n## SMACSS 結構建議\n![](https://i.imgur.com/BOWnMrg.png)\n![](https://i.imgur.com/4J5KiOS.png)\n\n\n\n## 7+1\n[範例](https://gist.github.com/rveitch/84cea9650092119527bc)","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/Grid-%E6%A0%BC%E7%B7%9A%E7%B3%BB%E7%B5%B1":{"title":"Grid 格線系統","content":"# 格線系統\n## row-cols-數字\nhttps://bootstrap5.hexschool.com/docs/5.0/layout/grid/#row-columns\n#grid #flexbox #css #scss #bs","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/Position":{"title":"Position","content":"### Position\n\n-   [CSS : position 絕對定位與相對定位 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天](https://ithelp.ithome.com.tw/articles/10190721)\n\n#css","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/background":{"title":"background","content":"# background 屬性\n\u003e[mdn](https://developer.mozilla.org/ja/docs/Web/CSS/background)\n\n\n\n## 概括寫法\n\n沒有順序差別，只有 [[background-position]] / [[background-size]] 要注意要寫在一起\n可用 0-1 次：\n\n-   [[background-attachment]]：fixed, local, scroll\n-   image：url()\n-   [[background-position]] / [[background-size]] ：圖片比範圍小的時候好用的定位\n-   backgroud-repeat: repeat, space, round, no-repeat, repeat-x, repeat-y\n\n只寫一個代表兩個都一樣，寫兩個的話第一個是 origin，第二個是 clip\n- `\u003corigin\u003e`：padding-box, border-box (左上角起始座標)\n- [[background-clip]]：padding-box, border-box （整個圖片的座標）\n\t\n## background-size 設定\n![[object-fit#^1ffb45]]\n\n\n## \n\n[How To - Aspect Ratio / Height Equal to Width](https://www.w3schools.com/howto/howto_css_aspect_ratio.asp)\n\n[Can I use... Support tables for HTML5, CSS3, etc](https://caniuse.com/mdn-css_properties_aspect-ratio)\n\n  \n\t\n#css/background","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-attachment":{"title":"background-attachment","content":"# background-attachment\n[mdn](https://developer.mozilla.org/ja/docs/Web/CSS/background-attachment)\n\n 相對 viewport 的固定方式\n\n-   scroll\n-   fixed\n-   local","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-clip":{"title":"background-clip","content":"### background-clip\n[mdn](https://developer.mozilla.org/ja/docs/Web/CSS/background-clip)\n\n-   border-box：背景涵蓋 border 底下\n-   padding-box：背景涵蓋 padding 底下（ bootstrap 用 col 要注意 ）\n-   content-box：背景僅涵蓋在 content 底下","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-position":{"title":"background-position","content":"### background-position\n[mdn](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-position)\n\n-   top, left, center, bottom\n-   25% 75%（距左25%距上75%）","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/background/background-size":{"title":"background-size","content":"# background-size\n設定長寬\n設定填滿容器方式\n![[object-fit#^1ffb45]]\n-   contain：不填滿，以最大大小放入容器\n-   cover：左右填滿\n-   auto","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/box-sizing":{"title":"box-sizing","content":"## box-sizing: boder-box;\n- `padding-box`：寬度只算到`padding`，`border`額外加在外面\n- `border-box`：寬度算到`border`","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/container":{"title":"container","content":"# container\n非滿版的容器，將最重要的內容放在畫面中間\n\n## 響應式的 container\n因為非滿版，所以需要響應式的變化來因應各種載具\n### 狀況一樣的\n- 背景永遠滿版＋內容在電腦版非滿版＋手機版滿版\n- 沒有背景＋內容在電腦版非滿版＋手機版滿版\n### 狀況不一樣\n- 電腦非滿版＋平板、手機滿版\n\n\u003e 可再往下方[[container#bs 的響應式 container]]段落了解\n\n## max-width\n此時 max-width 就很重要了，\n代表在不需要滿版時，內容最大要多寬\n設定會比斷點還要小（因為非滿版）\n```scss\n.container {\n  max-width: 1200px  // 非滿版\n  @media (max-width:768px) {\n    max-width: 720px // 平板環境非滿版\n  }\n}\n```\n\n## padding\n因應縮放，或是不同載具尺寸\n可能會導致畫面比設定的 max-width 還要窄\n雖然 max-width 的設定，不像 width 一樣寫死\n所以不會產生 X 軸\n但一樣會因為畫面已經貼到邊上，造成侷促感\n會下 padding 來避免這種狀況\n\n```scss\n.container {\n  max-width: 1200px  // 非滿版\n  padding: 0 10px // 畫面介於 1200-768 間，會呈現滿版，左右各間距 10px\n  @media (max-width:768px) {\n    max-width: 720px // 平板環境非滿版\n\tpadding: 5px // 畫面介於 720px 以下，會呈現滿版， 左右各間距 5px\n  }\n}\n```\n\n## bs 的響應式 container\nbs 針對不同情況的 container 有不同的樣式可以設定\n![](https://i.imgur.com/B6BHJHH.png)\n### 用法\n有些內容只有限定電腦版非滿版，更窄的就滿版了，那就也沒必要設定置中了\n```scss\n.container-lg {\n  @media (max-width: 768px) {\n  \twidth:100%; // 到達 md 就滿版\n\tpadding; 0 10px // 還是有左右留白\n  }\n}\n```\n\n### bs 內建的不夠，想客製化 container\n```scss\n```scss\n// Source mixin\n@mixin make-container($padding-x: $container-padding-x) {\n  width: 100%;\n  padding-right: $padding-x;\n  padding-left: $padding-x;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n// Usage\n.custom-container {\n  @include make-container();\n}\n```\n\n#css #scss #bs","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/display":{"title":"display","content":"# display\n## block / inline\n`block`：左右填滿\n`inline`：只有佔地面積算\n`inline-block`：區塊與區塊並排，不過其實現在用 flexbox 比較多","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/flexbox":{"title":"flexbox","content":"---\n# flexbox\n\u003e [Animated Flexbox Playground](https://codepen.io/osublake/full/dMLQJr)\n-   [[flex-wrap]]: wrap-reverse;\n-   flex:1 代表 flex-grow\n-   ul \u003e li \u003e a \u003e 字＋圖\n```html\n    \u003cul class=\"d-flex\"\u003e\n      \u003cli\u003e\n        \u003ca\u003eAAAA\u003c/a\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n```\n-   ul: d-flex, width\n-   li: flex-1\n-   a: d-block, padding（一致）, 連結的互動設定\n-   img: d-block, m-auto\n\n## 外容器\n[[d-flex]]\n\n| display         | flex                                   |\n|","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/font-family":{"title":"font-family","content":"# font-family\n\n-   [【2021年版】font-familyの正しい指定方法とおすすめフォント設定まとめ](https://willcloud.jp/knowhow/font-family/)\n-   依序為優先度高至低\n-   若要英文與中文不同字體，可將英文置於前面\n-   內建字體的比例：[CSS Font Stack: Web Safe and Web Font Family with HTML and CSS code.](https://www.cssfontstack.com/)\n\n#css","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/icon-%E8%A8%AD%E5%AE%9A-pointer-event-none":{"title":"icon 設定 pointer event none","content":"288 章 JS setup\n\n按鈕裡面只點得到icon 但點不到 btn，\n```css\ni {\n\tpointer-event: none;\n}\n```\n可以這樣解決\n這樣就不會點到 i 了，會直接穿透點到 btn","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/letter-spacing-%E5%AD%97%E8%B7%9D":{"title":"letter-spacing 字距","content":"# letter-spacing\n\u003e[mdn](https://developer.mozilla.org/ja/docs/Web/CSS/letter-spacing)\n```css\nletter-spacing: normal;\nletter-spacing: \u003clength\u003e;\n```\n\n\n#css","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/object-fit":{"title":"object-fit","content":"# object-fit\nhttps://developer.mozilla.org/ja/docs/Web/CSS/object-fit\n\n\n|狀態|填滿|出血|不變形|\n|-|-|-|-|\n|cover|O|O|O|\n|fill|O|X|X|\n|contain|X|X|O|\n|none|*|*|O|\n\n^1ffb45\n\n## cover\n```html\n\u003c!-- bs 例子：外框 1x1，內部填滿不出血不變形--\u003e\n\u003cdiv class=\"ratio ratio-1x1\"\u003e\n\t\u003c!-- object-fit: cover --\u003e\n\t\u003cimg src=\"https://fakeimg.pl/1000x2000\" class=\"fit-cover\" alt=\"\"\u003e\n\u003c/div\u003e\n```\n\n## scale-down\nThe content is sized as if `none` or `contain` were specified, whichever would result in a smaller concrete object size.","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/overflow":{"title":"overflow","content":"## flex 碰上 overflow\noverflow 之外的項目無法 scroll 到\n[Can't scroll to top of flex item that is overflowing container](https://stackoverflow.com/questions/33454533/cant-scroll-to-top-of-flex-item-that-is-overflowing-container)\n放 jusitify-content-center 在窄螢幕會有問題\nscroll 沒辦法滾到第一項目\n查到兩種作法\n1. 使用 margin: auto 做推擠\n2. justify-content: safe center （*目前看起來只有 firefox 有用）\n\n## scroll\n### 隱藏 scrollbar 但要可以滾\nul 用 pb-2 將 scrollbar 推下去，\n\n再用負的 mb-n2\n\n將 pb-2 抵消藏起來","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/%E5%8F%96%E4%BB%A3-import-%E7%9A%84-use-forword":{"title":"取代 @import 的 @use, @forword","content":"# 取代 @import 的 @use, @forword\n\n\u003e[Kevin Powell 解釋影片](https://www.youtube.com/watch?v=CR-a8upNjJ0)\n\n`@import` 的特性會全域污染，導致不同 `.sass` / `.scss` 檔案中若有命名重複的變數會撞名\n官方建議使用 `@use`, `@forword` 取代\n## @import\n```scss\n@import `font`;\n@import `color`;\n```\n\n## 用 @use 取代\n- 要注意 `@use` 的狀況不會全域污染，所以使用時要標註路徑\n- 可以使用 `as` 來簡化路徑稱呼\n- `as *` 可以直接簡化不用寫路徑\n\n```scss\n@use `font` as f;\n@use `abstract` as *;\n\nh1 {\n\tfont-size: f.$font-size-1;\n}\n\n\n```\n## 集中匯出：@forword\n使用 `@forword` 可以集中分散的檔案到一個 `index.scss` 內\n這個檔案就可以集中匯出給不同的檔案使用\n```scss\n// abstract/index.scss\n@forword `../abstract/font`;\n@forword `../abstract/color`;\n```\n```scss\n// 也可以 as * ，這樣使用起來就跟 import 非常類似\n@use `../abstract`;\n\nh1 {\n\tfont-size: abstract.$font-size-1;\n}\n```\n\n#css/scss","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/%E6%89%B9%E6%AC%A1%E7%94%A2%E7%94%9F%E6%A8%A3%E5%BC%8F-maps-+-each":{"title":"批次產生樣式 maps + @each","content":"# 批次產生樣式 @each\n\n[@each+Sass Maps批次產生各元素樣式](https://github.com/gonsakon/Learn-Sass-in-90-days/blob/master/docs/Sass/%40each%2BSass%20Maps%E6%89%B9%E6%AC%A1%E7%94%A2%E7%94%9F%E5%90%84%E5%85%83%E7%B4%A0%E6%A8%A3%E5%BC%8F.markdown)\n\n## BS 的寫法\n原始碼長這樣\n```scss\n// 先有個 maps\n$types: (\n  primary   :  #428bca,\n  success   :  #5cb85c,\n  info :  #5bc0de,\n  warning    :  #f0ad4e,\n  danger    :  #d9534f\n) !default;\n//按鈕\n\n// 再用 each 產出樣式\n@each $name, $color in $types {\n  .btn-#{$name} {\n    background:$color;\n    color:#fff;\n    border: 1px solid darken($color,5%);\n  }\n}\n```\n\n\n## Sass Maps 是什麼功能？\n先解釋第一段 maps 的部份\n```scss\n$types: (\n  primary   :  #428bca,\n  success   :  #5cb85c,\n  info :  #5bc0de,\n  warning    :  #f0ad4e,\n  danger    :  #d9534f\n)\n```\n這是 Sass 3.3的新的變數設定方式\n```scss\n$variables-group: ( // 看起來很熟悉的變數，但內容是更多的變數\nkey1: value,  // key 是變數名\nkey2: value,\n....\n)\n```\nmaps 功能可以將多個相關的變數群組起來\n\n## @each\n那再來看第二段\n```scss\n@each $name, $color in $types {\n  .btn-#{$name} {\n    background:$color;\n    color:#fff;\n    border: 1px solid darken($color,5%);\n  }\n}\n```\n結構是這樣\n```scss\n// $key, $value 可自訂名稱，分別代表 代入的 $variables-group 的 key, value\n@each $key, $value in $variables-group {\n\t.btn-#{$key} {  // 有多少個 key 就執行多少遍\n\t\tbackground: $value;\n\t}\n}\n```\n\n## 產出的 CSS\n這就是 bs 這樣寫會產出的東西囉\n```css\n.btn-primary {\n  background: #428bca;\n  color: #fff;\n  border: 1px solid #357ebd;\n}\n.btn-success {\n  background: #5cb85c;\n  color: #fff;\n  border: 1px solid #4cae4c;\n}\n```\n\n\n```css\n.btn-key1 {\n\tbackground: value;\n}\n.btn-key2\n...\n```\n\n## ${} 插補\n變數沒辦法直接接在字串上，所以會用\n所以會看到`.btn-#{$key}`的字樣\n（目前還看不懂）\n#css #scss","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/7+1-%E7%B5%90%E6%A7%8B":{"title":"7+1 結構","content":"# 7+1 架構\n###### tags: `css` `scss`\n[Sass Guidelines architecture](https://sass-guidelin.es/#architecture)\n\n## 架構是什麼\n\n## 為何架構重要\ncss 易學難精，寫得當下很很直覺，但事後要做維護確很難\n跟一起學習的夥伴討論時幾乎都講過同句話\n\u003e 回頭要改的時候，覺得重寫最快\n學習起初可能會覺得對於網站，**速度**最重要，趕著學新技巧、做新頁面\n但忽略可維護性、可讀性的後果，一定會是事後浮現\n\n建立一個好架構，難、費時、而且當下不會感受到什麼好處\n[所以我們先參考巨人的肩膀](https://www.sitepoint.com/look-different-sass-architectures/)\n\n\n## Sass 官網提供結構範例\n```shell\nsass/\n|\n|– abstracts/\n|   |– _variables.scss    # Sass Variables\n|   |– _functions.scss    # Sass Functions\n|   |– _mixins.scss       # Sass Mixins\n|   |– _placeholders.scss # Sass Placeholders\n|\n|– base/\n|   |– _reset.scss        # Reset/normalize\n|   |– _typography.scss   # Typography rules\n|   …                     # Etc.\n|\n|– components/\n|   |– _buttons.scss      # Buttons\n|   |– _carousel.scss     # Carousel\n|   |– _cover.scss        # Cover\n|   |– _dropdown.scss     # Dropdown\n|   …                     # Etc.\n|\n|– layout/\n|   |– _navigation.scss   # Navigation\n|   |– _grid.scss         # Grid system\n|   |– _header.scss       # Header\n|   |– _footer.scss       # Footer\n|   |– _sidebar.scss      # Sidebar\n|   |– _forms.scss        # Forms\n|   …                     # Etc.\n|\n|– pages/\n|   |– _home.scss         # Home specific styles\n|   |– _contact.scss      # Contact specific styles\n|   …                     # Etc.\n|\n|– themes/\n|   |– _theme.scss        # Default theme\n|   |– _admin.scss        # Admin theme\n|   …                     # Etc.\n|\n|– vendors/\n|   |– _bootstrap.scss    # Bootstrap\n|   |– _jquery-ui.scss    # jQuery UI\n|   …                     # Etc.\n|\n`– main.scss              # Main Sass file\n```\n\n#### Base folder\n\nThe `base/` folder holds what we might call the boilerplate code for the project. In there, you might find the reset file, some typographic rules, and probably a stylesheet defining some standard styles for commonly used HTML elements (that I like to call `_base.scss`).\n\n-   `_base.scss`\n-   `_reset.scss`\n-   `_typography.scss`\n\nIf your project uses _a lot_ of CSS animations, you might consider adding an `\\_animations.scss` file in there containing the `@keyframes` definitions of all your animations. If you only use a them sporadically, let them live along the selectors that use them.\n\n#### Layout folder\n\nThe `layout/` folder contains everything that takes part in laying out the site or application. This folder could have stylesheets for the main parts of the site (header, footer, navigation, sidebar…), the grid system or even CSS styles for all the forms.\n\n-   `_grid.scss`\n-   `_header.scss`\n-   `_footer.scss`\n-   `_sidebar.scss`\n-   `_forms.scss`\n-   `_navigation.scss`\n\nThe `layout/` folder might also be called `partials/`, depending on what you prefer.\n\n#### Components folder\n\nFor smaller components, there is the `components/` folder. While `layout/` is _macro_ (defining the global wireframe), `components/` is more focused on widgets. It contains all kind of specific modules like a slider, a loader, a widget, and basically anything along those lines. There are usually a lot of files in `components/` since the whole site/application should be mostly composed of tiny modules.\n\n-   `_media.scss`\n-   `_carousel.scss`\n-   `_thumbnails.scss`\n\nThe `components/` folder might also be called `modules/`, depending on what you prefer.\n\n#### Pages folder\n\nIf you have page-specific styles, it is better to put them in a `pages/` folder, in a file named after the page. For instance, it’s not uncommon to have very specific styles for the home page hence the need for a `_home.scss` file in `pages/`.\n\n-   `_home.scss`\n-   `_contact.scss`\n\nDepending on your deployment process, these files could be called on their own to avoid merging them with the others in the resulting stylesheet. It is really up to you.\n\n#### Themes folder\n\nOn large sites and applications, it is not unusual to have different themes. There are certainly different ways of dealing with themes but I personally like having them all in a `themes/` folder.\n\n-   `_theme.scss`\n-   `_admin.scss`\n\nThis is very project-specific and is likely to be non-existent on many projects.\n\n#### Abstracts folder\n\nThe `abstracts/` folder gathers all Sass tools and helpers used across the project. Every global variable, function, mixin and placeholder should be put in here.\n\nThe rule of thumb for this folder is that it should not output a single line of CSS when compiled on its own. These are nothing but Sass helpers.\n\n-   `_variables.scss`\n-   `_mixins.scss`\n-   `_functions.scss`\n-   `_placeholders.scss`\n\nWhen working on a very large project with a lot of abstract utilities, it might be interesting to group them by topic rather than type, for instance typography (`_typography.scss`), theming (`_theming.scss`), etc. Each file contains all the related helpers: variables, functions, mixins and placeholders. Doing so can make the code easier to browse and maintain, especially when files are getting very long.\n\nThe `abstracts/` folder might also be called `utilities/` or `helpers/`, depending on what you prefer.\n\n#### Vendors folder\n\nAnd last but not least, most projects will have a `vendors/` folder containing all the CSS files from external libraries and frameworks – Normalize, Bootstrap, jQueryUI, FancyCarouselSliderjQueryPowered, and so on. Putting those aside in the same folder is a good way to say “Hey, this is not from me, not my code, not my responsibility”.\n\n-   `_normalize.scss`\n-   `_bootstrap.scss`\n-   `_jquery-ui.scss`\n-   `_select2.scss`\n\nIf you have to override a section of any vendor, I recommend you have an 8th folder called `vendors-extensions/` in which you may have files named exactly after the vendors they overwrite.\n\nFor instance, `vendors-extensions/_bootstrap.scss` is a file containing all CSS rules intended to re-declare some of Bootstrap’s default CSS. This is to avoid editing the vendor files themselves, which is generally not a good idea.\n\n#### Main file\n\nThe main file (usually labelled `main.scss`) should be the only Sass file from the whole code base not to begin with an underscore. This file should not contain anything but `@import` and comments.\n\nFiles should be imported according to the folder they live in, one after the other in the following order:\n\n1.  `abstracts/`\n2.  `vendors/`\n3.  `base/`\n4.  `layout/`\n5.  `components/`\n6.  `pages/`\n7.  `themes/`\n\nIn order to preserve readability, the main file should respect these guidelines:\n\n-   one file per `@import`;\n-   one `@import` per line;\n-   no new line between two imports from the same folder;\n-   a new line after the last import from a folder;\n-   file extensions and leading underscores omitted.\n\n```scss\n@import 'abstracts/variables';\n@import 'abstracts/functions';\n@import 'abstracts/mixins';\n@import 'abstracts/placeholders';\n\n@import 'vendors/bootstrap';\n@import 'vendors/jquery-ui';\n\n@import 'base/reset';\n@import 'base/typography';\n\n@import 'layout/navigation';\n@import 'layout/grid';\n@import 'layout/header';\n@import 'layout/footer';\n@import 'layout/sidebar';\n@import 'layout/forms';\n\n@import 'components/buttons';\n@import 'components/carousel';\n@import 'components/cover';\n@import 'components/dropdown';\n\n@import 'pages/home';\n@import 'pages/contact';\n\n@import 'themes/theme';\n@import 'themes/admin';\n```\n\nThere is another way of importing partials that I deem valid as well. On the bright side, it makes the file more readable. On the other hand, it makes updating it slightly more painful. Anyway, I’ll let you decide which is best, it does not matter much. For this way of doing, the main file should respect these guidelines:\n\n-   one `@import` per folder;\n-   a linebreak after `@import`;\n-   each file on its own line;\n-   a new line after the last import from a folder;\n-   file extensions and leading underscores omitted.\n\n```scss\n@import\n  'abstracts/variables',\n  'abstracts/functions',\n  'abstracts/mixins',\n  'abstracts/placeholders';\n\n@import\n  'vendors/bootstrap',\n  'vendors/jquery-ui';\n\n@import\n  'base/reset',\n  'base/typography';\n\n@import\n  'layout/navigation',\n  'layout/grid',\n  'layout/header',\n  'layout/footer',\n  'layout/sidebar',\n  'layout/forms';\n\n@import\n  'components/buttons',\n  'components/carousel',\n  'components/cover',\n  'components/dropdown';\n\n@import\n  'pages/home',\n  'pages/contact';\n\n@import\n  'themes/theme',\n  'themes/admin';\n```\n\n### About globbing\n\nIn computer programming, glob patterns specify sets of filenames with wildcard characters, such as `*.scss`. To a general extent, globbing means matching a set of files based on an expression instead of a list of filenames. When applied to Sass, it means importing partials into the [main file](https://sass-guidelin.es/#main-file) with a glob pattern rather than by listing them individually. This would lead to a main file looking like this:\n\n```scss\n@import 'abstracts/*';\n@import 'vendors/*';\n@import 'base/*';\n@import 'layout/*';\n@import 'components/*';\n@import 'pages/*';\n@import 'themes/*';\n```\n\nSass does not support file globbing out of the box because it can be a dangerous feature as CSS is known to be order-dependant. When dynamically importing files (which usually goes in alphabetical order), one does not control the source order anymore, which can lead to hard to debug side-effects.\n\nThat being said, in a strict component-based architecture with extra care not to leak any style from one partial to the other, the order should not really matter anymore, which would allow for glob imports. This would make it easier to add or remove partials as carefully updating the main file would no longer be required.\n\nWhen using Ruby Sass, there is a Ruby gem called [sass-globbing](https://github.com/chriseppstein/sass-globbing) that enables exactly that behavior. If running on node-sass, one can rely either on Node.js, or whatever build tool they use to handle the compilation (Gulp, Grunt, etc.).\n\n### Shame file\n\nThere is an interesting concept that has been made popular by [Harry Roberts](https://csswizardry.com), [Dave Rupert](https://daverupert.com) and [Chris Coyier](https://css-tricks.com) that consists of putting all the CSS declarations, hacks and things we are not proud of in a [shame file](https://csswizardry.com/2013/04/shame-css-full-net-interview/). This file, dramatically titled `_shame.scss`, would be imported after any other file, at the very end of the stylesheet.\n\n```scss\n/**\n * Nav specificity fix.\n *\n * Someone used an ID in the header code (`#header a {}`) which trumps the\n * nav selectors (`.site-nav a {}`). Use !important to override it until I\n * have time to refactor the header stuff.\n */\n.site-nav a {\n    color: #BADA55 !important;\n}\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/Maps":{"title":"Maps","content":"# Maps\n[## Sass教學 (40) - 使用Sass Maps提升程式可讀、變數群組性](https://ithelp.ithome.com.tw/articles/10161389)\n\n## 從原始碼推敲\n原始碼長這樣\n```sass\n// 先有個 maps\n$types: (\n  primary   :  #428bca,\n  success   :  #5cb85c,\n  info :  #5bc0de,\n  warning    :  #f0ad4e,\n  danger    :  #d9534f\n) !default;\n//按鈕\n\n// 再用 each 產出樣式\n@each $name, $color in $types {\n  .btn-#{$name} {\n    background:$color;\n    color:#fff;\n    border: 1px solid darken($color,5%);\n  }\n}\n```\n\n## Sass Maps 是什麼功能？\n先解釋第一段 maps 的部份\n```sass\n$types: (\n  primary   :  #428bca,\n  success   :  #5cb85c,\n  info :  #5bc0de,\n  warning    :  #f0ad4e,\n  danger    :  #d9534f\n)\n```\n這是 Sass 3.3的新的變數設定方式\n```sass\n$variables-group: ( // 看起來很熟悉的變數，但內容是更多的變數\nkey1: value,  // key 是變數名\nkey2: value,\n....\n)\n```\nmaps 功能可以將多個相關的變數群組起來\n## maps 的進階功能\n### map-get($map , $key)\n取出`$map`裡指定的`$key`，將value取出來。  \n### map-merge($map1, $map2)\n將兩個$map合併起來。  \n### map-remove( $map , $key)\n從Map裡面刪除一個$key。  \n### map-keys($map)\n取出所有的$key。  \n### map-values($map)\n取出所有的value。  \n### map-has-key($map, $key)\n瀏覽裡面是否有$key值，有則回傳true，沒有便回傳false。  \n### keywords($args)\nReturns the map of named arguments passed to a function or mixin that takes a variable argument list. The argument names are strings, and they do not contain the leading $.\n```scss\n$color: (\n    default: #fff,\n    primary: #22ae39\n);\n.box{\n    color: map-get($color,default);\n    background: map-get($color,primary)\n}\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/SCSS":{"title":"SCSS","content":"---\n# SCSS 簡介\n金魚腦用｜[Sass cheatsheet](https://devhints.io/sass)\n\n  \n\n## 介紹\n\n### codepen 的環境下\n-   使用時 css 格式要調整成 scss\n-    view complied css\n\t-   可切換看編譯前後的 css\n### sass and scss 兩種寫法\n#### scss\n接近原本的 css\n#### sass\n空格取代階層\n\n### 編譯軟體\n\n#### Editor 內建編譯軟體\n-   使用沒有支援內建編譯的 Editor 就必須用其他軟體\n-   用過兩種都很當\n-   Live Sass Compiler\n\t-  啟動要開 watch Sass\n練習 bootstrap 時卡到懷疑人生，懷疑寫錯，懷疑 bug\n當到怕，換軟體，真的不要浪費時間\n\n#### Prepos\n-   學長姊老師推薦\n-   但廣告很多\n-  有支援手機上即時預覽\n-  \n#### Scout\n-   開源無廣告\n-   目前用起來覺得蠻好用的\n-   介面有點顯眼，但可以自訂主題\n-   謎因萬歲\n\n#### gulp webpack前端任務 / 打包工具 (JS)\n-   學習曲線較高","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/dart-sasssass-%E5%BB%BA%E7%BD%AE":{"title":"dart-sass(sass) 建置","content":"# dart-sass (sass) 建置\n\n\u003e[Install Sass](https://sass-lang.com/install)\n\u003e[Sass Basics](https://sass-lang.com/guide)\n\n##  安裝到電腦 (global)\n### npm\n```shell\nnpm i -g sass\n```\n### Homebrew (Mac)\n[the Homebrew package manager](https://brew.sh/)\n```\nbrew install sass/sass/sass\n```\n\n### From Chocolatey or Scoop (Windows)\n\n [the Chocolatey package manager](https://chocolatey.org/)\n```shell\nchoco install sass\n```\n或\n[the Scoop package manager](https://github.com/lukesampson/scoop) \n```shell\nscoop install sass\n```\n\n\u003e## 加入到 vite 專案\n\u003e引用官方文件：\n\u003e ```shell\n\u003enpm add -d sass \n\u003e ```\n\n## 執行指令\n運行將 `.sass`, `.scss` 編譯成 `.css` 的指令\n```shell\nsass \u003c路徑/all.scss\u003e \u003c路徑/all.css\u003e\n```\n\n## 即時監控更新\n每次寫新的 Sass 就要執行一次指令不太實際，可以使用 `-w` （ `--watch` 的縮寫）來執行 \n```shell\nsass --w \u003c路徑/all.scss\u003e \u003c路徑/all.css\u003e\n```\n\n### 簡化指令（選用）\n在使用 [[Node]] 環境下， `package.json` 可以加入 `scripts` 方便執行指令更快速\n舉例這裡新增 `build-css` 的指令後，就可以縮短這整串，直接輸入 `npm run build-css` 即可\n```json\n\"scripts\": {\n\t\"build-css\": \"sass -w src/style/scss/all. scss src/style/all. css\"\n},\n```\n\n\n#vite #js/react #css/scss #node/npm","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/scss/default":{"title":"!default","content":"# !defalut\n只會吃第一個設定好的 !default 變數","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/spacer":{"title":"spacer","content":"## padding\n\n-   如果寫%，是拿 所屬上層 block 的寬度作為基準\n\n## margin-top, bottom\n不要用%\nline-height, 或是單位rem, px\n\n## margin-left, right\n可用%\n\n## padding \n沒辦法autoㄉ\n\n\n#css #padding #margin #spacer","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/text-nowrap":{"title":"text-nowrap","content":"https://bootstrapshuffle.com/classes/text/text-nowrap","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/CSS/transition":{"title":"transition","content":"```css\nh1 {\n// property name(屬性), duration(時間), timing function(加速度)\n\ttransition: all 0.6s ease-in; \n}\n\n// 如果只有要一個屬性改變\nh1 {\n// property name(屬性), duration(時間), timing function(加速度)\n\ttransition: background-color 0.6s ease-in; \n}\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Electron":{"title":"Electron","content":"# Electron\n[Electron](https://www.electronjs.org/)\n\n用 JS, HTML, CSS 寫桌面軟體","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/GTM":{"title":"GTM","content":"### GTM\nhttps://inboundmarketing.com.tw/websites-optimization/gtm%E6%95%99%E5%AD%B8-%E6%96%B0%E6%89%8B%E8%A7%80%E5%BF%B5%E7%AF%87.html","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Google-font-Material-icon-%E5%AE%89%E8%A3%9D":{"title":"Google font, Material icon 安裝","content":"# Google font, Material icon 安裝方式\n###### tags: `Sz` `CDN` `2021夏季切版班`\n\n以下都是將檔案從雲端提出來用的方法（依賴對方的網路狀態）\n所以不需要把檔案下載下來（下載下來沒特別作處理，也沒辦法上傳，只有你的電腦看得到）\n而提取的動作就是掛上對方的 CDN ，檔案就知道這個資料不會從資料夾去找，會去他的網站找的意思\n[Google fonts 網站](https://fonts.google.com/?selected=Material+Icons:store)\n[Material icons 網站](https://fonts.google.com/icons?selected=Material+Icons:store)\n\n## Google font\n1. 選好字體後，\n![](https://i.imgur.com/NIH9kog.png)\n2. 這串複製貼到 html 的 head 就可以囉\n3. 之後 CSS 裡就可以取用這些字體使用了（在 css 裡面沒有拿出來用也不會有效果喔）\n\n## Material icon 安裝方式\n1. 進去 instructions\n![](https://i.imgur.com/R375kZ4.png)\n2. 進去 [第一個單元](https://developers.google.com/fonts/docs/getting_started)\n![](https://i.imgur.com/aiRO3UR.png)\n3. 進去後 左邊 [sidebar Material Icons Guide](https://developers.google.com/fonts/docs/material_icons)\n![](https://i.imgur.com/1X0deZJ.png)\n4. 這裡就是 Material Icons 的用法說明書了\n   用法很多種，找自己懂的，去找 CDN，一樣複製到 head 去\n![](https://i.imgur.com/bbzoTjF.png)\n:::info\n細部調整 icon 如何使用可以再細讀[Material Icons Guide](https://developers.google.com/fonts/docs/material_icons)\n:::\n5. 這樣檔案就能辨識這個網站給的語法了\n![](https://i.imgur.com/SCoIvnj.png)","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/Material-icon-Outlined-%E7%94%A8%E6%B3%95":{"title":"Material icon Outlined 用法","content":"# Material icon Outlined 用法 by Sz\n###### tags: `Sz` `2021夏季切版班`\n## 懶人包\n1.  icon 的 CDN，外框版本\n```html\n\u003clink href=\"https://fonts.googleapis.com/icon?family=Material+Icons+Outlined\"\n      rel=\"stylesheet\"\u003e\n```\n2. 不知道關鍵字對 XD 上的 icon 右鍵就知道囉\n\n\n## Material icon 使用方法\n這篇用掛 CDN 直接載入（可以看這篇 [Material icon, Google font 安裝方式](/3hVBtQrmRoGt9mxjTMDNhQ)）\n\n但這次眼鏡網站的作業不知道為什麼沒找到\n![](https://i.imgur.com/MkfagSH.png)\n但真的硬搜還是找得出類似的圖片\n![](https://i.imgur.com/F0Ul4X5.png)\n後來發現其實預設搜尋會是「填滿 filled」的類型\n![](https://i.imgur.com/hMSP4ox.png)\n改成 Outlined 就找得到只有外框的類型囉\n![](https://i.imgur.com/IjFLQM3.png)\n\n## 如何使用 Outlined 版本\n[Material Icons Guide](https://developers.google.com/fonts/docs/material_icons) 裡面提供的是 filled 的載入方法，沒找到介紹，只好自己推敲\n### 預設的 icon 語法＆字體\n![](https://i.imgur.com/lfIMeNi.png)\n### Outline 的語法＆字體\n![](https://i.imgur.com/OBHCp81.png)\n推測應該是字體的不同\n### 造樣造句\n那就把原本的\n```html\n\u003clink href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      rel=\"stylesheet\"\u003e\n```\n改成\n```html\n\u003clink href=\"https://fonts.googleapis.com/icon?family=Material+Icons+Outlined\"\n      rel=\"stylesheet\"\u003e\n```\n（成功ㄌ欸）\n\n## 不知道英文關鍵字是什麼哭阿\n![](https://i.imgur.com/htGWZDe.png)\n沒關係 XD 賜你力量\n應該作者如果沒改名稱，對 icon 右鍵應該就找得到他的名稱了\n~~why voicemail~~","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/W3C-valid":{"title":"W3C valid","content":"https://twitter.com/html_css_1min/status/1466531622333808643?s=20\nVS code 插件：[W3C Validation]","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/%E5%9C%96%E5%83%8F/webP":{"title":"webP","content":"https://twitter.com/Freelance_ta/status/1435087886030807040?s=20\n\nhttps://squoosh.app/","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88%E6%A8%99%E7%B1%A4":{"title":"文字排版標籤","content":"# 文字排版\n## 標籤\n- `\u003chr\u003e`：段落分隔線\n- `\u003cpre\u003e`：等距排版（[[pre]]）\n- `\u003cbr\u003e`：換行\n- \n## 屬性\n- `text-intent`：段落首行縮排\n\n## 其他\n[HTML Symbols](https://www.htmlsymbols.xyz/)","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/%E6%96%87%E5%AD%97%E6%8E%92%E7%89%88/pre":{"title":"pre","content":"# pre 標籤與通用字體 by Sz\n###### tags: `Sz` `HTML` `2021夏季切版班`\n\n有錯再跟我反應QQ\n## `\u003cpre\u003e`是什麼\n\u003e [`\u003cpre\u003e` 的解釋 by MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/pre)\n\u003e 現在不點開沒關係，下方也會附上，到時候再看就好\n\n但是跳過預備知識很難講，讓我先從前面開始說起\n## `font-family`\n在 `font-family` 我們會去定義頁面上的字體\n避免字體檔案很大，拖垮網路速度，通常會建議使用內建字體\n:::info\n如果有更多美感的需求\n可能會採用雲端字體（還有其他方法但這裡不提）\n常見的有：\n- Google fonts（全球、免費、中文就思源一套）\n- justfont（台灣、付費、中文字體多）\n\n漢字圈的字體使用邏輯跟西文圈是不一樣的\n使用漢字一個字體檔案就是幾萬字起跳，檔案大小完全不能與西文字體相比。\n（目前也先不提）\n:::\n\n## `font-family`的 `\u003cgeneric-name\u003e` 屬性\n很遺憾的，每台裝置的內建字體其實都不一樣，windows、mac、android 等等等\n很難真的針對所有人的設備去設定\n所以有了這個`\u003cgeneric-name\u003e`屬性\n\n這個屬性在設計師眼裡，就是我們的底線，不加不行\n加了之後，至少所有人看這網站的整體調性會是一致的\n![](https://i.imgur.com/2ejPnwv.png)\n你說你不懂整體調性？那你可以先跟設計師打一架了，還有，祝你最好不要遇到字體設計師\n但其實我也不知道這是不是設計師的基本知識（哭阿）\n\n- 黑體通常會為了螢幕顯示做最佳調整\n- 明體通常在印刷上會有比較好的表現\n\n但當然，你螢幕超好、印刷工具超高級，你選什麼字體都好，祝你客戶跟他的消費者都超有錢\n一切都是預算決定\n:::warning\n認真講，字體選用還有其他內文跟標題的差別，這裡不提\n:::\n\n## 通用字體類型\n- sans-serif\n- serif\n- monospace\n- **還有更多**\n\n### sans-serif \n無襯線字體，意思就是筆劃從頭到尾幾乎都是一樣粗，中文通常字體名稱會叫「XX黑體」\n### serif\n襯線字體，被新細明體害慘的系列，與 sans-serif 相反，他就是筆劃有粗細變化的字體\n通常中文會是 「AA明體」、「BB宋體」\n搞不懂是什麼，至少不要在設計師面前說什麼 serif 都是新細明體，氣死\n### monospace\n等寬字體，等寬字體通常都是以上的字體，做成的等寬版本\n平常排版很難用到，除非是需要程式碼風格\n```\nHello monospace\n11111 111111111\n22222 222222222\nDifferent words, but same width. // 英文寫錯鞭小力點\n```\n\n## 等寬與不等寬\n\n\n## 中文字體的字體寬度\n寫過作文就知道\n漢字是方塊與方塊組成的，每一個字站一格，標點符號也佔一格\n這就是漢字圈的使用方式，**純漢字的情況下本來就是等寬的**\n我們沒什麼機會接觸到不等寬的狀況。\n\n## 西文字體的字體寬度\n### 不太正統的狀況\n但用電腦時，有些人寫中文也會把全型半型混用\n\u003e 「像是這樣寫文章, 覺得這樣很棒, 或是不知道怎麼開全型標點符號.」\n\n這就是混入西文字體的概念了，全型就是一格一格，半型則不遵守這個規定\n恭喜你，你的中文文章大概永遠都會無法上下對齊\n\u003e像,這樣,\n\u003e歪歪的,句尾,\n\u003e就是有點,跟上排錯開.\n\n### 正統的半型，西文字體\n正統的半型就像是剛提到的 sans-serif, serif，與純漢字相反，這是西文的自然狀態\n\n#### 魔鬼的細節\n![](https://i.imgur.com/nDiUNAX.png)\n像這張圖，這個 ti 的寫法，字體設計師就可以設計好幾種，去符合各種需求\n扯遠了，我們只需要知道他不等寬就好了\n\n\n## 終於可以講 `\u003cpre\u003e`\n\u003e [`\u003cpre\u003e` 的解釋 by MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/pre)\n\u003e 對我沒打算細講，自己看\n\n通常他是使用在等寬字體（monospace）的一種排版模式\n\n為什麼會用等寬字體呢？因為等寬，所以不容易排版跑掉，大家都是一個一個對得很好\n但跟上面說的一樣，這個不符合「自然的西文狀態」\n除非特殊需求，不然他看起來就會很像程式碼喔XD\n\n\u003e 可能會想查查看 acscii art，用文字作畫的一種風格\n\n我不負責任的覺得應該看到這邊，再去用 `\u003cpre\u003e` 應該就不太會出事了……吧","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/%E8%B3%87%E6%96%99/table":{"title":"table","content":"---\n# table\n\n![](https://i.imgur.com/uy93kDm.png)\n\n```html\n\u003ctable class=\"table\"\u003e\n\t\u003ccaption\u003ecaption 為表格標題\u003c/caption\u003e\n\t\u003c!-- 對縱向 column 群組設定樣式 --\u003e\n\t\u003ccolgroup\u003e\n\t\t\u003ccol /\u003e\n\t\t\u003ccol /\u003e\n\t\t\u003ccol span=\"1\" class=\"bg-secondary-light\" /\u003e\n\t\t\u003ccol /\u003e\n\t\t\u003ccol span=\"1\" class=\"bg-secondary-light\" /\u003e\n\t\t\u003ccol /\u003e\n\t\t\u003ccol span=\"1\" class=\"bg-secondary-light\" /\u003e\n\t\u003c/colgroup\u003e\n\t\u003cthead\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth scope=\"col\"\u003eth：每 row 都要用 tr 包起來\u003c/th\u003e\n\t\t\t\u003cth scope=\"col\"\u003eth\u003c/th\u003e\n\t\t\t\u003cth scope=\"col\"\u003eth，用 colgroup 上縱向樣式\u003c/th\u003e\n\t\t\t\u003cth scope=\"col\"\u003eth\u003c/th\u003e\n\t\t\t\u003cth scope=\"col\"\u003eth\u003c/th\u003e\n\t\t\t\u003cth scope=\"col\"\u003eth\u003c/th\u003e\n\t\t\t\u003cth scope=\"col\"\u003eth\u003c/th\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/thead\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth scope=\"row\"\u003eth：th 有兩種\u003cbr/\u003erow 或 col 的標題\u003cbr/\u003e用 scope 屬性區分\u003c/th\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\t\u003ctd colspan=\"2\" className=\"border border-4 border-secondary\"\u003etd:用 colspan 橫向合併\u003c/td\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\t\u003ctd rowspan=\"2\" className=\"border border-4 border-secondary\"\u003etd：用 rowspan 縱向合併\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003cth scope=\"row\"\u003eth\u003c/th\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\t\u003ctd\u003etd\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/a-anchor-tag-%E8%B6%85%E9%80%A3%E7%B5%90":{"title":"a anchor tag 超連結","content":"# anchor tag\n```scss\n// 順序\n\u0026:hover\n\n\u0026:focus,\n\n\u0026:active\n```\n\n![[heading(h)#^d158d1]]\n\n#未完成 #html/anchor","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/base/%E8%B7%AF%E5%BE%91":{"title":"Untitled Page","content":"# 路徑 file path\n## 相對路徑 \n表示當前目錄：`.`\n表示上層目錄：`..`\n## 絕對路徑\nURL","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/base/anchor-tag-a":{"title":"anchor tag (a)","content":"# anchor tag\n```html\n\u003ca href=\"路徑\" target=\"_self\"\u003e\n```\n\n## [[路徑]]\n- 相對路徑\n- 絕對路徑\n\n## target\n- `_self`：預設\n- `_blank`：新頁面\n- `_parent`\n- `_top`","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/base/button":{"title":"button","content":"# button 標籤\n- 不是 form 專用 type submit 的 input，button 在有 JS 客製化 event 時用\n- 要用的話記得加 `type` 確保正常運作\n\n#form #html","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/base/headingh":{"title":"heading(h)","content":"# heading\n## heading 順序\nh1\u003ea 才對，不要寫 a\u003eh1 ^d158d1\n\n## 數量\n只有 h1-h6，沒有 h7 以上喔\n\n## 使用準則\n依照重要度，非字體大小","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/data-attribute%E8%87%AA%E8%A8%82-HTML-%E5%B1%AC%E6%80%A7":{"title":"data attribute：自訂 HTML 屬性","content":"# data attribute：自訂 HTML 屬性\n\u003e[使用數據屬性(data attribute)](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Howto/Use_data_attributes)\n\n在 HTML 上可以任意自訂 `data-*` 的屬性，使 JS 可以輕易訪問\n```html\n\u003carticle\n  id=\"文章\"\n  data-bunch-of-numbers=\"12314\"\n\u003e\n...\n\u003c/article\u003e\n```\n\n\n## 如何用 JS 訪問\n- `getAttribute()`\n- `DOMStringMap` 的 `dataset`\n\n```js\nvar article = document.querySelector('#文章');\n\n// 記得原本用 - 連接的字要用 camelCase 拼\narticle.dataset.bunchOfNumbers // \"12314\"\n```\n\n\n## 用 CSS 訪問\n### 讀取\n```css\narticle::before {\n  content: attr(data-bunch-of-numbers);\n}\n```\n### 當作屬性選擇器\n```css\narticle[data-bunch-of-numbers='12314'] {\n  width: 400px;\n}\n\n```\n#html #js #js/dom","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/Form":{"title":"Form","content":"# Form\n-   [[form 標籤]] \n    -   action → API 網址、[[Database 數據庫]]\n    -   method → 對應方法，GET（公開）, POST（非公開）\n\n## [[Form]] 標籤內可用的標籤\n-   [[input]] 標籤\n    -   type → input 的類型：submit, number, text... \n    -   name → 對應的後端欄位\n    -   id → 對應 [[label]] 的 for\n    -   placeholder → 給予用戶的說明文字\n-   [[label]] 標籤\n    -   for → 對應 [[input]] 的 id\n-   [[button]] 標籤（不建議用，建議用 [[input]]）\n    -   type → 按鈕類型，預設為 submit\n-  [[select \u0026 datalist 選單]]\n-  [[textarea]]\n\n#form #html","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/fieldsetform":{"title":"fieldset(form)","content":"# fieldset\n`\u003cfieldset\u003e` 搭配 `disabled` 可以一次禁用整個區域 ^c9e148\n\n```html\n\u003cform\u003e\n  \u003cfieldset disabled\u003e\n    \u003clegend\u003eDisabled fieldset example\u003c/legend\u003e\n    \u003cdiv class=\"mb-3\"\u003e\n      \u003clabel for=\"disabledTextInput\" class=\"form-label\"\u003eDisabled input\u003c/label\u003e\n      \u003cinput type=\"text\" id=\"disabledTextInput\" class=\"form-control\" placeholder=\"Disabled input\"\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"mb-3\"\u003e\n      \u003clabel for=\"disabledSelect\" class=\"form-label\"\u003eDisabled select menu\u003c/label\u003e\n      \u003cselect id=\"disabledSelect\" class=\"form-select\"\u003e\n        \u003coption\u003eDisabled select\u003c/option\u003e\n      \u003c/select\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"mb-3\"\u003e\n      \u003cdiv class=\"form-check\"\u003e\n        \u003cinput class=\"form-check-input\" type=\"checkbox\" id=\"disabledFieldsetCheck\" disabled\u003e\n        \u003clabel class=\"form-check-label\" for=\"disabledFieldsetCheck\"\u003e\n          Can't check this\n        \u003c/label\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSubmit\u003c/button\u003e\n  \u003c/fieldset\u003e\n\u003c/form\u003e\n```\n\n## 包含自訂按鈕需要額外……\n如果有自訂的按鈕元素在 fieldset 內，則需要額外再加入\n- `tabindex=\"-1\"` ：防止用鍵盤聚焦\n- `aria-disabled=\"disabled\"` ：輔助技術傳達狀態\n\n#html #bs/form #form","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/form-%E6%A8%99%E7%B1%A4":{"title":"form 標籤","content":"## form 標籤\n```html\n\u003cform\n\taction=\"資料傳送的目的地（到後端）\" \n\tmethod=\"預設GET（公開），POST（非公開）\"\n\u003e\n\u003c/form\u003e\n```\n- 與後端（[[Database 數據庫]]）相關的標籤\n- 需要傳送的資料都要寫在這個標籤裡，不然不會傳輸\n\n- action: 傳輸目的地，[[Database 數據庫]]、API 位置\n- method: 執行的請求動作（[[HTTP request]] 中 HTML 可以執行的有：GET, POST）\n\t- GET：公開，會顯示在網址（[[Query]]）\n\t- POST：不會公開，需要安全性的資料要選這個\n\n\n\n#html #form #request","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/input":{"title":"input","content":"#  input tag\n\u003e [[label]] 的 for 屬性內容對應 [[input]] 的 id 屬性內容，互成一組\n- 選單用這個：[[select \u0026 datalist 選單]] \n```html\n\u003clabel for=\"對應 input 的 id\"\u003e\u003c/label\u003e\n\u003cinput \n\ttype=\"多種類型，限定 input 內容類型\" \n\tname=\"最重要屬性，代表會被提交，在網址上也會顯示\" \n\tid=\"（這裡需與 label for 相同）\"\n\tplaceholder=\"value 為空時，暫存預設輸入框內容\"\n\tvalue=\"會被送出的值，也可以設定預設值\"\n\t\n\t\u003c!-- \n\t禁止輸入的兩種屬性 \n\t\tdisabled（不會傳輸資料）\n\t\treadonly（會傳輸資料）\n\t--\u003e\n\t\n\t\u003c!-- 驗證，通常用不到會自己刻 --\u003e\n\trequired\n\u003e\n```\n\n## 提交的內容\n提交有 `name` 的資料， `value` 是傳輸的值\n`type=\"checkbox\"` 這種只能勾選的類型一定要 value\n`type=\"text\"` 可以輸入內容，就不用\n\n## required（必填項目）\n沒有符合格式要擋掉，通常會手刻取代這個\n\n## 常見 type\n```html\n\u003cinput \n\ttype=\"多種類型，限定 input 內容類型\" \n\u003e\n```\n[input 標籤](https://developer.mozilla.org/ja/docs/Web/HTML/Element/input)\n### 選擇 checkbox（任選）／radio（單選）\n一個選項對應一個 label\n```html\n\u003cinput \n\ttype=\"checkbox\"\n\tname=\"訂閱\"\n\t\n\t\u003c!-- 有勾才會送出 value --\u003e\n\tvalue=\"是\"\n\t\n\t\u003c!-- 可預設勾起 --\u003e\n\tchecked\n\u003e\n``` \n\n#### name 相同為同一群組\n```html\n\u003clabel for=\"性別\"\u003e女\n\u003cinput\n\tid=\"性別\"\n\tname=\"性別選項\"\n\ttype=\"ratio\"\n\tvalue=\"女\"\n\t\n\t\u003c!-- 寫在第一個就可以了 --\u003e\n\trequired  \n\u003e\n\u003c/label\u003e\n\n\u003clabel for=\"性別\"\u003e男\n\u003cinput\n\tid=\"性別\"\n\tname=\"性別選項\"\n\ttype=\"ratio\"\n\tvalue=\"男\"\n\u003e\n\u003c/label\u003e\n``` \n### number\n信用卡不是用這個類型\n```html\n\u003cinput \n\ttype=\"number\"\n\tname=\"年齡\"\n\tplaceholder=\"請填入年齡\"\n\n\tvalue=\"\"\n\t\n\t\u003c!-- 限制數字範圍，防止無效數值 --\u003e\n\tmin=\"0\"\n\tmax=\"150\"\n\t\n\t\u003c!-- 單位，一次增減多少 --\u003e\n\tstep=\"0.01\"\n\u003e\n```\n\n### range\n拉桿，number 的變形\n```html\n0\u003cinput \n\ttype=\"range\"\n\tname=\"password\"\n\tvalue=\"\"\n\t\n\t\u003c!-- 字串使用 length 限制 --\u003e\n\tmin=\"0\"\n\tmax=\"100\"\n\t\n\t\u003c!-- 單位，一次增減多少 --\u003e\n\tstep=\"0.01\"\n\u003e\n100\n```\n\n### password\n記得要用 form method post，加密注意\nshow password 需要寫 JS\n```html\n\u003cinput \n\ttype=\"password\"\n\tname=\"password\"\n\tvalue=\"\"\n\t\n\t\u003c!-- 字串使用 length 限制 --\u003e\n\tminlength=\"8\"\n\tmaxlength=\"12\"\n\u003e\n```\n\n\n\n-   email\n-   file\n-   number\n-   password\n\n\n\n### date 不建議使用\n格式、時區不一樣，通常會用套件\n例如 datepicker (jQuery)\n\u003e [[vanillajs-datepicker]]\n\u003e![[vanillajs-datepicker#^e804de]]\n\n[react-datepicker](https://github.com/Hacker0x01/react-datepicker)\n#form #html","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/label":{"title":"label","content":"# label tag\n\u003e [[label]] 的 for 屬性內容對應 [[input]] 的 id 屬性內容，互成一組\n- input 的標籤（不強制使用）\n- 點擊 `label` 就會反白 `input`\n- 不要把 placeholder 當 label \n- 若有 p tag 不要包在裡面\n\n## 架構\n```html\n\u003c!-- 用 div 包 --\u003e\n\u003cdiv\u003e\n\t\u003clabel for=\"myName\"\u003e姓名\u003c/label\u003e\n\t\u003cinput type=\"text\" id=\"myName\"\u003e\n\u003c/div\u003e\n```\n```html\n\u003c!-- 用 label 包 --\u003e\n\u003c!-- 用 label 包起來的 input 因為關係明顯， for, id 非必要--\u003e\n\u003clabel for=\"myName\"\u003e姓名\n\t\u003cinput type=\"text\" id=\"myName\"\u003e\n\u003c/label\u003e\n```\n\n\n#form #html","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/select-datalist-%E9%81%B8%E5%96%AE":{"title":"select \u0026 datalist 選單","content":"#  select \u0026 datalist\n[select](https://developer.mozilla.org/ja/docs/Web/HTML/Element/select)\n\n兩者差別在 `select` 只能選取 `option` 內容\n`datalist` 可自填\n\n## select\nvalue 要記得寫\n```html\n\u003cselect name=\"choice\" required\u003e\n\n\t \u003c!-- 空白的選項是不能送出的 --\u003e\n\t \u003coption\u003e\u003c/option\u003e\n\n\t \u003c!-- 也可以自訂預設選項 --\u003e\n\t \u003coption value=\"first\" selected\u003e第一個選項\u003c/option\u003e\n\t \n\t \u003coption value=\"second\"\u003e第二個選項\u003c/option\u003e\n\t \u003coption value=\"third\"\u003e第三個選項\u003c/option\u003e\n\u003c/select\u003e\n```\n\n\n## datalist\n為一個 input 的候選清單，實際送出的值會是 value ，不一定是字面上的內容\n![](https://i.imgur.com/mADrmTJ.png)\n![](https://i.imgur.com/klYQhsr.png)\n資料會是台中市而非台中\n\n```html\n\u003cinput \n\ttype=\"text\" \n\tname=\"area\" \n\t\u003c!-- 需特別註明對應 datalist --\u003e\n\tlist=\"areaList\"\n\u003e\n\u003cdatalist \n\t\u003c!-- 需特別註明對應 input --\u003e\n\tid=\"areaList\"\n\u003e\n\t \u003coption\u003e\u003c/option\u003e\n\t \u003coption value=\"first\"\u003e第一個選項\u003c/option\u003e\n\t \u003coption value=\"second\"\u003e第二個選項\u003c/option\u003e\n\t \u003coption value=\"third\"\u003e第三個選項\u003c/option\u003e\n\u003c/datalist\u003e\n```\n\n### select 不要修改\n- [ ] 點選的地方\n- [x] 下拉選單\n- [x] 手機版的樣式","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/textarea":{"title":"textarea","content":"# textarea\n[mdn](https://developer.mozilla.org/ja/docs/Web/HTML/Element/textarea)\n\n```html\n\u003ctextarea\n\tcols=\"10\"\n\trows=\"20\"\n\u003e\n\n\u003c/textarea\u003e\n```\n\n#html #form","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/form/vanillajs-datepicker":{"title":"vanillajs-datepicker","content":"# vanillajs-datepicker\n\u003e[vanillajs-datepicker](https://mymth.github.io/vanillajs-datepicker/#/?id=other-frameworks)\n\n不推薦直接使用原生的 `input:date`\n```shell\nnpm install --save-dev vanillajs-datepicker \n```\n\n^e804de\n\n#node/npm #js/module #bs/form #from #未完成","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/CDN":{"title":"CDN","content":"# 常用 cdn\n\n[Material Icons Guide  |  Google Fonts  |  Google Developers](https://developers.google.com/fonts/docs/material_icons)\n\n#html #cdn","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/HTML-skeleton":{"title":"HTML skeleton","content":"# HTML skeleton (Boilerplate)\n網頁構成的骨架\n- `html`\n  - [[\u003chead\u003e]]\n  - `body`\n  - 或是加上 `footer`（應該不是 `body` 裡面的那個）\n\n\n## 實際架構\n```html\n  \u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead lang=\"語系\"\u003e\n    \u003c!-- 編碼 --\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e \n    \u003c!-- name=\"視窗\" content=\"寬度等於載具寬, 內容是否要放大\" --\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003c!-- 強制舊版 IE 更新 --\u003e\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n    \u003c!-- 讓 google 更容易搜尋到這個網站 --\u003e\n    \u003cmeta name=\"robots\" content=\"index, follow\"\u003e\n    \u003c!-- 關於網站的敘述，搜尋時會看到的說明 --\u003e\n    \u003cmeta name=\"description\" content=\"這裡說明網站簡介\"\u003e\n    \u003c!-- 作者 --\u003e\n    \u003cmeta name=\"author\" content=\"作者\"\u003e\n    \u003c!-- 標題 --\u003e\n    \u003ctitle\u003eDocument\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/head":{"title":"\u003chead\u003e","content":"# head\n[head 內容指南](https://htmlhead.dev/)\n\n## meta\n必放\n- charset\n- viewport\n\n### name\n- viewport：設定網頁顯示\n- robots：搜尋引擎更容易搜尋\n- description：搜尋引擎上的簡介\n- author：作者\n\n## base tag\n`\u003cbase\u003e`設定全域的 anchor tag 的 [[anchor tag (a)#target]]\n可再透過個別 anchor tag 內設定來覆蓋\n\n```html\n\u003cbase target=\"_blank\"\u003e\n```\n#html","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/skeleton/html-lang":{"title":"html lang","content":"# Html lang\nHTML 5 版本\n[HTML5的lang速查 ( 注意：繁體中文不是zh-TW喔 )](https://vector.cool/html5%E7%9A%84lang%E9%80%9F%E6%9F%A5-%E6%B3%A8%E6%84%8F%EF%BC%9A%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E4%B8%8D%E6%98%AFzh-tw%E5%96%94/)\n\n```html\n\u003c!DOCTYPE html\u003e \n\u003chtml  lang=\"zh-Hant-TW\"\u003e\n  \u003chead\u003e\n    \u003ctitle\u003epage title\u003c/title\u003e\n  \u003c/head\u003e \n  \u003cbody\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/table/caption-%E8%A1%A8%E6%A0%BC%E6%A8%99%E9%A1%8C":{"title":"caption 表格標題","content":"# caption\n表格標題，請放在 table 內第一個標籤\n\n## 樣式\n\u003e[mdn](https://developer.mozilla.org/ja/docs/Web/CSS/caption-side)\n\n`caption-side` 設定 caption 該位於 table 的哪裡\n```css\ncaption-side: top;\n```\n\n\n#html/table","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%89%8D%E7%AB%AF/html/table/colgroup-%E8%A1%A8%E6%A0%BC%E7%B8%B1%E5%90%91%E7%BE%A4%E7%B5%84%E7%94%A2%E7%94%9F%E6%A8%A3%E5%BC%8F":{"title":"colgroup 表格縱向群組產生樣式","content":"# colgroup 表格縱向群組產生樣式\n\u003e[mdn](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/colgroup)\n\n```html\n\u003ccolgroup\u003e\n  \u003ccol /\u003e\n  \u003ccol /\u003e\n  \u003ccol span=\"1\" class=\"bg-secondary-light\" /\u003e\n  \u003ccol /\u003e\n  \u003ccol span=\"1\" class=\"bg-secondary-light\" /\u003e\n  \u003ccol /\u003e\n  \u003ccol span=\"1\" class=\"bg-secondary-light\" /\u003e\n\u003c/colgroup\u003e\n```\n![](https://i.imgur.com/cuAS0fe.png)\n\n#html/table #css","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/AJAX":{"title":"AJAX","content":"# AJAX (Asynchronous JavaScript And XML)\n- 拿來接 [[API]]\n- 接 [[Mongoose]] / [[Express.js]]\n- 其他人的 API\n- 能在不更新整個頁面的前提下維護資料。可以加速回應資料，避免重複傳送沒有改的資訊\n\n\n\n- [[Async（目錄）]]\n#js #api #ajax #async","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Callback-Hell":{"title":"Callback Hell","content":"# Callback Hell\n![](https://miro.medium.com/max/721/0*iiecmuTLPBqbxd5V.jpeg)\n早期沒有 [[Promise]] 功能的時候，要用很多個 callback 功能來達成，但功能一複雜就會形成 [[Callback Hell]]\n```js\nfunction getData(name) {\n\tsetTimeout(() =\u003e {\n\t\treturn {\n\t\t\tname,\n\t\t\tage: Math.floor() * 20,\n\t\t\tmajor: \"CS\"\n\t\t};\n\t}, 2000);\n}\nconsole.log('start');\n\n// 執行的時候 let 還得不到結果，log undefined\nlet data = getData('Wilson');\nconsole.log(data);\n\nconsole.log('end');\n```\n## 要得到結果的話……\n```js\n\nfunction getData(name, callback) {\n\tsetTimeout(() =\u003e {\n\t// 改成 callback\n\t\tcallback( {\n\t\t\tname,\n\t\t\tage: Math.floor()) * 20,\n\t\t\tmajor: \"CS\"\n\t\t});\n\t}, 2000);\n}\n\nfunction getMovies(age, callback) {\n\tif(age \u003c 12) {\n\t\tsetTimeOut(() =\u003e {\n\t\t\tcallback('cartoon');\n\t\t}, 1500);\n\t} else {\n\t\tsetTimeout(() =\u003e {\n\t\t\tcallback('teen movies');\n\t\t}, 1500);\n\t}\n}\n\nconsole.log('start');\n\n// 串越多個資料就要不停的 nest 下去\n// callback hell\nlet data = getData('Wilson', (obj) =\u003e {\n\tgetMovies(obj.age, (str) =\u003e {\n\t\tconsole.log(str);\n\t})\n});\nconsole.log(data);\n\nconsole.log('end');\n```\n\n#js #api #promise #async","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Event-Queue":{"title":"Event Queue","content":"# Event Queue\nJS 屬於 single-[[thread]]\t的語言，一次只能處理一件事\n\nEvent Queue 利用時間差做出類似可以處理很多事的效果\n\n## 非同步的語言\n但 JS 裡面也有非同步的語言，他們屬於 WebAPI\n- 計時器\n- Ajax\n- Promise\n\n## \n```js\nconsole.log(\"a\");\nfunction run() {\n\tconsole.log(\"b\");\n}\nsetTimeOut(run, 0);\t\t// 產生一個 Queue 等 0 秒執行 run()\nconsole.log(\"c\");\n\n// log 的順序為\n// a -\u003e c -\u003e b\n```\n\n#js #event #ajax #async #callstack","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Promise":{"title":"Promise","content":"---\n  # Promise\n- 解決早期的 [[Callback Hell]] 現象\n- 是一個 [[object]]，要用 [[Constructor]] function (`new`)來生成，生成的 object 要放入一個 function\n- 分為兩個結果，resolve, reject，前者回傳資訊（`then`），後者回傳錯誤資訊（`catch`）\n- [[async, await, try, catch]] 可以改寫\n- 搭配原生 [[API]]：[[Fetch]]","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/AJAX/Single-thread":{"title":"Single-thread","content":"# Single-thread\n[[JavaScript/介紹/JavaScript]] 屬於 [[Single-thread]] 語言，一次只能處理一件事\n```js\n// sync(Synchronous) code 同步\nconsole.log('a');\nconsole.log('b');\n\n// log a\n// log b\n```\n\n## Event Queue\n可利用 [[Event Queue]] 可以製造時間差\n\n## Async code\n用 Web API 達成，JS 本身做不到，是由網頁瀏覽器來實現\n- setTimeout()\n- addEventListener\n\n## [[Promise]]\n#js #event #ajax #async #promise","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/API":{"title":"API","content":"# API (Application Programming Interface)\n\u003e - [應用程式介面（英語：Application Programming Interface）](https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3)\n\u003e- [API 是什麼，能吃嗎？](https://hackmd.io/NnnTQ3gLQIagIsqsp9CiQQ)\n\u003e - [[API 範例：TDX API]]\n\n\n- 資料庫的接口，可以從其他的 [[Database 數據庫]] 獲得資訊\n- 如果是自己的 [[Database 數據庫]] ，可以用 [[Database 數據庫#C R U D]] 來做讀取，但別人的 DB 就需要透過對方提供的 API 做連結\n- 要遵守對方開的規則：所有的規則都在 doc 裡面ㄌ讀ㄅ\n- 有些 API 要付費、要金鑰、或是直接就可以用的也有\n- 接別人 API 的工具：[[Postman]]\n- JS 使用 API：[[Fetch]]\n\n## API 用語\n- [[endpoint]] \n\n\n#js #api #async","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/API-%E7%AF%84%E4%BE%8BTDX-API":{"title":"API 範例：TDX API","content":"## API 範例：TDX API\n-   [Web API：TDX 觀光 API](https://tdx.transportdata.tw/api-service/swagger)\n    -   我想獲得台灣觀光景點資料\n    -   我輸入說明文件上的[網址請求](https://ptx.transportdata.tw/MOTC/v2/Tourism/ScenicSpot?$top=30\u0026$format=JSON)方式\n    -   TDX 伺服器回應我對應的 JSON 格式資料\n    -   [範例 Code](https://codepen.io/hexschool/pen/dyRjQRW?editors=1010)\n\n```js\nlet data;\n\n\naxios.get('https://ptx.transportdata.tw/MOTC/v2/Tourism/ScenicSpot?$top=30\u0026$format=JSON').then(function(res){\n  let data = res.data;\n  console.log(data); \n  document.querySelector('.container').innerHTML = `\n \u003ch1\u003e${data[0].Name}\u003c/h1\u003e\n \u003cimg src=\"${data[0].Picture.PictureUrl1}\"\u003e` \n})\n\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/Async%E7%9B%AE%E9%8C%84":{"title":"Async（目錄）","content":"# Async\n- [[AJAX]] ([[Event Queue]])\n- [[Promise]] ([[Callback Hell]])\n\t- [[async, await, try, catch]]\n- [[Promise and Query (Mongoose)]]\n- [[API]]\n\n#js #api #async #promise","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/Node-to-API":{"title":"Node to API","content":"# Node to API\n[[Fetch#需要有 Authorization Key 才能使用的 API]]\n\u003eNode 是不支援 [[Fetch]] 功能的；[[Node to API - node fetch]]\n## 終端\n```\nnpm init\nnpm install express ejs nodemon \n(不用安裝 mongoose)\n```\n## app.js\n### 匯入\n```js\n// app.js\nconst express = require('express');\nconst app = express();\nconst ejs - require('ejs');\n```\n\u003e[[Express.js]]\n\u003e[[EJS]]\n### api 資料\n```js\n// api key \nconst key = 'api 提供的金鑰' ;\n```\n\n### [[Middleware(express)]]\n[[後端/Node.js/模組/內建模組/app.set()]]\n```js\n// middleware\napp.use(express.static('public'));\n// 這是啥\napp.set('view engine', 'ejs');\n```\n\u003e[Use EJS with Express](https://github.com/mde/ejs/wiki/Using-EJS-with-Express)\n\n### [[Routing]]\n```js\n// request handdling\napp.get('/', (req, res) =\u003e {\n\tres.render('index.ejs')\n})\n\napp.get('/:city', (req, res) =\u003e {\n\tlet { city } = req.params;\n\tlet url = `API 給的 endpoint`\n\t\n\t// get request made by node.js\n\thttps.get('url', (response) =\u003e {\n\t\tconsole.log('statusCode:', response.statusCode);\n\t\tconsole.log('headers:', response.headers); \n\t\t\n\t\tresponse.on('data', (d) =\u003e {\n\t\t\t// string to array\n\t\t\tlet dJson = JSON.parse(d);\n\t\t\tconsole.log(dJson);\n\t\t\t// 氣溫的單位不太一樣，調整一下\n\t\t\tlet { temp } = dJson.main;\n\t\t\t// 需要額外寫個 kToC() function\n\t\t\tlet newTemp = kToC(temp);\n\t\t\tres.render('weather.ejs', { dJson, newTemp });\n\t\t});\n\n\t\t}).on('error', (e) =\u003e {\n\t\t\tconsole.error(e);\n\t\t});\n})\n```\n\u003e- [[從物件中提取屬性到變數中 Destructing an object]]\n\u003e- [[類型轉換#JSON]] JSON.parse(string)：轉成 array\n\u003e- [[EJS#在 HTML 內使用變數：Routing for pattern]]\n\u003e - [[Node to API - node fetch]]\n### 使用 API\n[[Fetch]] 是不支援的，有兩種作法\n- [https.get](https://nodejs.org/docs/latest-v15.x/api/https.html#https_https_get_options_callback)\n- [[Node to API - node fetch]]\n### listen\n```js\napp.listen(3000, () =\u003e {\n\tconsole.log('server is running on 3000')\n})\n```\n\n\n## ejs\n[[EJS#在 EJS 檔案內撰寫 HTML]]\n```html\n\u003c!-- head 裡面 --\u003e\n\u003c!-- 點記法要點誰可以用 postman 查看 --\u003e\n\u003ctitle\u003e\u003c%= djs.name %\u003e - ( \u003c%= djs.sys.country%\u003e )\u003c/title\u003e\n\n\u003c!-- body 裡面 --\u003e\n\u003ch1\u003e\u003c%= djs.name %\u003e Weather Now\u003c/h1\u003e\n```","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/Postman":{"title":"Postman","content":"# Postman\n[[還沒建立前端前，用 Postman POST 請求]]\n\n#js #backEnd #api","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/Fetch":{"title":"Fetch","content":"# Fetch\n- 利用 fetch 可以使用 JS 來連接別人的 [[API]]\n- 是一種 [[Promise]]\n\n\n## 可以直接使用的 API\n用 [JokeAPI](https://sv443.net/jokeapi/v2/#info) 做示範\n### [[async, await, try, catch]] 來寫\n單純取得之後他不會是一個 json 檔\n```js\nasync function getJoke() {\n\t// 取得 endpoint\n\tlet data = await fetch(\"https://v2.jokeapi.dev/joke/Any\");\n\tconsole.log(data);\n}\n\ngetJoke();\t\t// 這不會是一個 json\n```\n\n\u003e ### [[Promise]] 來寫\n\u003e fetch 也是一種 [[Promise]] 所以也可以串 then, catch\n\u003e ```js\n\u003e function getJoke() {\n\u003e \t// 取得 endpoint\n\u003e \tfetch(\"https://v2.jokeapi.dev/joke/Any\")\n\u003e \t\t.then((d) =\u003e {\n\u003e \t\t\tconsole.log(d);\n\u003e \t\t}).catch((e) =\u003e {\n\u003e \t\t\tconsole.log(e);\n\u003e \t\t});\n\u003e }\n\u003e \n\u003e getJoke();\n\u003e ```\n\n### 調整格式\n```js\nasync function getJoke() {\n\t// 取得 endpoint\n\tlet data = await fetch(\"https://v2.jokeapi.dev/joke/Any\");\n\tlet parsedData = await data.json();\n\tconsole.log(parsedData);\n}\n\ngetJoke();\n```\n\n## 需要有 Authorization Key 才能使用的 API\n[OpenWeather](https://openweathermap.org/)(需要註冊，才會獲得金鑰)\n[WeatherAPI Doc](https://openweathermap.org/api)\n\n### 如何使用\n讀 api 文件的時候會看到這種內容，這是一個 [[endpoint]]\n```js\napi.openweathermap.org/data/2.5/weather?q={city name}\u0026appid={API key}\n```\n\n#### app.js\n[[async, await, try, catch]]\n```js\nlet key = 'weather給你的金鑰';\nlet cityname = 'taipei';\n// 將 endpoint 貼過來，並且讓他符合樣板字面值\nlet url = `api.openweathermap.org/data/2.5/weather?q=${city name}\u0026appid=${key}`\n\nasync function getWeather() {\n\tlet data = await fetch(url);\n\tlet dataParsed = await data.json();\n\tconsole.log(dataParsed);\n}\n\ngetWeather();\n```\n\u003e[[Template literals (Template strings)]]\n\n## 搭配後端來寫\n[[Node to API]]\n#js #async #api #promise","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/Node-to-API-node-fetch":{"title":"Node to API - node fetch","content":"# Node to API - 使用 fetch 的狀況\n\u003e[[Node to API#Routing]]\n\nNode 不支援 [[Fetch]] 功能，在 node 裡想要串 [[API]] 要注意，需要用 [[npm]] 再裝個 [node-fetch](https://www.npmjs.com/package/node-fetch)\n\n```js\n// 匯入 fetch\nconst fetch = require('fetch');\n\n// 第一種寫法\napp.get('/:city', async (req, res) =\u003e {\n\tlet { city } = req.params;\n\tlet url =`API 給的 endpoint`;\n\t\n\tfetch(url).then(d =\u003e d.json()).then(djs =\u003e {\n\t\tlet { temp } = djs.main;\n\t\tlet newTemp = kToC(temp)\n\t\tres.render('weather.ejs', { djs });\n\t});\n});\n\n// 第二種寫法\napp.get('/:city', async (req, res) =\u003e {\n\tlet { city } = req.params;\n\tlet url =`API 給的 endpoint`;\n\tlet data = await fetch(url);\n\tlet dataJson = await data.json();\n\tlet { temp } = dataJson.main;\n\tres.render('weather.ejs', { dataJson, newTemp });\n});\n```\n## 沒有裝的話\n```shell\nUnhandledPromiseRejectionWarning: ReferenceError: fetch is not defined\n```\n\n\n\n\n#js #node #api #promise #expressJs #ejs","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/Promise/async-await-try-catch":{"title":"async, await, try, catch","content":"# async, await, try, catch\n[[Promise#改寫 Callback Hell]] 還可以再改寫\n## async, await\nasync 搭配 await 可以寫出要等到結果之後再存到變數裡的 [[Async（目錄）]] code（`.then()` 的部份）\n```js\n// getData 的那段可以放入 function 內\n// 這個 function 因為跟非同步有關，所以要使用 async\nasync function showMovie() {\n\tconst obj = await getData('Wilson');\t// 得到 getData 資料之後才會存進去 obj\n\tconst movie = await getMovies(obj.age);\t// 同上\n\tconsole.log(movie.text);\n}\n\nshowMovie();\n```\n## try, catch\n再進一步搭配 try, catch 的話就可以寫出 `.catch()` 的部份了\n```js\n// getData 的那段可以放入 function 內\n// 這個 function 因為跟非同步有關，所以要使用 async\nasync function showMovie() {\n\ttry {\n\t\tconst obj = await getData('Wilson');\t// 得到 getData 資料之後才會存進去 obj\n\t\tconst movie = await getMovies(obj.age);\t// 同上\n\t\tconsole.log(movie.text);\n\t} catch(e) {\n\t\tconsole.log(e)\n\t}\n\n}\n\nshowMovie();\n```\n\n#js #ajax #async #promise","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/API/endpoint":{"title":"endpoint","content":"# endpoint\n\u003e[JokeAPI](https://sv443.net/jokeapi/v2/#info) 示範\n```\nURL: https://v2.jokeapi.dev/joke/Any\n```\n在 Try it out here 的地方，可以看到這個網址，隨著調整 API 的需求，這個網址也會變動，在發出請求的時候就是對 endpoint 發出\n\n## path\n```\nURL: https://v2.jokeapi.dev/joke/Programming\n```\n網址變動的時候就是將 endpoint 的 path 進行變動\n\n## query\n```\nURL: https://v2.jokeapi.dev/joke/Programming?blacklistFlags=political\n```\n- ?後面的內容就是 query\n- 很像 [[Form]] 的 `GET` 請求，選取之後網址就會有所變動\n\n#js #async #api","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication-and-Cryptography":{"title":"Authentication and Cryptography","content":"---\n# Authentication (認證) \n- [[製作登入、註冊介面]]\n\t- [[建置（登入、註冊）]]\n\t\t- [[用資料夾管理 Mongoose models 模組]]\n\t- [[註冊頁面]]\n\t- [[登入頁面]]\n\t- [[會員頁面]]\n\n## Cryptography(密碼學)\n- [[密碼學簡介]]\n- [[電腦科技的應用：加密]]","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E5%BB%BA%E7%BD%AE%E7%99%BB%E5%85%A5%E8%A8%BB%E5%86%8A":{"title":"建置（登入、註冊）","content":"# 建置\n```js\n// 匯入：express, ejs, body-parser, express-session, mongoose\n// 從資料夾匯入 mongoose model （先做完下一標題）\nconst User = require('./models/user');\n// app.set: ejs 設定\n// middleware: public 資料夾, session, body-parser 設定\n// connect to mongoDB by mongoose\n// get: 首頁\n\n// 放入註冊、登入、會員頁面的處理\n\n// routing for all: 404\n// middleware: error handler\n// port listening\n```\n\u003e- [[Routing for all 回應亂打的網址]]\n\u003e- [[Error Handling（Routing 後面）]]\n\n## 管理 Mongoose Models\n\u003e- [[用資料夾管理 Mongoose models 模組]]\n\u003e- [[Validators]]\n建立 models -\u003e user.js\n```js\n// import\nconst mongoose = require('mongoose');\n// define a schema\nconst userSchema = new mongoose.Schema({\n\tusername: {\n\t\ttype: String,\n\t},\n\tpassword: {\n\t\ttype: String,\n\t}\n})\n\n// create a model\nconst User = mongoose.model('User', userSchema);\n// export(到 app.js 用)\nmodule.exports = User;\n```\n#js #expressJs #mongoose #database #crud #cryptogrphy #ejs","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E6%9C%83%E5%93%A1%E9%A0%81%E9%9D%A2":{"title":"會員頁面","content":"# 會員頁面\n- 是否已經登入？（session 內是否有 isVerified）\n\t- 否：導回登入頁面\n\t- 是：顯示\n\n\u003e- [[Routing 執行時的 Middleware（Route 中間）]]\n\u003e- [[Session]]\n```js\nconst requireLogin = (req, res, next) =\u003e {\n\tif(!req.session.isVerified == true) {\n\t\tres.redirect('login');\n\t} else {\n\t\tnext();\n\t}\n}\n\n```\n```js\napp.get('/member', requireLogin, (req, res) =\u003e {\n\tres.render('member');\n})\n```\n\n[[登入頁面]]\n\n#cryptogrphy #expressJs #js #session #routing","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2":{"title":"登入頁面","content":"# 有加密的登入頁面\n- 檢查是否有這個帳號\n\t- 否：「帳密有誤」\n\t\t- 是：用戶輸入的密碼加密後是否跟 DB 內容一致？\n\t\t\t- 否：「帳密有誤」\n\t\t\t- 是：導向會員頁面\n\n與[[註冊頁面]]一樣，都使用 [[bcrypt]] 加密\n```js\napp.get('/login', (req, res) =\u003e {\n\tres.render('login');\n});\n\napp.post('login', async (req, res, next) =\u003e {\n\tlet { username, password } = res.body;\n\ttry {\n\t\tlet foundUser = await User.findOne({ username });\n\t\tif(foundUser) {\n\t\t\t// Load hash from your password DB.\n\t\t// myPlaintextPassword: 輸入原始密碼（登入畫面用戶輸入的）\n\t\t// hash: 存在在 db 裡的 cipher\n\t\t\tbcrypt.compare(myPlaintextPassword, hash, function(err, result) {\n\t\t\t\tif(err) {\n\t\t\t\t\tnext(err);\n\t\t\t\t}\n\t\t\t\tif( result === true) {\n\t\t\t\t\treq.session.isVerified = true;\n\t\t\t\t\tres.redirect('member');\n\t\t\t\t} else {\n\t\t\t\t\tres.send('帳密有誤')\n\t\t\t\t}\n\t\t} else {\n\t\t\tres.send('帳密有誤');\n\t\t}\n\t} catch(e) {\n\t\tnext(e);\n\t}\n})\n```\n\u003e- [[res.redirect()]]\n## 未加密的登入頁面\n不應這樣寫\n```js\napp.get('/login', (req, res) =\u003e {\n\tres.render('login');\n});\n\napp.post('login', async (req, res, next) =\u003e {\n\tlet { username, password } = res.body;\n\ttry {\n\t\tlet foundUser = await User.findOne({ username })\n\t\t// 通常不會明確說是帳號還是密碼錯誤（安全性）\n\t\tif (foundUser \u0026\u0026 password == foundUser.password) {\n\t\t\tres.render('member')\n\t\t} else {\n\t\t\tres.send('帳密有錯')\n\t\t}\n\t} catch(e) {\n\t\tnext(e);\n\t}\n})\n```\n\u003e- [[Find(Read)]]\n\n#js #expressJs #mongoose #database #crud #cryptogrphy #ejs","lastmodified":"2022-04-23T12:34:05.624865397Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E8%A3%BD%E4%BD%9C%E7%99%BB%E5%85%A5%E8%A8%BB%E5%86%8A%E4%BB%8B%E9%9D%A2":{"title":"製作登入、註冊介面","content":"---\n# 製作登入介面\n## 需要的效果\n- [[註冊頁面]]：加密後資料存入 [[Database 數據庫]]\n\t- [[POST 表單(express)]]\n\t- [[建置（登入、註冊）]]\n- [[登入頁面]]：檢查輸入的帳密是否吻合 DB 資料\n\t- 如果吻合，導向[[會員頁面]]\n\n\u003e絕對不可以直接儲存資料，要加密（[[Authentication and Cryptography#Cryptography 密碼學]]）","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Authentication/%E8%A8%BB%E5%86%8A%E9%A0%81%E9%9D%A2":{"title":"註冊頁面","content":"# 有加密的註冊頁面\n- 這個帳號有沒有被註冊過？\n\t- 是：「此帳號已註冊」\n\t- 否：將密碼加密，存入數據庫\n\n\n先看[[註冊頁面#未加密的註冊頁面]]理解流程，再使用 [[bcrypt]] 模組來達成加密\n```js\napp.post('/signup', async (req, res, next) =\u003e {\n\tlet { username, password } = req.body;\n\ttry {\n\t\tlet foundUser = await User.findOne({ username });\n\t\tif(foundUser) {\n\t\t\tres.send('此帳號已註冊')\n\t\t} else {\n\t\t\tbcrypt.genSalt(saltRounds, (err, salt) =\u003e {\n\t\t\t\tif (err) {\n\t\t\t\t\tnext(err)\n\t\t\t\t}\n\t\t\t\tbcrypt.hash(password, salt, (err, hash) =\u003e {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tnext(err)\n\t\t\t\t\t}\n\t\t\t\t\t// Store hash in your password DB.\n\t\t\t\t\tlet newUser = new User({ username, password: hash });\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnewUser.save().then(() =\u003e {\n\t\t\t\t\t\t\tres.send('感謝您，我們已經收到您的資訊');\n\t\t\t\t\t\t}).catch(() =\u003e {\n\t\t\t\t\t\t\tres.send('對不起請再重試一遍');\n\t\t\t\t\t\t})\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tnext(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\n\t\t}\n\t} catch(e) {\n\t}\n})\n```\n## 未加密的註冊頁面\n不該這樣寫，要加密\n```js\n// 註冊頁面： signup.ejs（生成 POST 表單） render\napp.get('/signup', (req, res) =\u003e {\n\tres.render('signup')\n})\n// 處理 POST 請求，html form action 要設定到這個 route\napp.post('/signup', (req, res, next) =\u003e {\n\tconsole.log(req.body);\n\t// 對應 html input 的 name 屬性\n\tlet { username, password } = req.body;\n\t// create and object\n\tlet newUser = new User({ username, password });\n\t// error handling 非同步寫法\n\ttry {\n\t\t// save\n\t\tnewUser.save().then(() =\u003e {\n\t\t\tres.send('感謝您，我們已經收到您的資訊');\n\t\t}).catch((e) =\u003e {\n\t\t\tres.send('對不起，請再重試一遍');\n\t\t})\n\t} catch(err) {\n\t\tnext(err);\n\t}\n})\n```\n\u003e- [[POST 表單(express)]]\n\u003e- [[Form]]\u003e[[input]]\n\u003e- [[Create]]\n\u003e- [[變數簡寫語法糖]]\n\u003e- [[從物件中提取屬性到變數中 Destructing an object]]\n\u003e- [[透過 Mongoose 存入 MongoDB(Save)]]\n\u003e- [[Error Handling 非同步的寫法]]\n\u003e- [[async, await, try, catch]]\n\n\n#js #nodeJs #promise #expressJs #form #mongoose","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/%E5%AF%86%E7%A2%BC%E5%AD%B8%E7%B0%A1%E4%BB%8B":{"title":"密碼學簡介","content":"# 簡介\n可追溯至羅馬時期，例：[[Caesar cipher]]\n- 數論（mod）\n\t- RSA\n\t- ECC\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/%E9%9B%BB%E8%85%A6%E7%A7%91%E6%8A%80%E7%9A%84%E6%87%89%E7%94%A8%E5%8A%A0%E5%AF%86":{"title":"電腦科技的應用：加密","content":"## 電腦科技的應用：加密\n- 嘗試登入時，伺服器會加密我們的密碼\n- 線上交易時，內容都會被加密（RSA, ECC 數學上（暴力破解）很難被破解（不會提到））\n- 傳送 email 時，也需要加密\n\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Caesar-cipher":{"title":"Caesar cipher","content":"# Caesar cipher\n平行移動每個密碼作加密，移動幾個字母就是他的 key（例如：a -\u003e c, w-\u003ek ）\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Cipher":{"title":"Cipher","content":"加密（Encrypt）過後的資料\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Hash-Function":{"title":"Hash Function","content":"# Hash Function\n\u003e[[bcrypt]]\n\n\n- 將密碼存入 [[Database 數據庫]]前，會先用 Hash Function 加密\n- 以目前技術近乎不可逆\n- 不管原始密碼(input)多少，Hash Function 都會產生相同長度的 [[Cipher]]\n- 原始密碼做些微的更動後，[[Cipher]] 會有很大的差異\n- 但是同樣的 input 會得到相同的結果 -\u003e [[Dictionary Attack]] -\u003e [[Salting]]\n\n## 問題：[[Dictionary Attack]]\n由於同一個密碼 Hash Function 的結果一樣，駭客會透過 [[Dictionary Attack]] 的方法破解\n\n### 解決方式：[[Salting]]\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/Salting":{"title":"Salting","content":"# Salting\n- 在執行 [[Hash Function]] 之前多一道手續── Salting ──原始密碼先加上一些隨機字元之後再執行加密，使同一組密碼在數據庫內也長得不一樣\n- 加上去的隨機字元並不是隱密的，但因為 [[Hash Function]] 是近乎不可逆的，所以也近乎不能回推原始密碼\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Cryptography/bcrypt":{"title":"bcrypt","content":"# bcrypt\n[npm](https://www.npmjs.com/package/bcrypt)\n業界很有名拿來做 [[Salting]], [[Hash Function]] 的演算法\n\n```js\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\t\t\t\t// cost factor：執行 2 的幾次方次\n// const myPlaintextPassword = 's0/\\/\\P4$$w0rD';\n// const someOtherPlaintextPassword = 'not_bacon';\n```\n\n## 加密密碼\n```js\nbcrypt.genSalt(saltRounds, function(err, salt) {\n\t\t// myPlaintextPassword 這裡應該輸入原始密碼\n\t\t// 例如用戶註冊 post 過來的資訊\n\t\t// hash 是已經加密好的 cipher，這個就可以存到 DB 了\n    bcrypt.hash(myPlaintextPassword, salt, function(err, hash) {\n        // Store hash in your password DB.\n    });\n});\n```\n\u003e[[註冊頁面]] 應該加密後再儲存\n\n## 檢查密碼\n```js\n// Load hash from your password DB.\n// myPlaintextPassword: 輸入原始密碼（登入畫面用戶輸入的）\n// hash: 存在在 db 裡的 cipher\nbcrypt.compare(myPlaintextPassword, hash, function(err, result) {\n    // result == true\n});\nbcrypt.compare(someOtherPlaintextPassword, hash, function(err, result) {\n    // result == false\n});\n```\n#cryptogrphy #node #npm #module","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Bruteforced":{"title":"Bruteforced","content":"## Bruteforced\n暴力破解，越簡單、越短的密碼，越容易被暴力破解\n可以用 [kaspersky password checker](https://password.kaspersky.com/)、mac內建的密碼工具檢查目前密碼夠不夠安全\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Dictionary-Attack":{"title":"Dictionary Attack","content":"## Dictionary Attack\n透過將字典出現過的單字加密，可以得出常見的單字加密的樣子，很多常見的密碼因此就會被推敲出來，因此不要使用語意性的單字佳\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Authentication-and-Cryptography/Hack/Hack-101":{"title":"Hack 101","content":"# Hack 101\n\n- [[Dictionary Attack]]\n\t- 解決方式：[[Salting]]\n- [[Bruteforced]]\n\n\n#cryptogrphy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/Cookies-and-Sessions-%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E6%8E%AA%E6%96%BD":{"title":"Cookies and Sessions 的安全性措施","content":"## Cookies and Sessions 的安全性措施\n- [[Signing a Cookie]]\n- [[process(node)]]\n\t- [[dotenv（使用 env 變數）]]\n\t- [[node 的 gitignore 設定]]","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/dotenv%E4%BD%BF%E7%94%A8-env-%E8%AE%8A%E6%95%B8":{"title":"dotenv（使用 env 變數）","content":"# dotenv\n[npm](https://www.npmjs.com/package/dotenv)\n使用[[Cookies and Sessions]] 的時候，應該將 [[cookie-parser]] 跟 [[express-session]] 的內容加密並且隱藏\n\n在使用 [[process(node)]] 的時候可以使用自訂的 env 變數\n\n```shell\nnpm install dotenv\n```\n\n## 設定\n```js\n// app.js 最頂端\nrequire('dotenv').config()\n```\n\n## 專案新增 .env 檔案\n```shell\n// 可以照著這個格式新增 env 變數\n// 變數名=變數內容\n// string 不用加 '' or \"\"\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=s1mpl3\n```\n\u003e 這個檔案要透過 [[node 的 gitignore 設定]]隱藏\n## 使用\n```js\nprocess.env.資料夾內設定的變數名\n```\n\n```js\n// 對應用法\nconst db = require('db')\ndb.connect({\n  host: process.env.DB_HOST,\n  username: process.env.DB_USER,\n  password: process.env.DB_PASS\n})\n```\n\n\n\n\n#node #node/express  #session #node/npm #git","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/node-%E7%9A%84-gitignore-%E8%A8%AD%E5%AE%9A":{"title":"node 的 gitignore 設定","content":"## node 的 [[gitignore]] 設定\n使用這個檔案 [node.gitignore](https://github.com/github/gitignore/blob/main/Node.gitignore)\n\n\u003e[[Cookies and Sessions 的安全性措施]]\n\n#js #advanceJs #library #framework #nodeJs #backEnd #git","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/processnode":{"title":"process(node)","content":"# process (node)\n[javaTpoint](https://www.javatpoint.com/nodejs-process)\n\n一個 [[Node]] 的全域物件，可以檢視目前的 platform, version 等\n\n```js\napp.get('/', (req, res) =\u003e {\n\tconsole.log(process.platform);\n\tconsole.log(process.version);\n\tconsole.log(process.env);\t\t\t\t// 另外需要 dotenv 做使用\n})\n```\n\n\u003e [[dotenv（使用 env 變數）]]\n\n\n\n\n\n\n#js #nodeJs #backEnd #session #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/%E5%AE%89%E5%85%A8%E6%80%A7/secret-%E7%9A%84%E8%AE%8A%E6%95%B8%E8%A8%AD%E5%AE%9A":{"title":"secret 的變數設定","content":"---\n# secret 的變數設定\n為了加密內容，secret 不該直接寫入字串，需要將其隱藏，需透過下列三項來達成\n- [[Node]] 內建全域物件：[[process(node)]]\n- [[dotenv（使用 env 變數）]] 模組：使用與設定 env 變數 \n- [[node 的 gitignore 設定]]：隱藏 env 檔案","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/Cookie":{"title":"Cookie","content":"---\n# Cookie\n- 也是一個儲存資料的地方（類似[[Storage]]）\n- 但跟 [[Storage]] 不同的是，他是為了讓伺服器端讀取的，前者反之\n- 客戶端發送請求 [[HTTP request]] 時候，[[Cookie]] 就會跟著發出去，[[Storage]] 不會\n- [[Key-Value Pair]]\n- 可以透過 [[Postman]] 或是 Devtool -\u003e 儲存空間查看\n- 可以從 Devtool 修改 cookie -\u003e [[Signing a Cookie]]","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/Signing-a-Cookie":{"title":"Signing a Cookie","content":"# Signing a Cookie\n對 Cookie 進行簽署，辨識客戶端是否更改了 [[Cookie]] 之後傳回來\n\n\u003e- 需要使用 [[cookie-parser]]\n\u003e- 配合 [[secret 的變數設定]]\n\n```js\nconst cookieParser = require('cookie-parser');\n// cookie-parser 的 middleware\n// （不建議）填入任意字串，伺服器傳送的時候會將 cookie 內容用這個字串做簽名\n// （建議）使用 process 配合 dotenv 做隱藏\napp.use(cookieParser(process.env.SECRET));\n\n\napp.get('/getSignedCookie', (req, res) =\u003e {\n\tres.cookie('name', 'Sam');\n\tres.send('Cookie has been send.');\n})\n```\n\n## 讀取有簽署的 cookie\n如果客戶端更改了有簽署的內容，`req.singedCookies` 就無法辨識內容了\n\u003e[[req.cookies]]\n```js\napp.get('/', (req, res) =\u003e {\n\tconsole.log(req.cookies);\t\t\t\t// 這樣寫不會出現有簽署的內容\n\tconsole.log(req.signedCookies)\t// 這樣才會顯示\n})\n\napp.get('/', (req, res) =\u003e {\n\tlet {name} = req.signedCookies;\n\tres.send(name);\n}\n```\n\n#js #backEnd #server #storage #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/cookie-parser":{"title":"cookie-parser","content":"---\n# cookie-parser\n[npm](https://www.npmjs.com/package/cookie-parser)\n可以使用 [[req.cookies]] 的 [[Middleware(express)]] 模組","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/req.cookies":{"title":"req.cookies","content":"# req.cookie\n使用 cookie，需要安裝 middlewarea 模組 [[cookie-parser]]\n可以拿來取得 [[res.cookie]] 傳過來的 [[Cookie]]\t\n```js\napp.get('/', (req, res) =\u003e {\n\tconsole.log(req.cookies);\n\tlet { name } = req.cookies;\n\tres.send(`${name}, Welcome to the homepage.`)\n})\n```\n\n#js #backEnd #server #storage #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookie/res.cookie":{"title":"res.cookie","content":"# res.cookie\n傳送 cookie 給瀏覽器端儲存\n```js\napp.get('/', (req, res) =\u003e {\n\tres.cookie('name', 'Wilson');\n})\n```\n也可在 [[Postman]] 看到這些資料\n\n\n#js #backEnd #server #storage #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Cookies-and-Sessions":{"title":"Cookies and Sessions","content":"---\n# [[Cookie]] and [[Session]]\n| 比較       | Cookies       | Sessions           | Storage |\n|","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/Flash":{"title":"Flash","content":"---\n# Flash\n\u003e 必須使用 npm 模組：[[connect-flash]]、[[express-session]]\n\n- [[Session]] 的其中一部分\n- 可以儲存一些給使用端的訊息（例如：成功、失敗提示）","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/Session":{"title":"Session","content":"---\n# Session\n\u003e 需使用 [[express-session]] 模組\n- [[Cookies and Sessions]] 在 [[Cookie]] 無法加密且容量較小\n- 會傳送到客戶端的只有一個 ID（connect.sid）\n- 用途例子：辨識是否登入\n- 通常會搭配 [[Database 數據庫]]，不會只有在記憶體記錄\n- 儲存系統提示用 Session：[[Flash]]","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/connect-flash":{"title":"connect-flash","content":"# connect-flash\n[npm](https://www.npmjs.com/package/connect-flash)\n使用[[Flash]] 需要安裝的 npm 模組\n```shell\n$ npm install connect-flash\n```\n\n## 使用\n```js\nconst flash = require('connect-flash');\nconst app = express();\n\n// middleware: 會生成一個 req.flash 可做使用\napp.use(flash());\t\n```\n\n```js\n// 第一種用法\napp.get('/', (req, res) =\u003e {\n\t// 跟 session 一樣 flash 也是 key-value pair\n\treq.flash('success_msg', 'Successfully get to the homepage.');\n\tres.send('Hi, ' + req.flash('success_msg'));\n})\n```\n#server #storage #session\n#backEnd #node/express #node/npm","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/Session/express-session":{"title":"express-session","content":"# express-session\n[npm](https://www.npmjs.com/package/express-session)（不要用到 express-sessions）\n使用 session 的模組\n\n```\n$ npm install express-session\n```\n\n# 使用\n```js\nconst session = require('express-session');\n```\n\n## [[Middleware(express)]]\n\u003e [[secret 的變數設定]]\n```js\napp.use(session({\n\t// 參照 secret 的變數設定，不建議直接放字串\n\tsecret: process.env.SECRET,\n\tresave: false,\t\t\t\t\t\t\t// 變更後要不要儲存進去（少用到）\n\tsaveUninitialized: false\t\t// 沒有變更的話需不需要儲存（少用到\n\t\n}))\n```\n\n## Routing\n```js\napp.get('/', (req, res) =\u003e {\n\tconsole.log(req.session);\n})\n```\n\n#js #backEnd #server #storage #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Cookie-and-Session/cookie-session":{"title":"cookie-session","content":"# cookie-session\n[npm](https://www.npmjs.com/package/cookie-session)\n```shell\nnpm i cookie-session\n```\n\n## 建置\n\n```js\nconst cookieSession = require('cookie-session');\n```\n\n### middleware\n\u003e[[指定特定 Route 之前的 Middleware（Route 前面）]]\n```js\n// 在特定 route 使用的 middleware 之前\napp.use(cookieSession({\n  name: 'session',\n  keys: [process.env.SECRET],\n\n  // Cookie Options\n  maxAge: 24 * 60 * 60 * 1000 // 24 hours\n}))\n```\n\u003e[[passport-google-oauth20 的 .env 變數]]","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/Constraints":{"title":"Constraints","content":"# Constrains\n[[SQL create 製作表格]] 中有提到 [[Constraints]] 可以將資料內容做規範\n在 [[Mongoose]] 也可以用 [[Validators]] 規範 [[Schema Type]] \n\n\n- SQL: [[SQL create 製作表格]]\n- Mongoose: [[Validators]]\n\n#database #crud #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/DBMSRDBMS":{"title":"DBMS(RDBMS)","content":"# DBMS (RDBMS)\n\n拿來管理 [[Database 數據庫]] 的系統分為兩類：\n - DBMS: database management system\n - RDBMS: relational database management system\n\n## 熱門的 [[DBMS(RDBMS)]]\n- MySQL\n- MongoDB\n- Postgresql\n- Redis\n- ...等等等\n\n\n#database #sql","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/Database-%E6%95%B8%E6%93%9A%E5%BA%AB":{"title":"Database 數據庫","content":"---\n# Database\n- 發出請求後，（可能有加密），有確定好就會從數據庫 [[Database 數據庫]] 抓檔案（html, css, js）發給你\n\n## C.R.U.D\n - 所有的 [[DBMS(RDBMS)]] 一定有的四種語法\n - [[ODM]] / [[ORM]] 也會有類似的功能\n\n|[[DBMS(RDBMS)]] / ODM(ORM)|Create|Read|Update|Delete|\n|-|-|-|-|-|\n|SQL|[[SQL create 製作表格]]|[[SQL read 檢視表格內容]]|[[SQL update 更新既有表格內容]]|[[SQL delete 刪除既有表格內容]]|\n|MongoDB|[[MongoDB CRUD#Insertion create]]|[[MongoDB CRUD#find read]]|[[MongoDB CRUD#Update]]|[[MongoDB CRUD#Delete]]|\n|Mongoose|[[Create]]|[[Find(Read)]]|[[Update]]|[[Delete]]|\n\n## SQL and NoSQL\n|類型|SQL|NoSQL|\n|-|-|-|\n|定義|Relational DB|SQL 之外|\n|構造|table|object(JSON)|\n|[[DBMS(RDBMS)]]|[[mySQL]]|[[MongoDB]]|\n|優點|高穩定、連結性（歷史久）|高伸縮性、自由度（新）|\n|Scaling|Sequential search（慢）|hash function(快)|\n\n\u003e像是個人的檔案資料，每個人會有的內容都不一樣，就適合用 NoSQL，反之，像是產品資訊，有一定規則，就是和 SQL\n\n\u003e Scaling 與網頁開發較無關，主要是講找資料的時候使用的方法\n### SQL\n- [[SQL]] 彼此有連結的關係，彼此有相通的資料（看起來 coda 的表格的 lookup 功能也是這種類型）\n\n### NoSQL\n\n- [[Key-Value Pair]] 的形式\n\n#### Storage 資料的使用（[[深層拷貝、非 string 類型的資料類型轉換]]）\n\n\n\n## 架構\n- 每個 [[DBMS(RDBMS)]] / [[ODM]] / [[ORM]] 都有類似的架構，只是對應名稱有點不同\n- [[SQL]] 中，製作 table 的時候，會先製作出每個 column 的內容，決定屬性還有條件\n- [[Mongoose]] 則是會定義 Schema\n\n\n|  (R)DBMS | Start from |\n|:","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/Data-Types":{"title":"Data Types","content":"# Data Types\n```sql\n-- COMMENT\nINT\t\t\t\t-- 整數\nDECIMAL(p, s)\t-- 十進位，p（總共幾位數）, s(小數點後幾位數)\nVARCHAR(M)\t\t-- 字串，M(字數)\nDATE\t\t\t-- 'YYYY-MM-DD'\n```\n\n#sql #database","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/ORM":{"title":"ORM","content":"# ORM\n- Object Relational Modeling\n對應 [[ODM]] 用來將 [[SQL]] 連接到網頁專案的工具\n\n#database #sql","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL":{"title":"SQL","content":"# SQL\nstructure query language 架構查詢語言\n\n[[Database 數據庫]] 的其中一種，由 table 構成互相可以建立關係的穩定資料結構，歷史久，查詢速度較慢\n\n\n- [[mySQL]]\n\n\n#sql #database","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-%E7%9A%84-Keys":{"title":"SQL 的 Keys","content":"# Keys\n \n|Keys|定義|範例|\n|-|-|-|\n|Primary Key|每一筆資料的代表 ID ，不可重複|員工編號|\n|Foreign Key|指向其他資料的 ID|coda 的 lookup|\n|Natural Key|在數據庫外部有意義的 Primary Key|身分證號|\n|Surrogate Key|Surrogate（代理），Natural Key 的相反|資料的編號|\n|Composite Key|組合，沒有辦法單獨表示的 Primary Key|要同時有班級跟班級內的編號才能代表一個同學|\n \n\u003e Primary Key 標記時會畫底線\n\n#sql #database","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-create-%E8%A3%BD%E4%BD%9C%E8%A1%A8%E6%A0%BC":{"title":"SQL create 製作表格","content":"# 製作表格\n```sql\ncreate table employee(\t\t\t\t-- 生成表單\n\t-- Constraints：自動遞增\n\temployeeID int PRIMARY key AUTO_INCREMENT,\n\t-- Constraints：不可為 null\n\temployeeName varchar(25) NOT NULL,\n\tage int,\n\t-- Constraints：預設值\n\tsalary int DEAFAULT 1500,\n\tsupervisor int,\n\tdepartment int\n);\n```\n```sql\n-- 可以使用的功能\nDESCRIBE employee;\t\t-- 檢視屬性\n```\n\n\u003e [[Constraints]]：將表格內容限定做規範\n\n## 新增項目\n```sql\n\n-- 每欄照順序填入\nINSERT INTO employees VALUES(100, \"John\", 35, 3500, null, 1);\n\n-- 指定欄位填入\nINSERT INTO employees(employeeName, age, salary, supervisor, department) VALUES(\"Mike\", 40, 2000, 100, 1);\n```\n\n#sql #database #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-delete-%E5%88%AA%E9%99%A4%E6%97%A2%E6%9C%89%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9":{"title":"SQL delete 刪除既有表格內容","content":"# 刪除既有表格內容\n```sql\nDELETE FROM employees WHERE employeeID = 107;\n```\n# Danger Zone\n## 刪除整個表格內容（留下表格本身）\n```sql\nDELETE FROM employees;\n```\n## 刪除整個表格\n```sql\nDROP TABLE employees;\n```\n\n#sql #database","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-read-%E6%AA%A2%E8%A6%96%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9":{"title":"SQL read 檢視表格內容","content":"## 檢視表格內容\n```sql\nSELECT * FROM employees;\t-- \t檢視整個表單內容\n```\n\n#sql #database","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/SQL-update-%E6%9B%B4%E6%96%B0%E6%97%A2%E6%9C%89%E8%A1%A8%E6%A0%BC%E5%85%A7%E5%AE%B9":{"title":"SQL update 更新既有表格內容","content":"## 更新既有表格內容\n```sql\nSELECT * FROM employees;\n\n-- 更新符合條件（WHERE）的內容，都改成（SET）\n\nUPDATE employees SET employeeID = 107 WHERE employeeID = 108;\n\n-- 同時更新好幾個符合條件的也可以\n\nUPDATE employees SET salary = 1700 WHERE salary = 1500;\n\n```\n\n#sql #database","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/mySQL":{"title":"mySQL","content":"# mySQL\n- [[SQL]] 的其中一種 [[DBMS(RDBMS)]]\n- [[mySQL 環境建置]]\n\n## [[Database 數據庫#C R U D]]\n\n - create：[[SQL create 製作表格]]\n - read：[[SQL read 檢視表格內容]]\n - update：[[SQL update 更新既有表格內容]]\n - delete：[[SQL delete 刪除既有表格內容]]\n\n\n## 構成\n- [[SQL 的 Keys]]\n- [[Data Types]]\n\n## query(查詢)\n[[SQL read 檢視表格內容]] 可以檢視整個表格內容\n使用 query 可以建立篩選功能\n```sql\n-- 所有內容\nSELECT * FROM employees;\n```\n### 顯示特定欄位\n```sql\n-- 只檢視特定 column\nSELECT employeeID, employeeName FROM employees;\n```\n### 排序\n```sql\n-- 按照指定 column 遞減\nSELECT * FROM employees ORDER BY age DESC;\n\n-- 指定特定行遞減後，再指定另一行遞增\n-- OREDER BY 的預設就是遞增不用再多寫\nSELECT * FROM employees \nORDER BY age DESC, salary;\n```\n### 限制資料數量\n```sql\n-- 只回傳符合條件的前幾項\nSELECT * FROM employees \nORDER BY age DESC, salary;\nLIMIT 3;\t-- 只回傳三項\n```\n### 顯示符合條件的內容\n```sql\n-- WHERE\nSELECT * FROM employees \nWHERE department = 1;\n```\n\n#### 邏輯\n做判斷條件的時候可以使用的一些邏輯符號\n```sql\n-- AND\nSELECT * FROM employees \nWHERE department = 1 AND salary \u003e= 2000;\n\n-- OR\nWHERE department = 1 OR salary \u003e= 2000;\n\n-- not\nWHERE department != 1;\n```\n\n\n\n#database #sql","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/SQL/mySQL-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE":{"title":"mySQL 環境建置","content":"# mySQL 環境建置\n\u003e 現行版本的 mySQL 不支援舊版 10.14 了，要回去載 [8.0.22](https://downloads.mysql.com/archives/community/) 版本\n\u003e 另外 homebrew 現行版本也不支援 10.14 了救命\n\n[小白入门：MySQL超详细安装教程（mac版）](https://zhuanlan.zhihu.com/p/129366085)\n\n- 記得設定密碼\n\n#database #sql","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/JSON-and-BSON-%E7%9A%84%E5%B7%AE%E5%88%A5":{"title":"JSON and BSON 的差別","content":"---\n## JSON and BSON 的差別\nMongoDB 使用的是 BSON\n[差別](https://www.mongodb.com/json-and-bson)\n\n|              |              JSON              |                                          BSON                                          |\n|:","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB":{"title":"MongoDB","content":"# MongoDB\n[[DBMS(RDBMS)]] 的一種，屬於 noSQL（[[Database 數據庫#SQL and NoSQL]]）\n\n- [[JSON and BSON 的差別]]\n- [[MongoDB 環境建置]]\n- [[MongoDB 指令]]\n- [[Database 數據庫#C R U D]]：[[MongoDB CRUD]]\n- [[ODM]]：[[Mongoose]]\n\n- [[MongoDB Atlas]]\n\n#database #json #mongodb","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-%E6%8C%87%E4%BB%A4":{"title":"MongoDB 指令","content":"---\n# MongoDB 指令\n[[MongoDB 環境建置]] 運行之後\n```shell\nSz-de-MacBook-Pro:~ sz$ mongosh\n\nCurrent Mongosh Log ID: 61b045fbdafe6b9b3b4c2152\n\nConnecting to: **mongodb://127.0.0.1:27017/?directConnection=true\u0026serverSelectionTimeoutMS=2000**\n\nUsing MongoDB: 5.0.4\n\n**Using Mongosh**: 1.1.6\n\n\nFor mongosh info see: **https://docs.mongodb.com/mongodb-shell/**\n\n\nTo help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy).\n\nYou can opt-out by running the **disableTelemetry()** command.\n  \n\n**","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE":{"title":"MongoDB 環境建置","content":"[Install MongoDB Community Edition on macOS](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/)\n\n\u003e 現行版本 10.14 以上都支援，但 homebrew 有限支援，10.14 測試可以安裝，可能會需要更新 command line\n\n## 前置\n```shell\nxcode-select --install\n```\n## 安裝 mongoDB\n```shell\nbrew tap mongodb/brew\n```\n```shell\nbrew install mongodb-community@5.0\n```\n```shell\nbrew --prefix\n```\n\n## 運行\n運行 MongoDB (i.e. the `mongod` process) **as a macOS service**\n```shell\nbrew services start mongodb-community@5.0\n```\n\n\u003e 停止\n\u003e ```\n\u003e brew services stop mongodb-community@5.0\n\u003e ```\n\n## 檢查\nYou should see the service `mongodb-community` listed as `started`.\n```shell\nbrew services list\n```\n\n## 連接 Connect and Use MongoDB\n[[Kernel#Shell]] 可以打開與 mongoDB 互動的介面\n```shell\nmongosh\n```","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/MongoDB/MongoDB-CRUD":{"title":"MongoDB CRUD","content":"# MongoDB CRUD\n[[DBMS(RDBMS)]] 都有一套自己的 [[Database 數據庫#C R U D]]\n[CRUD](https://docs.mongodb.com/manual/crud/)\n- Insertion(create): [[MongoDB CRUD#Insertion create]]\n- Find(read):[[MongoDB CRUD#find read]]\n- Update: [[MongoDB CRUD#Update]]\n- Delete: [[MongoDB CRUD#Delete]]\n\n## Insertion(create)\n新增 collection，裡面就放一個 object\n```js\n// shell\ndb.students.insertOne({\n\tname: \"Sam\",\n\tage: 22,\n\tmajor: \"Computer Science\",\n\tscholarship: {\n\t\tmerit:3000,\n\t\tother: 1400\n\t}\n})\n```\n```js\n// 回傳\n{\n\t\"acknowledged\": true,\t\t\t\t// 確認傳成功\n\t\"insertedId\": ObjectId(\"blabla\")\n}\n```\n\u003e `ObjectId(\"blablabla\")`跟[[SQL 的 Keys]]中的 Primary Key 意思一樣\n\n### 新增多個 collections\n`.inserMany()`裡面限定放 array\n```js\ndb.students.insertMany([\n\t{\n\t\tname: \"\",\n\t\tage: ,\n\t\tmajor: ,\n\t\tscholarship: {\n\t\t\tmerit: ,\n\t\t\tother: ,\n\t\t}\n\t},\n\t{\n\t\tname: \"\",\n\t\tage: ,\n\t\tmajor: ,\n\t\tscholarship: {\n\t\t\tmerit: ,\n\t\t\tother: ,\n\t\t}\n\t},\n])\n```\n\u003e 回傳與 `.insertOne`一樣，`ObjectID`\n### 多個或單個 collection\n回傳比較簡略\n```js\ndb.students.insert({放一個物件})\ndb.students.insert([多個物件])\n```\n```js\n// 他會回傳\nWriteResult({ \"nInserted\": 放入了多少個物件 })\n```\n\n\n\n## find(read)\n### 查看 collection\n新增 collection 之後就可以用這個功能找到，看裡面的內容\n```js\n// 兩種都可，查看 students 這個 collection\ndb.students.find()\ndb.students.find({})\n```\n```js\n// 會回傳 ObjectId 跟物件本身\n```\n### 找到符合條件的項目\n像[[mySQL#顯示符合條件的內容]]的功能\n```js\ndb.students.find({ age: 10 })\n```\n```js\n// 會回傳符合條件的內容\n```\n#### Nesting Object\n如果要找物件裡的物件的話\n```js\ndb.students.find({\n\t\"scholarship.merit\": 2500\n})\n\n```\n#### 比較(comparison operator)\n[comparison operator](https://docs.mongodb.com/manual/reference/operator/query-comparison/#std-label-query-selectors-comparison)\n##### $gt\n```js\ndb.students.find({\n\t\"scholarship.merit\": {$gt: 1500}\t// 大於 1500\n})\n\n```\n##### $in\n```js\ndb.students.find({\n\t\"major\": {$in: [\"design\", \"chemical\"]}\t// 大於 1500\n})\n\n```\n\n#### 邏輯([logical query operators](https://docs.mongodb.com/manual/reference/operator/query-logical/))\n##### AND\n```js\ndb.students.find({\n\t$and: [\n\t\t{ \u003cexpression1\u003e }, \n\t\t{ \u003cexpression2\u003e } ,\n\t\t... ,\n\t\t{ \u003cexpressionN\u003e } \n\t] \n})\n```\n##### OR\n```js\ndb.inventory.find({\n\t$or: [\n\t\t{ quantity: { $lt: 20 } }, \n\t\t{ price: 10 } \n\t] \n})\n```\n\n\n\n## Update\n### 修改第一個符合條件的內容\n```js\n// 修改第一個符合條件的內容\ndb.students.updateOne(\n\t{ name: \"Sam\" },\t\t// 設定條件\n\t{\n\t\t$set: {\t\t\t\t// 設定修改後內容\n\t\t\tname: \"John\",\n\t\t\tmajor: \"Design\"\n\t\t}\n\t},\n\t$currentDate: {\t\t\t// 顯示最終更新日期\n\t\tlastModified: true\n\t}\n\n)\n```\n### 修改所有符合條件的內容\n```js\n// 修改第一個符合條件的內容\ndb.students.updateMany(\n\t{ major: \"Design\" },\t\t// 設定條件\n\t{\n\t\t$set: {\t\t\t\t\t// 設定修改後內容\n\t\t\tmajor: \"Graphic Design\"\n\t\t}\n\t},\n\t$currentDate: {\t\t\t\t// 顯示最終更新日期\n\t\tlastModified: true\n\t}\n\n)\n```\n\n\n## Delete\n\n```js\ndb.students.deleteOne({物件});\ndb.students.deleteMany({});\t\t// 全刪\ndb.students.deleteOne({ major: \"design\" })\t// 刪掉符合條件的\n```\n\n\n#database #mongodb #json","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E4%BD%BF%E7%94%A8%E8%88%87%E6%93%8D%E4%BD%9C-Mongoose":{"title":"使用與操作 Mongoose","content":"# 使用與操作 Mongoose\n\u003e [[Mongoose 建置]]先處理完\n\n\n- [[用資料夾管理 Mongoose models 模組]]\n- [[建立架構 Define a Schema]]\n\t- [[Validators]]\n\n- [[Mongoose Method]]\n\t- create an [[Instance Method]]\n\t- create an [[Static Method]]\n\t- create [[Middleware(Mongoose)]]\n\n- [[Create a Model]]\n\n- [[Create]]\n\t- [[Create#create an object]]\n\t- [[Create#Insert]]\n\n- [[Mongoose CRUD]]\n\t- 進階：[[Request handling（搭配數據庫CRUD）]]\n\n\n- [[透過 Mongoose 存入 MongoDB(Save)]]\n\n\u003e 後端搭配數據庫：[[Express and Mongoose]]\n#database #json #nosql #node #mongoose","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E5%88%A9%E7%94%A8-Mongoose-%E9%80%A3%E4%B8%8A-MongoDB":{"title":"利用 Mongoose 連上 MongoDB","content":"# 利用 Mongoose 連上 MongoDB\n```js\n// connect to mongoDB\n// 要設定連接成功或失敗的效果\n// 連到一個 database（exampleDB 為例，可自訂）\nmongoose.connect('mongodb://localhost:27017/exampleDB')\n\n\t.then(() =\u003e {\n\t\tconsole.log('Connected to MongoDB.');\n\t})\n\n\t.catch((err) =\u003e {\n\t\tconsole.log('Failed.');\n\t\tconsole.log(err);\n\t})\n```\n\n^86a132\n\n\u003e`mongoose.connect()`連結到名為 `exampleDB` 的 database\n\n\u003e原本 mongoose 5 在 mongoose.connect 有第二個參數，[已經建議刪除](https://mongoosejs.com/docs/migrating_to_6.html#version-requirements)\n\u003e```js\n\u003e{\n\u003e\tuseNewUrlParser: true,\n\u003e\tuseUnifiedTopology: true,\n\u003e}\n\u003e```\n\n#database #json #nosql #node #mongoose","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E5%BB%BA%E7%AB%8B%E6%9E%B6%E6%A7%8B-Define-a-Schema":{"title":"建立架構 Define a Schema","content":"## 建立架構\n### Define a Schema\n如同 [[SQL create 製作表格]] create table 的動作，Mongoose 也會定義物件的 [[Schema Type]]，之後就可以 [[Create a Model]] 做使用了\n```js\n// app.js\nconst studentSchema = new mongoose.Schema({\n\tname: string,\n\tage: Number,\n\tmajor: string,\n\tscholarship: {\n\t\tmerit: Number,\n\t\tother: Number\n\t}\n});\n```\n\u003e 如果要更複雜的定義 [[Validators]]\n\u003e 想要做些功能 [[Instance Method]]\n\n\n#database #nosql #json #npm #node #odm","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E7%94%A8%E8%B3%87%E6%96%99%E5%A4%BE%E7%AE%A1%E7%90%86-Mongoose-models-%E6%A8%A1%E7%B5%84":{"title":"用資料夾管理 Mongoose models 模組","content":"### 管理 Mongoose models 模組（非必要）\n可以建立一個 models 資料夾統一管理，每個 Schema + Model 的建立都分在不同的 js 檔案裡，各自匯出給 app 用\n- 匯入 mongoose 模組：[[匯入模組]]\n- [[建立架構 Define a Schema]]\n\t- 建立規則：[[Validators]]\n- [[Create a Model]]\n- [[匯出模組]]\n\n\u003e 可以到 app.js 主要的檔案做應用，並且維持 app.js 的整潔度\n\n#js #npm #node #expressJs #mongoose #database #form #ejs #backEnd","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/%E9%80%8F%E9%81%8E-Mongoose-%E5%AD%98%E5%85%A5-MongoDBSave":{"title":"透過 Mongoose 存入 MongoDB(Save)","content":"### save Jon to DB\n```js\nJon.save()\n\t.then(() =\u003e {\n\t\tconsole.log('Jon has been saved into DB');\n\t})\n\t.catch(() =\u003e {\n\t\tconsole.log('error has happend.');\n\t\tconsole.log(e)\n\t});\n```\n\n\u003e加入 Error Handling：[[Error Handling 非同步的寫法]]","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/Create-a-Model":{"title":"Create a Model","content":"### create a model\nmodel 就可以當成一個 [[MongoDB]] 的 collection 用了（[[MongoDB CRUD]]）\n```js\n// const 變數要大寫\n// model 的 string 也要大寫、單數\nconst Student = mongoose.model('Student', studentSchema);\n// mongoose 會自動把 model 轉成複數形式\n```\n\u003e 因為 [[Mongoose 建置]]時已經指定 database 為 exampleDB 了，在操作指令時就不用寫 `db.` 了\n\u003e ```js\n\u003e db.collection.{ CRUD }\t\t// 這是 [[MongoDB CRUD]] 寫法\n\u003e model.{ CRUD }\t\t\t\t  // 這是 [[Mongoose]] 寫法\n\u003e ```\n#database #nosql #json #npm #node #odm","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/%E5%BB%BA%E7%BD%AE/Mongoose-%E5%BB%BA%E7%BD%AE":{"title":"Mongoose 建置","content":"# [[Mongoose]] 建置\n- npm install: express, ejs, mongoose([[npm 建置與指令]])\n- import：[[取得 Node.js 裡的模組]]\n- [[利用 Mongoose 連上 MongoDB]]\n- [[Middleware(express)]]\n- [[使用與操作 Mongoose]]\n- [[Request Handling(Express)]]\n- port listening\n\n寫在 middleware 前\n```js\nconst express = require('express');\nconst app = express();\nconst ejs = require('ejs');\nconst mongoose = require('mongoose');\n```\n```js\n// middleware\napp.use(express.static('public'));\n\n\napp.get('/', (req, res) =\u003e {\n\tres.render('index.ejs');\n})\n\napp.listen(3000, () =\u003e {\n\tconsole.log(\"running on port 3000\");\n})\n```\n\n\n\n#database #json #nosql #node #mongoose","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Create":{"title":"Create","content":"# Create (Mongoose)\n\u003e - [[建立架構 Define a Schema]] 之後可以利用 model 來建立，可以對 model 進行 [[Mongoose CRUD]]\n\u003e - 更改過後需要存入 DB：[[透過 Mongoose 存入 MongoDB(Save)]]\n\n## create an object\n```js\nconst Jon = new Studtent({\n\tname: 'John',\n\tage: 25,\n\tmajor: 'EE',\n\tscholarship: {\n\t\tmerit: 2500,\n\t\tother: 1300\n\t}\n})\n```\n\u003e 更改過後需要存入 DB：[[透過 Mongoose 存入 MongoDB(Save)]]\n\n## Insert\n```js\nModel.insertMany()\n// 沒有 insertOne() ，因為直接用 save 就好\n```\n\n#mongoose #mogodb #database #crud #nosql #json","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Delete":{"title":"Delete","content":"# Delete (Mongoose)\n```js\nmodel.deleteOne();\nmodel.deleteMany();\n\n// 組合技\nmodel.findOneAndDelete();\n```\n\n```js\nStudent.deleteOne({ \"scholarship.merit\": { $gte: 1500 } })\n\t.then((meg) =\u003e {\n\t\tconsole.log(meg)\t\t// log 刪完的 model，刪掉誰看不到\n\t})\n```\n```js\nStudent.findOneAndDelete({ \"scholarship.merit\": { $gte: 1500 } })\n\t.then((meg) =\u003e {\n\t\tconsole.log(meg)\t\t// log 刪掉的內容\n\t})\n\n```\n\n\n\n#database #nosql #json #npm #node","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/FindRead":{"title":"Find(Read)","content":"# Mongoose Find (Read)\n```js\nModel.find()\t\t\t\t// 回傳 array with object\nModel.findOne()\t\t\t\t// 回傳單一 object\nModel.findOneAndUpdate()\t// 回傳更新過後的特定內容\n```\n## find\n```js\nStudent.find({}).then(data =\u003e {\n\tconsole.log(data);\n})\n// 執行後會在終端看到搜尋結果\n// 不論幾個 object 符合條件，都會包在 array 裡面\n```\n## findOne\n```js\nStudent.findOne({ name: 'John' })\n\t.then(data =\u003e {\n\t\tconsole.log(data);\n})\n// 執行後會在終端看到搜尋結果\n// 回傳一個 object\n```\n\u003e `find` 還有很多[連合技](https://mongoosejs.com/docs/api/model.html)\n\u003e - [[findOneAndUpdate]]}}\n\n\n\u003e 也可以配合 [[MongoDB CRUD#比較 comparison operator]] 來做更複雜的篩選\n\u003e ```js\n\u003e Student.find({ \"scholarship.merit\" : {$gte: 1500} }).then((data) =\u003e {\n\u003e \tconsole.log(data);\n\u003e })\n\u003e ```\n\n\u003e[[EJS 使用 Mongoose 取得數據庫資料作為變數]]\n\n\u003e 不一定一定要串 then，如果沒有打算運用該物件做什麼事的話：[[製作登入、註冊介面]]\n\n#database #nosql #mongoose #mongodb #json #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Mongoose-CRUD":{"title":"Mongoose CRUD","content":"# Mongoose CRUD\n- [[Schema Type]]\n- [[Database 數據庫#C R U D]]\n\t- [[Create]]\n\t- [[Find(Read)]]\n\t- [[Update]]\n\t- [[Delete]]","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/Update":{"title":"Update","content":"---","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/CRUD/findOneAndUpdate":{"title":"findOneAndUpdate","content":"## findOneAndUpdate\n\u003e[[Update]] 會回傳整個列表，不會回傳更改過後的特定內容\n```js\nmodel.findOneAndUpdate(condition, update, options)\n```\n\u003e [[Validators]] 預設不會重跑，options 可以加入 [[Update with Validators]] 來重跑\n```js\nStudent.findOneAndUpdate(\n\t{ 尋找的屬性(找出相符的特定物件) },\n\t{ 更改後的內容（要更改的部份） },\n\t{\n\t\tnew: true,\t\t\t\t// log 更新的項目\n\t\trunValidators: true\t\t// 重跑一次 validators\n\t}\n).then((meg) =\u003e {\n\tconsole.log(meg)\n})\n```\n\u003e`useFindAndModify` 在第六版已經不建議加入，可以不用放了\n\n## 使用 [[Instance Method]] 做出同樣效果\n```js\n// instance method\nstudentSchema.methods.addage = function() {\n\tthis.age++;\n}\n\nStudent.findOne({ name: 'Eric'})\n\t.then((data) =\u003e {\n\t\tdata.addAge();\n\t\tconsole.log(data);\n\t}).catch(e =\u003e {\n\t\tconsole.log(e);\n\t})\n```\n\n#database #nosql #mongoose #mongodb #json #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Mongoose":{"title":"Mongoose","content":"---\n# Mongoose\n- 一種 [[ODM]]，用來連結 [[MongoDB]] 到網頁專案上\n- 也是 npm 模組","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Mongoose-Atlas/MongoDB-Atlas":{"title":"MongoDB Atlas","content":"# MongoDB Atlas\n\u003e 要注意不同專案不要用到同一個 cluster（collection 要清掉）\n\n\n雲端版本的 [[MongoDB]]\n\n\n## Network Access\nCurrent 跟 Anywhere IP 都新增\n\n## Database Access\n新增 User\n\n## Database(Cluster)\n按 Connect -\u003e Connect your application\n\n### 取得連線 URI\n這段的 URI 貼到 `.env` 裡面後把他貼到 mongoose.connect 裡面\n```\n// .env 檔\nDB_CONNECT=mongodb+srv://sz:\u003c換成密碼\u003e@cluster0.hk85a.mongodb.net/\u003c數據庫命名\u003e? retryWrites=true\u0026w=majority\n```\n\u003e[[dotenv（使用 env 變數）]]\n\n### [[利用 Mongoose 連上 MongoDB]]\n```js\n// 以下 DB 記得改成用 env 存取 atlas 版本\nmongoose.connect(process.env.DB_CONNECT)\n```\n\n![[利用 Mongoose 連上 MongoDB#^86a132]]\n\n\n#js #json #expressJs #mongoose #mogodb","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Promise-and-Query-Mongoose":{"title":"Promise and Query (Mongoose)","content":"# [[Promise]] and Query (Mongoose)\n[Doc](https://mongoosejs.com/docs/api/model.html#model_Model.deleteMany) 內隨意找個 Model api 來看\n很容易看到 Returns 的欄位寫`\u003c\u003cPromise\u003e\u003e` 或是 `\u003c\u003cQuery\u003e\u003e`（[Queries](https://mongoosejs.com/docs/queries.html)）\n\n兩者很類似，都可以使用 `.then()` 跟 `.catch()` （[[Promise]]）\n\n#database #js #mongoose #promise #async #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/%E9%80%9A%E7%94%A8%E7%9A%84-Validators":{"title":"通用的 Validators","content":"## 通用的 Validators\n所有 [[Schema Type]] 都可以用：\n- [[required]]：必填\n- Default：預設值\n\n```js\n// 另一種寫法\ncost studentSchema = new mongoose.Schema({\n\tname: {\n\t\ttype: String,\n\t\trequired: [true, \"This is Required\"]\n\t},\n\tage: {\n\t\ttype: Number,\n\t\trequired: true,\n\t\tdefault: 18,\n\t}\n\tscholarship {\n\t\tmerit: {\n\t\t\ttype: Number\n\t\t}\n\t\tother: {\n\t\t\ttype: Number\n\t\t}\n\t}\n})\n```\n\n#database #nosql #mongoose #mongodb #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Enum%E6%8C%87%E5%AE%9A-string-number":{"title":"Enum(指定 string, number)","content":"# Enum（指定 string, number）\n[[String 用 Validators]]\n\u003e enumerate: 枚舉\n\n可以規範輸入的資料只能是特定字串\n\n很像 [[Form]] 的 [[select \u0026 datalist 選單]]\n```js\n// define a schema\nconst studentSchema = new mongoose.Schema({\n\tmajor: {\n\t\ttype: string,\n\t\t// 只能輸入 enum 有出現的內容\n\t\tenum: [\"Chem\", \"Electric\", \"Computer Science\"],\n\t\tdefault: \"尚未選擇\"\n\t} \n})\n// create a model\nconst Student = mongoose.model(\"Student\", studentSchema);\n```\n\u003e 忘記過程可以看詳細：[[Create]], [[Schema Type]], [[Validators]]\n\n## 如果輸入一個沒被規範的內容\n```js\n// create an object\nconst newStudent = new Student({\n\tname: ,\n\tage: ,\n\tmajor: 'Math'\n})\n// error\n```\n\n\n#database #nosql #mongoose #mongodb #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Minlengthnumber":{"title":"Minlength(number)","content":"# Minlength (number) (Mongoose)\n[[String 用 Validators]]\n```js\n// define a schema\nconst studentSchema = new mongoose.Schema({\n\tname: {\n\t\ttype: String,\n\t\trequired: [true, \"Required\"]\n\t\tmaxlength: [15, \"name is to long.\"]\n\t}\n})\n// create a model\nconst Student = mongoose.model.('Student', studentSchema);\n\n// create a object\nconst newStudent = new Student({\n\tname: 'fjeoifjweiojfowefijiowefjioefjioefj',\n})\n// error\n```\n\u003e [[Create]]\n#database #nosql #mongoose #mongodb #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Number-%E7%94%A8-Validators":{"title":"Number 用 Validators","content":"# Number 用 [[Validators]]\n- Min\n- Max\n- Enum( 可參照[[Enum(指定 string, number)]])\n\n```js\n// define a schema\nconst studentSchema = new mongoose.schema({\n\tage: {\n\t\ttype: number,\n\t\tmax: 150,\n\t\tmin:0,\n\t}\n})\n```\n\n跟 [[Form]] 的 [[input#number]] 的規範很像\n#database #nosql #mongoose #mongodb #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Schema-Type":{"title":"Schema Type","content":"# Schema Type (Mongoose)\n\u003e- [ ] 怎麼設定 primary key\n- [[Create]] 的時候，需要定義資料類型\n- 搭配 [[Validators]] 可以做更複雜的定義規範\n## 寫法\n\u003e 記得類型要寫大寫\n### 簡易寫法\n```js\n// app.js\nconst studentSchema = new mongoose.Schema({\n\tname: String,\n\tage: Number,\n\tmajor: String,\n\tscholarship: {\n\t\tmerit: Number,\n\t\tother: Number\n\t}\n});\n```\n### 可以配合 [[Validators]] 的寫法\n如果要搭配更詳細的規範，就必須用這個寫法，才能寫入 [[Validators]]\n```js\n// 另一種寫法\ncost studentSchema = new mongoose.Schema({\n\tname: {\n\t\ttype: String\n\t},\n\tage: {\n\t\ttype: Number\n\t}\n\tscholarship {\n\t\tmerit: {\n\t\t\ttype: Number\n\t\t}\n\t\tother: {\n\t\t\ttype: Number\n\t\t}\n\t}\n})\n```\n\n\n#json #dataType #nosql #mongoose","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/String-%E7%94%A8-Validators":{"title":"String 用 Validators","content":"## String 用 [[Validators]]\n[[Create]] 的時候規範 [[Schema Type]] 時可以使用\n- [[Enum(指定 string, number)]]\n- [[Minlength(number)]]\n- Maxlength(number): 參照 [[Minlength(number)]]\n- Uppercase(boo)\n- Lowercase(boo)\n\n\n\n#database #nosql #mongoose #mongodb #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Update-with-Validators":{"title":"Update with Validators","content":"# Update with Validators\n[[Validators]] 只有在一開始 set 的時候會做驗證，後續跑像是 [[Update]] 的功能就不會再驗證了，要加入一個內容 `runValidators`\n\n\u003e [[Find(Read)#Find and Update]]\n```js\nStudent.findOneAndUpdate(\n\t{ name: '原本的'},\n\t{ name: '更新的' },\n\t// 以下可以放入 option\n\t{ \n\t\tnew: true,\t\t\t\t// log 更新的項目\n\t\trunValidators: true\t\t// 重跑一次 validators\n\t},\n)\n```\n\n\n#database #nosql #mongoose #mongodb #validators #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/Validators":{"title":"Validators","content":"# Validators\n[官方文件](https://mongoosejs.com/docs/schematypes.html#string-validators)\n\n\u003e [[Schema Type#簡易寫法]] 可以簡單的做規範，但通常都還是會搭配 [[Validators]] 來寫\n\n\n在 [[Mongoose]] 也可以用 [[Validators]] 規範 [[Schema Type]] \n\n\u003e類似 [[SQL create 製作表格]] 中有提到 [[Constraints]] 可以將資料內容做規範\n\n## Shcema Type 的 [[Validators]]\n- [[String 用 Validators]]\n- [[Number 用 Validators]]\n- [[通用的 Validators]]\n\n## [[Database 數據庫#C R U D]] 的 [[Validators]]\n\n[[Update with Validators]]\n\n\n## 特性\n- 輸入的資料不完全符合 validators 的話，還是有機會送成功\n```js\n// create an object\nconst newStudent = new Student({\n\tage: 18,\n\tscholoarship: { merit: \"1500\", other: \"2000\" }\t\n\t// 在 number 的類型欄位送出 string\n})\n// 可以成功\n```\n\n- 如果送出不存在的 Schema ，不會產生 error ，但也不會存進 DB 裡面\n- [[Validators]] 只有在一開始 set 的時候會做驗證，後續跑像是 [[Update]] 的功能就不會再驗證了\n\n\n#database #nosql #mongoose #mongodb #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/Schema-Type/required":{"title":"required","content":"## required (Mongoose Validators)\n值可以是：\n- boolean\n- array: `[true, \"沒有填的時候跳出的錯誤提示\"]`\n- function: `function() { return this.其他欄位 \u003e 3; }`\n```js\ncost studentSchema = new mongoose.Schema({\n\tname: { \n\t\ttype: String,\n\t\trequired: [true, \"This is Required\"]\n\t},\n})\n```\n\n```js\ncost breakfastSchema = new mongoose.Schema({\n\tbacon: {\n\t\ttype: Number,\n\t\trequired: true\n\t},\n\tdrink: {\n\t\ttype: String,\n\t\trequired: function() {\n\t\t\treturn this.bancon \u003e 3;\t\t// 如果 bacon 點了三片以上就必須點飲料\n\t\t}\n\t},\n})\n```\n\n#mongoose #mongodb #database #schema #validators","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Instance-Method":{"title":"Instance Method","content":"# Instance Method\n[[Mongoose Method]]\n\n[[Create#Define a Schema]] 之後，可以設定 [[Instance Method]] 供 model 使用\n\n\u003e有個很像的 [[Static Method]] 之後再提\n\n\u003e用instance method改變資料數據後，需加入this.save()\n## 建立 Instance Method\n```js\n// create an instance method\nstudentSchema.methods.totalScholarship = function() {\n\t// this 指的是物件\n\treturn this.scholarship.merit + this.scholarship.other;\n}\n\n// create a model\nconst Student = mongoose.model('Student', studentSchema);\n```\n## 搭配 [[Find(Read)]] 使用\n### 對單一物件使用\n```js\n// find 會回傳 array，要用 findOne (回傳object)\nStudent.findOne({ name: 'Eric' })\t\n\t// data 是符合條件的該物件\n\t.then(data =\u003e {\t\n\t// 搭配 instance method 使用 \n\t\tlet result = data.totalScholarship();\n\t\tconsole.log(result);\n\t}).catch(e =\u003e {\n\t\tconsole.log('error!');\n\t\tconsole.log(e);\n\t})\n```\n\u003e 第一段要注意，有用 [[this]]，不可以隨意改成[[4.箭頭函式 arrow function]]\n### 批次物件使用\n```js\n// data 是包在 array 的物件們\nStudent.find({}).then(data =\u003e {\n\tdata.forEach(oneStudent =\u003e {\n\t\tconsole.log(`${onestudent} has total Scholarship ${oneStudent.totalScholarship}).`\n\t})\n})\n```\n### 做出 [[findOneAndUpdate]] 的效果\n[[findOneAndUpdate#使用 Instance Method 做出同樣效果]]\n\n\n#database #mongoose #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/MiddlewareMongoose":{"title":"Middleware(Mongoose)","content":"# Middleware (Mongoose)\n[[Mongoose Method]]\n[[Mongoose 建置]]\n\n\n## Schema.pre()\n可以定義哪些動作之前（`pre`）要做什麼動作\n```js\nconst fs = require('fs') \t// file system\n\n// define a schema\n\n\n// 定義在 'save' 之前要做什麼事\n// writeFile: 建立一個檔案，指定寫入什麼內容\nstudentSchema.pre('save', async function(){\n\tfs.writeFile('history.txt', \"One data is trying to be saved.\", (e) =\u003e {\n\t\tif (e) throw e;\n\t})\n})\n\n// create a model\nconst Student = mongoose.model('Student', studentSchema);\n\nconst newStudent = new Student({\n\tname: 'Kelly',\n\tage: ,\n\tmajor: ,\n\tsholarship: { merit: , other: }\n});\n\n\n// save \nnewStudent.save()\n\t.then(() =\u003e {\n\t\tconsole.log('saved');\n\t}).catch(e =\u003e {\n\t\tconsole.log('not saved.')\n\t})\n\t\n\n```\n\u003e [[fs (File System)]]\n## Schema.post()\n```js\nstudent.Schema.post('save', async function() {\n\tfs.writeFile('history.txt', 'one data has been saved.'), (e) =\u003e {\n\t\tif (e) throw e;\n\t}\n});\n\n// create a model\nconst Student = mongoose.model('Student', studentSchema);\n\nconst newStudent = new Student({\n\tname: 'James',\n\tage: ,\n\tmajor: ,\n\tsholarship: { merit: , other: }\n});\n\n\n// save \nnewStudent.save()\n\t.then(() =\u003e {\n\t\tconsole.log('saved');\n\t}).catch(e =\u003e {\n\t\t// log 在終端\n\t\tconsole.log('not saved.');\n\t\t// 顯示在 history.txt 內\n\t\tfs.writeFile('history.txt', \"data is not saved\"), (e) =\u003e {\n\t\t\tif (e) throw e;\n\t\t}\n\t})\n\t\n```\n\n#database #nosql #json #mongoose","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Mongoose-Method":{"title":"Mongoose Method","content":"# Mongoose Method\n- [[Instance Method]]\n- [[Static Method]]\n- [[Middleware(Mongoose)]]\n\n#database #mongoose #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/Mongoose/method/Static-Method":{"title":"Static Method","content":"# Static method\n[[Mongoose Method]]\n給 model 用的，[[Instance Method]] 是給 Schema 用的\n\n[[Create#Define a Schema]] 之後\n```js\n// create instance method\nstudentSchema.methods.addAge = function() {\n\tthis.age++;\n}\n// create static method\nstudentSchema.statics.setOtherToZero = function() {\n\t// this 指向整個 model\n\tthis.updateMany({}, {'scholarship.other': 0})\n}\n\n// create a model\nconst Student = mongoose.model(\"Student\", studentSchema);\n\n// 直接對整個 model 使用\nStudent.setOtherToZero()\n\t.then(meg =\u003e {\n\t\tconsole.log(meg);\n\t}).catch(e =\u003e {\n\t\tconsole.log(e);\n\t})\n\t\nStudent.find({});\t\t// 所有 other 已經歸零\n```\n\n#database #mongoose #crud","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Database/noSQL/ODM":{"title":"ODM","content":"# ODM\n- Object Document Modeling\n- Mapping\n- 通常是 NoSQL 在用，[[SQL]] 通常用的是 [[ORM]]\n\n#json #database #nosql","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E6%A8%A3%E6%9D%BFviews-%E8%B3%87%E6%96%99%E5%A4%BE":{"title":"樣板：views 資料夾","content":"### 樣板：views 資料夾\n取代一般的 html 的 ejs 檔案必須都放在 `views` 資料夾下\n```js\n// index.ejs 一定要在 views 資料夾下才會運作，不然會出現 error\napp.get(\"/\", (req, res) =\u003e {\n\tres.render(\"index.ejs\");\t\t\t// 處理該 ejs 檔\n})\n```\n\n#npm #gulp #html #js #ejs #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E7%94%9F%E6%88%90%E8%88%87%E4%BD%BF%E7%94%A8-EJS-%E6%A8%A3%E6%9D%BF%E5%8F%AF%E7%94%A8%E7%9A%84%E8%AE%8A%E6%95%B8":{"title":"生成與使用 EJS 樣板可用的變數","content":"# 生成 EJS 樣板可用的變數\n舉例：\n- [[EJS 使用網址輸入內容作為變數]]\n- [[EJS 使用 Mongoose 取得數據庫資料作為變數]]（事前知識： [[Mongoose]],[[Promise]]）\n\t- [[EJS 對超連結使用變數]]\n\n#npm #gulp #html #js #ejs #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/%E7%B7%A8%E8%AD%AF-EJS-%E6%A8%A3%E6%9D%BF-res.render":{"title":"編譯 EJS 樣板 res.render()","content":"# 編譯 EJS 樣板 res.render ()\n\u003e ejs 檔案要放在[[樣板：views 資料夾]]裡\n```js\n// 單純編譯\n// .ejs 可以省略\nres.render('page.ejs')\n// 搭配變數\nres.render('page.ejs'), { name }}\n```\n\n\u003e- [[生成與使用 EJS 樣板可用的變數]]\n\u003e `{name}` 是 `{ name: name }` 的語法糖\n\n\u003e\u003e指定路徑可能會想用：[[res.redirect()]]\n#npm #gulp #html #js #ejs #expressJs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/EJS-%E5%BB%BA%E7%BD%AE":{"title":"EJS 建置","content":"# EJS 建置\n## 安裝\n- VS插件：[EJS Language support]\n- npm: `npm install express nodemon ejs `\n\n## 建置\n- Import: express, app, ejs\n- [[EJS with Express 的基本設定]]\n- middleware\n\t-  [[Express 的 CSS 樣式環境建置 (Serving a Static File)]]\n- [[樣板：views 資料夾]]\n- app.get\n\t- [[編譯 EJS 樣板 res.render()]]\n\t- [[生成與使用 EJS 樣板可用的變數]]\n\t\t- [[EJS 使用網址輸入內容作為變數]]\n\t\t- [[EJS 使用 Mongoose 取得數據庫資料作為變數]]（事前知識： [[Mongoose]],[[Promise]]）\n- port listening([[後端/Express.js/建置/Express Life Cycle 生命週期]])\n\n#node/npm #gulp #html #node/ejs #node/express","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E5%BB%BA%E7%BD%AE/EJS-with-Express-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A":{"title":"EJS with Express 的基本設定","content":"# EJS with Express\n\u003e取自[官網提供的方法](https://github.com/mde/ejs/wiki/Using-EJS-with-Express)\n\n會用到 [[app.set()]]\n```js\n// import\nlet express = require('express');\nlet app = express();\n\n// EJS 設定\napp.set('view engine', 'ejs');\n\n// routing\napp.get('/', (req, res) =\u003e {\n  res.render('index', {foo: 'FOO'});\n});\n\n// port listening\napp.listen(4000, () =\u003e console.log('Example app listening on port 4000!'));\n```\n\u003e[[app.set()]]\n\n#node/npm #gulp #html #node/ejs #node/express","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/%E5%8C%AF%E5%85%A5%E5%85%B6%E4%BB%96-EJS-%E6%AA%94":{"title":"匯入其他 EJS 檔","content":"# 匯入其他 EJS 檔\n```js\n// 放在 views 裡面的檔案\n\u003c%- include ('檔案.ejs') %\u003e\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8%E9%A1%AF%E7%A4%BA%E6%96%BC%E7%B6%B2%E9%A0%81%E4%B8%8A":{"title":"EJS 使用變數顯示於網頁上","content":"# EJS 使用變數顯示於網頁上\n```js\n// 要顯示出來的變數\n\u003c標籤\u003e\u003c%= 要取得這個值到 HTML 的話 %\u003e\u003c/標籤\u003e\n```\n\n## 舉例\n\u003e使用已經生成的 name 變數：[[生成與使用 EJS 樣板可用的變數]]\n```ejs\n// person.ejs\n// 網址打什麼都會顯示在 name 變數裡面\n\u003ch1\u003e\u003c%= name %\u003e\u003c/h1\u003e\n```\n\n#js #ejs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E5%AF%AB%E4%B8%8D%E5%90%AB%E5%80%BC%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC":{"title":"EJS 寫不含值的程式碼","content":"# EJS 寫不含值的程式碼\n```js\n// 單純寫\n\u003c% 撰寫純 JS code 的話 %\u003e\n```\n## for 迴圈\n`i` 會顯示在 HTML，要加 `=`\n```ejs\n\u003cbody\u003e\n\t\u003c%for (let = 0; i \u003c 10; i++) {%\u003e\n\t\t\u003cp\u003e\u003c%= i %\u003e\u003cp\u003e\n\t\u003c% } %\u003e\n\u003c/body\u003e\n```","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87":{"title":"EJS 撰寫規則","content":"# EJS 撰寫\nEJS 可以當成就是在 JS 環境寫 HTML，所以也可以在裡面寫 JS\n- [[EJS 使用變數顯示於網頁上]]\n- [[EJS 寫不含值的程式碼]]\n- [[匯入其他 EJS 檔]]\n- [[EJS 註解 comment]]\n\n\n#js #ejs","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/%E6%92%B0%E5%AF%AB%E8%A6%8F%E5%89%87/EJS-%E8%A8%BB%E8%A7%A3-comment":{"title":"Untitled Page","content":"# EJS 註解 comment\n```ejs\n\u003c%# 註解 %\u003e\n\u003c%/* 多行註解 */%\u003e\n```\n\n#ejs #js #npm #module ","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS":{"title":"EJS","content":"# EJS (Embedded JavaScript)\n- 一種[[樣板語言]](template language)，可以做樣板管理\n- 中文：嵌入式 JS\n- 一種[[樣板語言]]，在 JS 的環境下寫 HTML\n- 可以統一管理不同 HTML 的頁面裡，相同的內容，例如 navbar\n\n\n\n## 撰寫\n- [[EJS 建置]]\n- [[EJS 撰寫規則]]\n- [[EJS 回應表單]]\n- [[EJS 搭配 Database]]\n\n\n#node/npm #gulp #htm #node/express #node/ejs","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-%E5%9B%9E%E6%87%89%E8%A1%A8%E5%96%AE":{"title":"EJS 回應表單","content":"# EJS 回應表單 ([[Routing for Query 回應表單]])\n## [[Form]]\n有一個表單，透過後端來取得這些資料後，使用 EJS 生成顯示這些資料的頁面\n```html\n// index 上的表單\n\u003cform action=\"/response\" method=\"GET\"\u003e\n\n\t\u003clabel for=\"name\"\u003eYour Name\u003c/label\u003e\n\t\u003cinput type=\"text\" id=\"name\" name=\"name\"\u003e\n\n\t\u003clabel for=\"age\"\u003eYour Age\u003c/label\u003e\n\t\u003cinput type=\"text\" id=\"age\" name=\"age\"\u003e\n\t\n\t\u003cinput type=\"submit\"\u003eSubmit\u003c/input\u003e\n\n\u003c/form\u003e\n```\n## [[Routing for Query 回應表單#GET form]]\n```js\n// app.js\napp.get(\"/response\", (req, res) =\u003e {\n\tlet { name, age } = req.query\t\t// get 表單\n\tres.render(\"respond.ejs\")\n})\n```\n\u003e [[從物件中提取屬性到變數中 Destructing an object]]\n\n## [[EJS]]\n```html\n// respond.ejs\n\u003ch1\u003e表單已送出\u003c/h1\u003e\n\u003cul\u003e\n\t\u003cli\u003e你的名字：\u003c%= name %\u003e\u003c/li\u003e\n\t\u003cli\u003e你的年齡：\u003c%= age %\u003e\u003c/li\u003e\n\u003c/ul\u003e\n```","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-%E6%90%AD%E9%85%8D-Database":{"title":"EJS 搭配 Database","content":"## 搭配 [[Database 數據庫]]\n[[Mongoose]]\n```js\napp.get(\"/\", (req, res) =\u003e {\n\t// 有個 array ，通常數據庫都會給這樣格式的資料\n\tconst languages = [\n\t\t{ name: \"python\", rating: 9.5 popularity: 9.7}, \n\t\t{ name: \"java\" ......}\n]\n\n\t\n\tres.render(\"index.ejs\", { languages });\n});\n```\n\n```ejs\n\u003c% languges.forEach(lang =\u003e { %\u003e\n\u003ctr\u003e\n\t\u003ctd\u003e\u003c%= lang.name %\u003e\u003c/td\u003e\n\t\u003ctd\u003e\u003c%= lang.popularity %\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c% }) %\u003e\n```","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E4%BD%BF%E7%94%A8%E7%B6%B2%E5%9D%80%E8%BC%B8%E5%85%A5%E5%85%A7%E5%AE%B9%E4%BD%9C%E7%82%BA%E8%AE%8A%E6%95%B8":{"title":"EJS 使用網址輸入內容作為變數","content":"### 使用網址輸入內容作為變數\n可以將輸入的網址部分設定為變數\n```js\n// 匯入三個模組： express, app, ejs\n\n// middleware\napp.use(express.static(\"public\"));\n\n// index.ejs 一定要在 views 資料夾下才會運作\napp.get(\"/:name\", (req, res) =\u003e {\n\tlet { name } = req.params\n\t// ejs 檔案後的物件，可以供 ejs 檔案當變數使用\n\tres.render(\"person.ejs\", { name });\n})\n```\n\n\u003e- [[Routing#Routing for pattern 回應有規律的網址]]\n\u003e - [[從物件中提取屬性到變數中 Destructing an object]]\n\u003e - `{ name }` 為 `{ name: name }` 的語法糖\n\n#node/npm #gulp #html #node/ejs #node/express","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E4%BD%BF%E7%94%A8-Mongoose-%E5%8F%96%E5%BE%97%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99%E4%BD%9C%E7%82%BA%E8%AE%8A%E6%95%B8":{"title":"EJS 使用 Mongoose 取得數據庫資料作為變數","content":"# 使用數據庫資料作為變數\n\u003e看完這兩段再理解就好\n\u003e- [[Mongoose]]\n\u003e\t- [[Find(Read)]]\n\u003e- [[AJAX]]\n\n在使用 [[Mongoose]] 要注意是非同步指令，需要用 [[Promise]] 寫法\n```js\n// 從 DB 取得資訊顯示到網頁上\napp.get('/students', async (req, res) =\u003e {\n\tlet data = await Student.find();\n\tres.render('students.ejs', { data });\n})\n```\n#database/mongoose #js/promise #ajax \n#node/npm #gulp #html #node/ejs #node/express","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E5%B0%8D%E8%B6%85%E9%80%A3%E7%B5%90%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8":{"title":"EJS 對超連結使用變數","content":"# EJS 對超連結使用變數\n網址上也可以使用變數\n```ejs\n\u003ca href=\"/students\"\u003e回到學生列表\u003c/a\u003e\n```\n\n```ejs\n\u003cul\u003e\n\t\u003c% data.forEach(student=\u003e { %\u003e\n\t\u003cli\u003e\u003ca href=\"/students/\u003c%= student.id %\u003e\"\u003e\n\t\u003c%= student.name %\u003e, 編號\u003c%= student.id %\u003e\n\t\u003c/a\u003e\u003c/li\u003e\n\t\u003c% }) %\u003e\n\u003c/ul\u003e\n```\n\n\n #form\n#backEnd #node/express #node/ejs #database/mongoose #node/npm","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/EJS-with-Mongoose/EJS-%E6%8F%90%E4%BE%9B%E7%94%A8%E6%88%B6%E6%9B%B4%E6%96%B0%E7%9A%84%E8%B3%87%E6%96%99%E7%9A%84%E8%A1%A8%E5%96%AE":{"title":"EJS 提供用戶更新的資料的表單","content":"## EJS 提供用戶更新的資料的表單\n```js\n// 提供更新用的表單給客戶\napp.get('/students/edit/:id', async (req, res) =\u003e\n\tlet { id } = req.params;\n\ttry {\n\t\tlet data = await Student.findOne({ id });\n\t\tif ( data !== null ) {\n\t\t\tres.render('studentEdit.ejs', { data });\n\t\t} else {\n\t\t\tres.send('該 ID 尚未被登錄');\n\t\t}\n\t}\n);\n```\n\n```html\n// POST\n\u003c!-- 使用變數＋method-override --\u003e\n\u003cform action=\"/students/edit/\u003c%= data.id %\u003e?method=DELETE\" method=\"POST\"\u003e\n\t\u003clabel for=\"id\"\u003eID:\u003c/label\u003e\n\t\u003c!-- value 抓出數據庫資料顯示 --\u003e\n\t\u003cinput type=\"number\" id=\"id\" name=\"id\" value=\"\u003c%= data.id %\u003e\"\u003e\n\t\u003c!-- 其餘 input 省略 --\u003e\n\t\u003cinput type=\"submit\"\u003e\n\u003c/form\u003e\n```\n\n#database/mongoose #form #crud\n\n #backEnd #node/npm #gulp #html #node/ejs #node/express","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/Eleventy":{"title":"Eleventy","content":"## 名為大腦的裝飾品\n真的只有大略看一下而已\n探索前端知識，就是一個接納自己的大腦其實是裝飾品的過程。\n擺在那邊不整理，就會長灰塵\n\n理解他是個裝飾品之後，就會想要把它漂漂亮亮的供起來\n等到我想到他的時候再翻翻找找，拿它出來看看摸摸\n\n這時候就會需要一個漂亮的容器，或是說舞台\n部落格就是很好的選擇\n\n## 收納品選擇\n部落格有很多種選擇，才剛開始學前端其實也沒必要一開始就要\n\n\n## 資料\n[Beginner's Guide to Eleventy](https://tatianamac.com/posts/beginner-eleventy-tutorial-parti/)\n\n## 步驟\n`npm init -y`\n`npm install --save-dev @11ty/eleventy`\n`echo 'You are officially a developer!' \u003e index.html`\n`npx @11ty/eleventy`:helper檢查目前狀態\n\n\n## devDependencies\n- 開發自己的 package 所需的內容\n- 也是別人載入我的 package 時會自動安裝的內容\n- 也就是大家要讀取我的 project 時需要的核心內容\n\n[shopify liquid cheat sheet](https://www.shopify.com/partners/shopify-cheat-sheet)\n#ssg #eleventy","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/HUGO":{"title":"HUGO ","content":"https://spring.io/projects/spring-boot\n\n[課程資訊：Github 免費架站術！輕鬆打造個人品牌](https://hahow.in/courses/5de8fec16117240026540b9c/main)\n\n## 建置環境\n### 下載 hugo-extended\nhttps://gohugo.io/\n[See the Getting Started Guide for other methods.](https://gohugo.io/getting-started/installing/)\n![](https://i.imgur.com/ShUlg77.png)\n[Hugo Releases](https://github.com/gohugoio/hugo/releases)\n![](https://i.imgur.com/mvg2MWo.png)\n找hugo_extended\n![](https://i.imgur.com/zVpmjXE.png)\n會得到一個執行檔\n![](https://i.imgur.com/5z4mKOf.png)\n\n\n## 下載需要的 hugo themes \n[HUGO themes](https://themes.gohugo.io/)\n這裡以 [Liva Hugo](https://themes.gohugo.io/themes/liva-hugo/) 為例\n1. Download\n2. 下載後 將 liva-hugo-master 資料夾，名稱刪除 -master\n3. 將裡面的 exampleSite 拉出，新建 themes 資料夾\n4. live-hugo 拉進去 themes\n5. extend 資料夾的 hugo 執行檔拉進去 exampleSite\n6. exampleSite 執行\n```\n./hugo server\n```\n\n![](https://i.imgur.com/JpHa5QZ.png)\n7.   取得本機即時預覽網址    \n```\nWeb Server is available at http://localhost:1313/liva/ (bind address 127.0.0.1)\n\nPress Ctrl+C to stop\n```\n\n## 修改程式碼\n### config.toml\n最重要的設定檔\n#### 設定部落格名稱\n```toml\ntitle = \"部落格名稱\"  \n```\n#### 設定 logo\n```\nlogo = \"images/logo.png\"\n```\nstatic/image\n大小可以進主題的程式碼再改\n#### contact me\n````\n# Contact Information\nmobile = \"0124857985320\"\nemail = \"demo@email.com\"\nlocation = \"Dhaka, Bangladedsh\"\n````\n\n#### about/index.md\n作者大頭貼\n```\n# image\nimage: \"images/author.jpg\"\n```\n\n#### 支援 markdown\n換行要空一行\n\n## Analytics 分析\n可以串接其他 API","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/SSG/Lets-Learn-Eleventy":{"title":"Let's Learn Eleventy!","content":"---\n# Let's Learn Eleventy! (with Zach Leatherman)\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/j8mJrhhdHWc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## 起初\n希望他比起是一個 framework ，更希望是個 utility\n核心只有從 templates 導向輸出結果\n\n## starter project \n可以先 clone 下來做基本樣式\n\n## liquid（不懂\n## templete\n```html","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E4%BD%BF%E7%94%A8-gulp":{"title":"使用 gulp","content":"---\n# 課前該用好的 gulp by Sz\n[gulp 環境安裝流程](https://hackmd.io/yWpLNMPRT2yvIR4Zq_idGw?view)\n\n\n## gulp 環境設置\n### 一台電腦做一次\n::: info\n:::spoiler 全域安裝\n1. 確認是否安裝 [Node.js](https://nodejs.org/en/)  (這邊省略安裝步驟)\n```shell\nnode -v\n```\n\n2. 安裝 gulp （失敗請參考下面一行）\n```shell\nnpm i gulp@4 -g \n```\n\n#### 失敗的話，用管理員權限安裝\n```shell\nsudo npm i gulp@4 -g\n```\n\n\n3. 檢查是否安裝好 gulp\n```shell\ngulp -v\n```\n\n:::\n\n### 一個資料夾做一次\n1. [下載資料夾](https://github.com/hexschool/web-layout-training-gulp)，更改成想要的專案名稱\n\n\n#### 在該資料夾\n2. 在該資料夾安裝 plug-in\n```shell\nnpm install\n```\n\n3. 在該資料夾執行 gulp，會跳出瀏覽器，即時監看\n```shell\ngulp\n```\n\n4. terminal 停止監看\n```\n按 ctrl + C // 不是 command + C\n```\n之後一樣打 `gulp` 都可以叫回來，不用擔心\n\n5. 來開始建置 git 囉\n\n\n## git\n\n確認電腦有沒有安裝 git\n```shell\ngit\n```\n### 對該資料夾\n1. 初始化，會產生 .git 隱藏資料夾\n```shell\ngit init\n```\n:::success\n#### 遠端數據庫 程式端更新\n2. 讓 git 關愛所有檔案\n```shell\ngit add .\n```\n3. 容易焦慮就檢查一下 git 有沒有真的關愛到大家，沒有紅字就可以繼續\n```shell\ngit status\n```\n4. 有的話就提交囉\n```shell\ngit commit -m \"輸入提交訊息\"\n```\n5. 再焦慮的檢查一下有沒有成功提交\n```shell\ngit log\n```\n:::\n\n\n### 連上 github 遠端數據庫\n\n1. github 上創新的 repository\n2. 獲取網址\n```shell\n git remote add origin \u003c這裡貼入 github 給的網址\u003e\n```\n3. 焦慮的檢查一下有沒有真的連上遠端\n    - 有的話會顯示這個遠端數據庫的暱稱，暱稱就是上段預設 `origin` 的部份\n    - 沒有的話檢查一下網址有沒有打錯\n```shell\ngit remote\n```\n\n4. 選擇分支（這邊還沒有很懂）\n```shell\ngit branch -M main\n```\n\n\n\n5. （僅限第一次）推上去\n```shell\ngit push -u origin main\n```\n:::success\n6. （第二次開始）推上去\n```shell\ngit push\n```\n### 遠端數據庫 客戶端更新\n1. 生產模式（還沒有很懂）\n```shell\ngulp build\n```\n2. gh-pages（給客戶端演示用） 建置，也會設定好 github pages，這段要給他耐心與愛心\n```shell\ngulp deploy\n```\n3. 檢查 github \u003e setting \u003e github pages \u003e source 有沒有對，改完也要有耐心與愛心\n4. github pages 給你的網址就是你的展示畫面囉！一樣要給他耐心與愛心\n:::\n\n:::success\n**綠色框框的內容，每次上傳更新都要做**\n:::\n\n## 編譯？\n編譯就像翻譯一樣，在溝通的雙方語言不同時\n就需要進行一個語言轉換的過程\n\n我們寫程式時也一樣，也很容易遇到我們寫的語言，跟處理的軟硬體，懂的語言不同的狀況\n\n這時候中間的轉換就會需要一個類似翻譯的動作\n這裡就可以先簡單理解為編譯囉\n\n## 學到的 gulp 編譯\ngulp 整合了很多個原本往往要很多工具才能做到的事\n- SCSS 是一個很好管理的 CSS 寫法，但瀏覽器不懂\n- layout 的管理不想手動複製貼上，但瀏覽器也看不懂\n但瀏覽器是讀不懂的\n- 圖片未經處理，檔案巨大\n- js 常常每個瀏覽器看起來不一樣\n在 gulp 裡面，他 layout, scss, 圖片壓縮, js兼容的管理 都一併幫你完成囉！\n\n## 資料夾結構\n- dist\n\t- 編譯後的結果\n\t- **不要動**\n- app：撰寫資料的位置\n\t- assets：HTML, CSS, JS, 圖檔影片等等放這，不要改名稱，以後可能會遇到會叫做 public 的\n\t\t- script：gulp 幫你處理相容問題\n\t\t- style：gulp 幫你編譯\n\t\t\t- sass\n\t\t- images：：gulp 幫你壓縮省流量\n\t- index.html\n- gulpfile.js\n\t- enbOptions.js：路徑，可查看輸出的路徑，若要更改路徑要記得 `ctrl+C` 關閉後，`gulp` 重開\n\n## 新增新頁面\n複製 index.html 去改名稱，如果要監看該頁面，在瀏覽器網址尾段加上該檔名\n\n### HTML 結構\n定義 layout 格式，可以對進行共通設定\n```html","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E6%96%B0%E5%A2%9E%E6%96%B0%E7%9A%84-HTML%E5%A5%97%E7%94%A8-EJS-%E6%A8%A1%E7%89%88":{"title":"新增新的 HTML（套用 EJS 模版）","content":"---\n# HTML 架構\n- gulp 內可以新增 html 檔案，表頭上加上以下內容，就可以套用想要用的 EJS 模版\n- 用 live server 檢視時，在網址後面補上這個檔案名稱（`檔名.html`）即可\n```html","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%AB%8B":{"title":"環境建立","content":"[gulp 環境安裝流程](https://hackmd.io/yWpLNMPRT2yvIR4Zq_idGw?view)\n\n## 環境設置\n確認是否安裝 Node.js \n```shell\nnode -v\n```\n安裝 gulp （失敗請參考下面）\n```shell\nnpm i gulp@4 -g \n```\n\u003e用管理員權限安裝\n\u003e```\n\u003esudo npm i gulp@4 -g\n\u003e```\n\n\n檢查是否安裝好 gulp\n```shell\ngulp -v\n```\n\n[下載資料夾](https://github.com/hexschool/web-layout-training-gulp)\n\n\n## 該資料夾\n在該資料夾安裝 plug-in\n```shell\nnpm install\n```\n\n在該資料夾執行 gulp \n```shell\ngulp\n```\n\n會跳出瀏覽器\n\n再開始安裝git\n\n#gulp","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E7%B7%A8%E8%AD%AF":{"title":"編譯","content":"# 編譯\n## 編譯？\n程式為了更方便撰寫者進行撰寫，會透過一些工具來輔助，但這些工具不一定可以直接被電腦讀懂\n會需要透過「編譯」的過程，來轉換成電腦讀得懂的語言\n\n## GULP 的編譯\ngulp 整合了很多個原本往往要很多工具才能做到的事\n- SCSS -\u003e CSS\n- 樣板語言（[[EJS]]） -\u003e HTML\n- 原始圖檔（未壓縮） -\u003e 網頁用圖檔（壓縮）\n- JS -\u003e 每個瀏覽器都讀得懂的 JS\n\n## 編譯位置\n在 assets（偶爾會叫 public） 的資料夾，就會被編譯到 dist 去","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/%E8%B3%87%E6%96%99%E5%A4%BE%E6%9E%B6%E6%A7%8B":{"title":"資料夾架構","content":"- dist： 編譯後的結果，不要亂動\n- app：HTML, EJS 直接放這，以下的內容會自動[[編譯]]到 dist 資料夾去\n\t- assets：HTML, CSS, JS, 圖檔影片等等放這\n\t\t- script：JS 放這\n\t\t- style：SCSS 放這\n\t\t- images：圖檔放這\n- gulpfile.js\n\t- enbOptions.js：路徑，可查看輸出的路徑，若要更改路徑要記得 `ctrl+C` 關閉後，`glup` 重開\n\n#gulp","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/GULP":{"title":"GULP","content":"- [[環境建立]]\n- [[資料夾架構]]\n- [[新增新的 HTML（套用 EJS 模版）]]\n- [[GULP 的 Github 部屬]]\n\n\n- [[使用 gulp]]\n\n#gulp","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/GULP-%E7%9A%84-Github-%E9%83%A8%E5%B1%AC":{"title":"GULP 的 Github 部屬","content":"# GULP 的 Github 部屬\n使用 [[Git]] 做版本管理\n\u003e Git 版本管理方法：[[Git#連接遠端版本控制]]\n\n## Github 部屬（每次更新都要重新執行）\n生產模式\n```shell\ngulp build\n```\n客戶端看到的畫面部屬 [[Github Pages]]（頁面顯示可能要等一下\n```shell\ngulp deploy  \n```\n客戶只會看到 dist 裡（編譯後）的檔案\n\n## [[Github Pages]] 取得靜態網頁\nbranch 要選 gh-pages\n\n\n## 後續更新\n### 客戶端\n[[GULP 的 Github 部屬#Github 部屬（每次更新都要重新執行）]]\n### 程式端\nadd\u003ecommit\u003egit push -u origin master\n\n#gulp","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/EJS/gulp/gulp-%E8%B3%87%E6%96%99%E5%A4%BE%E5%BB%BA%E7%BD%AE":{"title":"gulp 資料夾建置","content":"## [[環境建立#該資料夾]]\n## 該資料夾\n在該資料夾安裝 plug-in\n```shell\nnpm install\n```\n\n在該資料夾執行 gulp \n```shell\ngulp\n```\n\n會跳出瀏覽器\n## [[GULP 的 Github 部屬]]\n\n### Jiang V 分享自己常遇到的問題\n\n解決方法\n1.因為我都在 git init  之後接著 git add . 卡住  \n2.此時再補上一次 sudo git add . 接著打最高權限密碼，然後再繼續  \n3.接著 git remote add origin https://~~~~~你的網址，可能會遇到這個錯誤 fatal: remote origin already exists.  \n4.接著就輸入 git remote rm origin  \n5.再重新輸入 git remote add origin https://~~~~~你的網址  \n6.再重新輸入 git push -u origin main 上傳\n\n#gulp","lastmodified":"2022-04-23T12:34:05.628865423Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/%E8%99%95%E7%90%86-Validators-%E9%8C%AF%E8%AA%A4%E7%9A%84%E5%AF%AB%E6%B3%95":{"title":"處理 Validators 錯誤的寫法","content":"# [[Validators]] Error Handling\nValidators 的 error 要透過 crud 的 [[Promise]] (`.catch`) 來完成，Handling 成功的話回傳給網頁一個 error object\n\n## save 的狀況\n```js\n// define a Schema\nconst monkeySchema = new mongoose.Schema({\n\tname: {\n\t\ttype: String,\n\t\tminlength: 3,\n\t}\n})\n// create a model\nconst Monkey = mongoose.model('Monkey', monkeySchema);\n\n// routing\napp.get('/', async(req, res, next) =\u003e {\n\ttry {\n\t\t// create an object：這邊假設一個不符合 validators 的物件\n\t\tlet newMonkey = new Monkey({ name: 'S' });\n\t\t// save to database\n\t\tnewMonkey.save()\n\t\t\t.then(() =\u003e {\n\t\t\t\tres.send('成功儲存資料');\n\t\t\t}).catch((errMessage) =\u003e {\n\t\t\t\tres.send(errMessage);\n\t\t\t});\n\t} catch(e) {\n\t\tnext(e);\n\t}\n})\n```\n\n## findOneAndUpdate 的狀況\n要按照[文件](https://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate)的寫法\n```js\napp.get('/find', async(req, res, next) =\u003e {\n\ttry {\n\t\tawait Monkey.findOneAndUpdate(\n\t\t\t{ name: 'Sam' },\n\t\t\t{ name: 'S'},\n\t\t\t{\n\t\t\t\tnew: true,\n\t\t\t\trunValidator: true\n\t\t\t},\n\t\t\t// 第四個參數要填入\n\t\t\t(error, doc) =\u003e {\n\t\t\t\tif(error) {\n\t\t\t\t\tres.send(error);\n\t\t\t\t} else {\n\t\t\t\t\tres.send(doc);\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t}\n})\n```\n\u003e- [[Validators]]\n\u003e- [[透過 Mongoose 存入 MongoDB(Save)]]\n\n#mongoose #json #js #database #validators #crud #node #expressJs","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Express-and-Mongoose":{"title":"Express and Mongoose","content":"---\n# Express and Mongoose\n\n## 前置知識\n- [[Express Life Cycle 生命週期]]\n- [[EJS 建置]]\n- [[Mongoose 建置]]\n- [[Routing for Query 回應表單]]\n- [[HTTP request]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E4%BD%BF%E7%94%A8-Routing-for-pattern-%E9%A1%AF%E7%A4%BA%E7%89%B9%E5%AE%9A%E6%95%B8%E6%93%9A%E5%BA%AB%E7%89%A9%E4%BB%B6":{"title":"使用 Routing for pattern 顯示特定數據庫物件","content":"# 使用 Routing for pattern 顯示特定數據庫物件\n\u003e[[Routing for pattern 回應有規律的網址]]\n\u003e[[Find(Read)]]\n```js\n// 不是完整的版本，catch 還要調整（看下一段）\napp.get('student/:id', async (req, res) =\u003e {\n\tlet { id } = req.params;\n\ttry {\n\t\tlet data = await Student.findOne({ id });\n\t\tres.render('studentPage.ejs', { data })\n\t} catch(e) {\n\t\t// 這個不會正常顯示\n\t\tres.send('該 ID 尚未被登錄');\n\t\tconsole.log(e);\n\t}\n})\n```\n## 修正\n這邊的 [[Promise]] 並不是反應 findOne 有沒有成功抓到數據\n而是反應有沒有被「執行」，如果有被執行，但沒有內容，就會顯示 null，而不是顯示 catch 的內容\n```\n// 沒有跳出預期的「該 ID 尚未被登錄」\nCannot read property 'name' of null\n```\n\u003e[[falsy value]]\n\n```js\napp.get('student/:id', async (req, res) =\u003e {\n\tlet { id } = req.params;\n\ttry {\n\t\tlet data = await Student.findOne({ id });\n\t\tif( data !== null) {\n\t\t\tres.render('studentPage.ejs', { data });\n\t\t} else {\n\t\t\tres.send('該 ID 尚未被登錄');\n\t\t}\n\t} catch(e) {\n\t\tres.send('資料取得失敗');\n\t\tconsole.log(e);\n\t}\n})\n```\n#js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #routing","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E5%B0%87%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99%E9%A1%AF%E7%A4%BA%E6%96%BC%E7%B6%B2%E9%A0%81":{"title":"將數據庫資料顯示於網頁","content":"# 將數據庫資料顯示於網頁\n```js\n// /students/（已登入學生表）\napp.get('/students', async (req, res) =\u003e {\n\ttry {\n\t\tlet data = await Student.find();\n\t\tres.render('students.ejs', { data });\n\t} catch {\n\t\tres.send('找不到學生列表');\n\t}\n})\n```\n- 生成 students.ejs：[[編譯 EJS 樣板 res.render()]]\n- [[EJS 使用 Mongoose 取得數據庫資料作為變數]]\n\n\n#js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #crud","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E5%BB%BA%E7%BD%AE%E9%80%A3%E6%8E%A5%E6%95%B8%E6%93%9A%E5%BA%AB%E7%9A%84%E8%A1%A8%E5%96%AE":{"title":"建置（連接數據庫的表單）","content":"---\n# 建置（連接數據庫的表單）\n用用戶填入的表單資料：\n- 顯示在網頁上\n- 存入數據庫\n- 更新數據庫\n\n用請求：\n- 刪除數據庫資料","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E7%8D%B2%E5%BE%97%E8%AB%8B%E6%B1%82%E5%BE%8C%E6%9B%B4%E6%96%B0%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99":{"title":"獲得請求後更新數據庫資料","content":"## 獲得請求後更新數據庫資料\n\u003e- [[HTTP request]]：PUT 對於 html form 是不支援的，需要安裝 npm 模組：[[method-override]]\n\u003e- [[findOneAndUpdate]]\n```js\n// 收到 put 更新後，更新數據庫\napp.put('/students/edit/:id', async (req, res) =\u003e {\n\t// 因為網頁上的 merit, other 沒有多包一層一個物件，需要先提出來\n\tlet { id, name, age, merit, other } = req.body;\n\ttry {\n\t\tlet data = await Student.findOneAndUpdate(\n\t\t\t{ id },\n\t\t\t{ id, name, age, scholarship:{ merit, other } },\n\t\t\t{\n\t\t\t\tnew: true,\n\t\t\t\trunValidators: true,\n\t\t\t}\n\t\t);\n\t\tres.redirect('/students/${ id }');\n\t\t\n\t} catch {\n\t\tres.render('reject.ejs');\n\t}\n})\n```\n\u003e[[從物件中提取屬性到變數中 Destructing an object]]\n\u003e[[res.redirect()]]\n\n#js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #request","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E8%A1%A8%E5%96%AE%E6%9B%B4%E6%96%B0%E6%95%B8%E6%93%9A%E5%BA%AB%E6%97%A2%E6%9C%89%E8%B3%87%E6%96%99":{"title":"表單更新數據庫既有資料","content":"# 表單更新數據庫既有資料\n- GET：[[EJS 提供用戶更新的資料的表單]]\n- PUT：[[獲得請求後更新數據庫資料]]\n\t- 獲得 put 請求，更新數據庫\n\t- 完成後重新導向([[res.redirect()]])學生個人頁面 （更新後的資料）\n\n\n#js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #crud","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E8%A1%A8%E5%96%AE%E8%B3%87%E6%96%99%E5%AD%98%E5%85%A5%E6%95%B8%E6%93%9A%E5%BA%AB":{"title":"表單資料存入數據庫","content":"# 表單資料存入數據庫\n- 提供表單\n- 傳送表單發送 POST 請求\n- 確認請求後存入數據庫\n\n```js\n// student/insert/\napp.get('/students/insert', (req, res) =\u003e {\n\tres.render('studentInsert.ejs');\n})\n```\n- 生成 studentInsert.ejs（表單）\n\n## 處理 POST 請求\n```js\n// routing for query\n// student/insert/ 收到 POST 請求\napp.post('/students/insert', (req, res) =\u003e {\n\t// req.body 是表單資訊\n\tlet { id, name, age, merit, other } = req.body;\n\t// create an object\n\tlet newStudent = new Student({\n\t\tid, name, age, scholarship: { merit, other },\n\t});\n\t\n\t// 存入數據庫\n\tnewStudent.save()\n\t\t.then(() =\u003e {\n\t\t\tconsole.log(`${name} 提交成功`);\n\t\t\tres.render('acceptedInfo.ejs')\n\t\t}).catch(e =\u003e {\n\t\t\tconsole.log('學生提交失敗');\n\t\t\tres.render('rejectInfo.ejs')\n\t\t\tconsole.log(e);\n\t\t})\n}) \n```\n- [[POST 表單(express)#使用用戶填入的資訊]]\n\t- [[從物件中提取屬性到變數中 Destructing an object]]\n- [[透過 Mongoose 存入 MongoDB(Save)]]\n\n#js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #crud","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/%E9%80%8F%E9%81%8E-Postman-%E5%88%AA%E9%99%A4%E6%95%B8%E6%93%9A%E5%BA%AB%E8%B3%87%E6%96%99":{"title":"透過 Postman 刪除數據庫資料","content":"# 透過 Postman 刪除數據庫資料 (API)\n\u003e[[HTTP request]]：DELETE\n\n除了用 Postman 發出 delete 請求之外，也可以用[[表單更新數據庫既有資料]]的方法刪除\n\n```js\napp.delete('/students/delete/:id', (req, res) =\u003e {\n\tlet { id } = req.params;\n\tStudent.deleteOne({ id })\n\t\t.then(meg =\u003e {\n\t\t\tconsole.log(meg);\n\t\t\tres.send('刪除成功');\n\t\t}).catch(e =\u003e {\n\t\t\tconsole.log(e);\n\t\t\tres.send('刪除失敗');\n\t\t})\n})\n```\n\n\n#js #npm #node #expressJs #mongoose #database #form #ejs #backEnd #crud","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express-with-Database/Routing-with-CRUD/Request-handling%E6%90%AD%E9%85%8D%E6%95%B8%E6%93%9A%E5%BA%ABCRUD":{"title":"Request handling（搭配數據庫CRUD）","content":"---\n# Request handling（搭配數據庫 CRUD）\n- 使用數據庫多會用到 [[Promise]] 的功能\n- 需要使用 [[Mongoose]] 進行讀取、存入資料庫的行為","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-%E5%8C%AF%E5%85%A5":{"title":"Express 匯入","content":"### [[匯入模組]]\n頭兩行可以發現 `app` 這個變數直接將匯入的檔案當做函數處理\n```js\n// app.js\nconst express = require('express')\nconst app = express()\n```\n#### Express.js 的匯出方式（不用自己做）\n以往我們是將檔案整個[[匯出模組]]，這邊是只匯出檔案內的函數\n```js\n// 模組.js\nexports = 函數名稱();\n```\n這樣匯入\n```js\n// app.js\nconst 模組 = require('./模組');\n模組();\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-%E7%9A%84-CSS-%E6%A8%A3%E5%BC%8F%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE-Serving-a-Static-File":{"title":"Express 的 CSS 樣式環境建置 (Serving a Static File)","content":"# 回應有樣式的 HTML 檔案\n```js\n// app.js\n\n// middleware\napp.use(express.static(\"public\"));\t// 製作一個 public 資料夾\n```\n\n\u003e[[Middleware(express)]]\n\n[[send 和 sendFile 回應(express)#sendFile ：回應 HTML 檔案]] 提到 `sendFile()` 可以回應整個檔案，但如果只是單純在該檔案寫入 `\u003clink\u003e` 是不會有作用的，必須在後端做處理\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\t\u003chead\u003e\n\t\t\u003c!-- 用 node 傳 css 不會作用 --\u003e\n\t\t\u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\n\t\t\u003ctitle\u003ehomepage\u003c/title\u003e\n\n\t\u003c/head\u003e\n\n\t\u003cbody\u003e\n\t\t\u003ch1\u003eejiowjeiqoe\u003c/h1\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n```\n\n## 樣式的環境設定\n```js\n// app.js\n\n// middleware\napp.use(express.static(\"public\"));\t// 製作一個 public 資料夾\n```\n設定完之後，在這個 public 資料夾裡面放樣式的檔案，就可以讀取到了\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\t\u003chead\u003e\n\t\t\u003c!-- public/ 可省略，直接打 style.css 就可以了 --\u003e\n\t\t\u003clink rel=\"stylesheet\" href=\"public/style.css\"\u003e\t\t\n\t\t\u003ctitle\u003ehomepage\u003c/title\u003e\n\n\t\u003c/head\u003e\n\n\t\u003cbody\u003e\n\t\t\u003ch1\u003eejiowjeiqoe\u003c/h1\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n\n```\n#js #expressJs #node #server #css #html","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Express-Life-Cycle-%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F":{"title":"Express Life Cycle 生命週期","content":"---\n## Express Life Cycle 生命週期\n從 Client 發送請求 `req` 到得到 Server 回應 `res` 之間的行為","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Middlewareexpress":{"title":"Middleware(express)","content":"---\n# Middleware\n- 一種 function\n- 在 [[Express Life Cycle 生命週期]] 正中間（接收請求到收到回應間）執行\n- 每次獲得請求（ 不論哪種 [[HTTP Verbs]] 的請求）就會執行一次\n- 每個 Middleware (`app.use(function)`)都可以讀取 req, res 以及下一個 middleware function","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/%E5%BB%BA%E7%BD%AE/Routing":{"title":"Routing","content":"# Routing (Express)\n路徑的意思，後端處理網路請求時，不同路徑要給不同的內容\n\n- [[Routing for all 回應亂打的網址]]\n- [[Routing for pattern 回應有規律的網址]]\n- [[Routing for Query 回應表單]]\n\n\n#js #npm #node #expressJs #server #routing","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Express.js":{"title":"Express.js","content":"---\n# Express. js\n- 是 [[npm]] 中的一個模組\n- Node.js 的一種 Framework（[[Library 跟 Framework 的差別]]），有助加速 Node.js 撰寫","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/%E6%8C%87%E5%AE%9A%E7%89%B9%E5%AE%9A-Route-%E4%B9%8B%E5%89%8D%E7%9A%84-MiddlewareRoute-%E5%89%8D%E9%9D%A2":{"title":"指定特定 Route 之前的 Middleware（Route 前面）","content":"## 指定特定 Route 之前的 Middleware（Route 前面）\n跟 [[Routing]] 的功能類似，也可以限定使用\n```js\napp.use('/student', (req, res, next) =\u003e {\n\tres.send('Middleware');\n  next();\n})\n\napp.get('/', (req, res) =\u003e {\n\tres.send('homepage');\n})\n\n// 網頁顯示會出錯\n// 終端：Cannat set headers after they are sent to the client（res.send 不能送兩次）\n```\n\n\u003e跟[[Error Handling（Routing 後面）]]： [[Error Handling 非同步的寫法]]長得有點像","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/%E6%92%B0%E5%AF%AB-Middleware":{"title":"撰寫 Middleware","content":"# 撰寫 Middleware\n- Routing 前面：\n\t- [[Middleware 使用 req 參數]]\n\t- [[Middleware 使用 res.send]]\n\t- [[指定特定 Route 之前的 Middleware（Route 前面）]]\n- Routing 中間：\n\t- [[Routing 執行時的 Middleware（Route 中間）]]\n- Route 後面\n\t- [[Error Handling（Routing 後面）]]\n\n\n```js\n// middleware function 的參數有請求物件、回應物件、跟下一個 middleware \napp.use(function (req, res, next) {\n  console.log('I am middleware');\n  next();\t\t// 有這個才會執行下一個 middleware\n})\n\napp.use(function (req, res, next) {\n  console.log('I am second middleware');\n  next();\n})\n```\n\n\n\n\n\n\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #expressJs #npm #server","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-Handling/Error-Handling-%E5%90%8C%E6%AD%A5%E7%9A%84%E5%AF%AB%E6%B3%95":{"title":"Error Handling  同步的寫法","content":"## Error Handling 同步的寫法\n```js\n// routing 沒有使用 promise 的話\n// error handler\napp.use((err, req, res, next) =\u003e {\n\tconsole.log(err);\n\tres.status(500).send('有什麼東西出錯了，我們會儘快修復');\n\t// 可以在這邊提供一個表單問遇到什麼問題\n})\n\n// port listen\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-Handling/Error-Handling-%E9%9D%9E%E5%90%8C%E6%AD%A5%E7%9A%84%E5%AF%AB%E6%B3%95":{"title":"Error Handling 非同步的寫法","content":"##  Error Handling 非同步的寫法\n\u003e- [[Mongoose]]：[[Find(Read)]]\n\u003e- [[Async（目錄）]]\n```js\n// routing 有用到 promise 的話：\napp.get('/', async(req, res, next) =\u003e {\n\ttry {\n\t\tlet foundData = await Monkey.findOne({ name: 'Ban'});\n\t\tres.send(foundData);\n\t} catch(e) {\n\t\tnext(e);\t\t\t// 這個 error 就會傳到下一個 middleware(error handler)\n\t}\n})\n\n// error handler\napp.use((err, req, res, next) =\u003e {\n\tconsole.log(err);\n\tres.status(500).send('有什麼東西出錯了，我們會儘快修復');\n\t// 可以在這邊提供一個表單問遇到什麼問題\n})\n\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Error-HandlingRouting-%E5%BE%8C%E9%9D%A2":{"title":"Error Handling（Routing 後面）","content":"---\n# Error Handling\n[[撰寫 Middleware]]\nError Handling 會放在 Routing 後面，可以對應程式出錯時，使用者會看到什麼畫面，而不是看到一堆用戶看不懂的內容\n\n\n\n\n\u003e 如果是網址的亂打會用：[[Routing for all 回應亂打的網址]]，放在 Routing 的最後一個","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Middleware-%E4%BD%BF%E7%94%A8-req-%E5%8F%83%E6%95%B8":{"title":"Middleware 使用 req 參數","content":"## Middleware 使用 req 參數\n詳細之後會談\n```js\napp.use(function (req, res, next) {\n\treq.method = \"POST\";\t// 把對方的請求強制改成 post\n  next();\n})\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Middleware-%E4%BD%BF%E7%94%A8-res.send":{"title":"Middleware 使用 res.send","content":"## Middleware 使用 res.send\n大型專案很實用的功能，可以在還沒有 [[Routing]] 的情況下 send\n```js\napp.use(function (req, res, next) {\n\tres.send('Middleware');\n  next();\n})\n\napp.get('/', (req, res) =\u003e {\n\tres.send('homepage');\n})\n\n// 網頁顯示會出錯\n// 終端：Cannat set headers after they are sent to the client（res.send 不能送兩次）\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Middleware/Routing-%E5%9F%B7%E8%A1%8C%E6%99%82%E7%9A%84-MiddlewareRoute-%E4%B8%AD%E9%96%93":{"title":"Routing 執行時的 Middleware（Route 中間）","content":"# Routing 執行時的 [[Middleware(express)]]（route 中間）\n- 之後在驗證單元會常用到\n- 可以一個以上\n```js\n// 通常不會這樣寫，會先把 middleware 存進變數內\n// 在第二個參數加入 middleware\napp.get('/student',\n\t(req, res, next) =\u003e {\n\t\tconsole.log('middleware');\n\t\tnext();\n\t},\n\t(req, res) =\u003e {\n\t\tres.send('student page');\n\t}\n);\n```\n\n```js\nconst studentMiddleware = function(req, res, next) {\n\t\tconsole.log('middleware');\n\t\tnext();\n};\n\nconst secondStudentMiddleware = function(req, res, next) {\n\t\tconsole.log('middleware');\n\t\tnext();\n};\n\t\t\t\n// 在第二個參數加入 middleware\n// 可以多個\napp.get('/student',\n\tstudentMiddleware,\n\tsecondStudentMiddleware\n\t(req, res) =\u003e {\n\t\tres.send('student page');\n\t}\n);\n```\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #expressJs #npm #server","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/302-Found":{"title":"302 Found","content":"# 302 Found\n指原本存在，但目前已經移除\n```js\napp.get(\"/舊網頁\", (req, res) =\u003e {\n\tres.status(302);\n\tres.sendFile(path.join(__dirname, \"moved.html\"));\n})\n```\n```js\n// 定義在 'save' 之前要做什麼事\n// writeFile: 建立一個檔案，指定寫入什麼內容\nstudentSchema.pre('save', async function(){\n\tfs.writeFile('history.txt', \"One data is trying to be saved.\", (e) =\u003e {\n\t\tif (e) throw e;\n\t})\n})\n```\n\n[[fs (File System)]]\n#backEnd #node/express #node/npm","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/404-Not-Found":{"title":"404 Not Found","content":"# 404 Not Found\n使用 [[Routing#Routing for all]] 的方法，將任意輸入的網址都導到[[狀態碼]] 404 頁面\n\n```js\n// * 或 /* 都可\napp.get(\"*\", (req, res) =\u003e {\n\tres.status(404);\t\t\t\t\t// 狀態碼 404\n\tres.sendFile(path.join(__dirname, \"error.html\"));\t\t\t\t\t\t// 設定的 404 頁面\n})\n```\n#backEnd #node/express #node/npm","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/GET-%E8%A1%A8%E5%96%AEexpress":{"title":"GET 表單(express)","content":"## GET ([[Form]])\n跟一般的請求回應一樣都是使用 `.get()` 來回應對方的表單\n```html\n// index.html\n\n// action: 資料傳送目的地\n// GET: 會顯示在網址\n\u003cform action=\"/formHandling\" method=\"GET\"\u003e\n\n\t// 有 name 屬性的 input 才會送到 form action 的所在地\n\t\u003clabel for=\"name\"\u003eYour Name\u003c/label\u003e\n\t\u003cinput type=\"text\" id=\"name\" name=\"name\"\u003e\n\n\t\u003clabel for=\"age\"\u003eYour Age\u003c/label\u003e\n\t\u003cinput type=\"text\" id=\"age\" name=\"age\"\u003e\n\t\n\t\u003cinput type=\"submit\"\u003eSubmit\u003c/input\u003e\n\n\u003c/form\u003e\n```\n\n```js\n// 回應上面的這個 index.html 檔\n\n// 不需要 middileware, bodyParser\n\napp.get('/', (req, res) =\u003e {\n\tres.sendFile(path.join(__dirname, \"index.html\"))\n})\n\n// GET 的表單會更改網址\n// 對方送出表單後的回應\napp.get('/formHandling', (req, res)) {\n\tlet { name, age } = req.query\t// query 可以 get 的讀取表單資訊\n\tres.send(已經送出，您的名字是 ${name} 年齡 ${age} 歲`);\n}\n```\n\n#js #expressJs #node #npm #form #server #routing","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/POST-%E8%A1%A8%E5%96%AEexpress":{"title":"POST 表單(express)","content":"# POST ([[Form]])\n- HTML：form 標籤要設定 `method=\"POST\"`\n- [[body-parser]] 可以讓後端使用客戶填入的內容\n- req.body：[[POST 表單(express)#使用用戶填入的資訊]]\n\n## 單純收資料\n```html\n// index.html\n\n// action: 資料傳送目的地\n// POST: 不會顯示在網址\n\u003cform action=\"/formHandling\" method=\"POST\"\u003e\n\n\t// 有 name 屬性的 input 才會送到 form action 的所在地\n\t\u003clabel for=\"name\"\u003eYour Name\u003c/label\u003e\n\t\u003cinput type=\"text\" id=\"name\" name=\"name\"\u003e\n\n\t\u003clabel for=\"age\"\u003eYour Age\u003c/label\u003e\n\t\u003cinput type=\"text\" id=\"age\" name=\"age\"\u003e\n\t\n\t\u003cinput type=\"submit\"\u003eSubmit\u003c/input\u003e\n\n\u003c/form\u003e\n```\n\n```js\n\n// 回應上面的這個 index.html 檔\napp.get('/', (req, res) =\u003e {\n\tres.sendFile(path.join(__dirname, \"index.html\"))\n})\n\n// 對方送出表單後的回應\napp.post('/formHandling', (req, res)) {\n\tconsole.log(req.body);\n\tres.send(\"表單已送出\");\n}\n```\n\n\u003e[[使用路徑的兩種寫法]]：有兩種作法\n\u003e- 單純使用[[string#string 的串接]]\n\u003e- 使用 path 模組 + [[join()]]\n\n## 使用用戶填入的資訊\n想要細部使用表單內容需要先新增一個 [[body-parser]] 模組（[[Middleware(express)]]）\n\n```js\n// 這裡就可以使用 body 的內容了\napp.post('/formHandling', (req, res)) {\n\t// 這裡的表單資訊對應的是 html input 標籤的 name 屬性\n\tlet { name, age } = req.body\t// body 為表單資訊\n\tres.send(已經送出，您的名字是 ${name} 年齡 ${age} 歲`);\n\t\n}\n```\n\u003e - 很像物件的變數：[[從物件中提取屬性到變數中 Destructing an object]]\n\u003e - 學到 [[Database 數據庫]]之後會有更複雜的應用：[[Express and Mongoose]]（資料先傳到資料庫再傳回來）\n\u003e \n\n\n#js #expressJs #node #npm #form #server #routing","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Request-HandlingExpress":{"title":"Request Handling(Express)","content":"---\n# Request Handling (Express)\n- 跟 node.js（ [[Server 建立]]）比起來簡化很多\n- 處理 [[HTTP request]]([[狀態碼]])","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-Query-%E5%9B%9E%E6%87%89%E8%A1%A8%E5%96%AE":{"title":"Routing for Query 回應表單","content":"# 回應表單 (Routing for Query)\n回應取代一般的 get ，會使用對應 [[Form]] 的 post 功能\n\n- [[POST 表單(express)]]\n- [[GET 表單(express)]]\n\n[[Query]]\n#js #expressJs #node #npm #form #server #routing","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-all-%E5%9B%9E%E6%87%89%E4%BA%82%E6%89%93%E7%9A%84%E7%B6%B2%E5%9D%80":{"title":"Routing for all 回應亂打的網址","content":"## Routing for all 回應亂打的網址\n這個要放在 [[Routing#Request Handling]] 的最後面，才不會什麼網址都跑這個\n```js\napp.get('*', (req, res) =\u003e {\n\tres.send('頁面不存在');\n})\n```\n- [[404 Not Found]]\n\n#js #npm #node #expressJs #server #routing","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/Routing-for-pattern-%E5%9B%9E%E6%87%89%E6%9C%89%E8%A6%8F%E5%BE%8B%E7%9A%84%E7%B6%B2%E5%9D%80":{"title":"Routing for pattern 回應有規律的網址","content":"## Routing for pattern 回應有規律的網址\n網址尾端內容，如果是想要顯示有規律的內容（例如搜尋結果）\n可以在網址尾端加入 `/:不特定內容的群組`\n```js\napp.get('/某個分支頁面/:分支底下的特定內容', (req, res) =\u003e {\n\tres.send('你要找的是' + res.params.分支底下的特定內容 + '嗎？');\n})\n```\n#### 舉例\n搜尋就可以搜不同的內容，網頁上都會顯示同樣的格式\n```js\napp.get('/search/:result', (req, res) =\u003e {\n\tres.send('你要找的是' + res.params.result + '嗎？');\n})\n```\n\n\u003e[[從物件中提取屬性到變數中 Destructing an object]] 提到可以把物件內容提取出來，增加易讀性\n\u003e```js\n\u003eapp.get('/search/:result', (req, res) =\u003e {\n\u003e\tlet { result } = res.params;\n\u003e\tres.send('你要找的是' + result + '嗎？');\n\u003e})\n\u003e```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/res.redirect":{"title":"res.redirect()","content":"# res.redirect ()\n重導到其他頁面\n```js\n// 收到 put 更新後，更新數據庫\napp.put('/students/edit/:id', async (req, res) =\u003e {\n\t// 因為網頁上的 merit, other 沒有多包一層一個物件，需要先提出來\n\tlet { id, name, age, merit, other } = req.body;\n\ttry {\n\t\tres.send('感謝您，資料已更新');\n\t\tlet data = await Student.findOneAndUpdate(\n\t\t\t{ id },\n\t\t\t{ id, name, age, scholarship:{ merit, other } },\n\t\t\t{\n\t\t\t\tnew: true,\n\t\t\t\trunValidators: true,\n\t\t\t}\n\t\t);\n\t\t// 導到其他畫面\n\t\tres.redirect('/students/${ id }');\n\t\t\n\t} catch {\n\t\tres.render(reject.ejs);\n\t}\n})\n```\n\n\u003e顯示指定頁面可能會想用：[[編譯 EJS 樣板 res.render()]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Express.js/Routing/send-%E5%92%8C-sendFile-%E5%9B%9E%E6%87%89express":{"title":"send 和 sendFile 回應(express)","content":"# 回應 html 內容 \n[[Routing]] 內有更多綜合運用\n## res.send()\n[[Express.js#建立 server]] 中 send 可以送出純字串或是 html 都可，跟 [[node]] [[Server 建立]] 的 `write` 類似\n\n但是只能送一行\n```js\napp.get('/', (req, res) =\u003e {\n\tres.send('\u003ch1\u003ehomepage\u003c/h1\u003e');\n\tres.send('\u003ch2\u003esubstitle\u003c/h2\u003e');\t\t// 終端顯示錯誤\n})\n```\n### 回應物件的話\n\u003e製作 [[Restful API]] 時就會使用到，傳給用戶資料讓他們做使用\n```js\napp.get('/', (req, res) =\u003e {\n\tconst Sam = {\n\t\tname: Sam,\n\t\tage: 2\n\t}\n\tres.send(Sam);\t\t\t\t// 瀏覽器顯示 JSON 格式\n})\n```\n## sendFile()：回應 HTML 檔案\n這個可以送整個 html 檔案\n```js\napp.get('/', (req, res) =\u003e {\n\tres.sendFile(__dirname + \"/index.html\");\n})\n```\n\n\u003e[[Module Wrapper#__dirname#使用方式]]：有兩種作法，單純使用[[string#string 的串接]]或是使用 path 模組 + [[join()]]\n\n\n#js #expressJs #node #npm #form #routing","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Middlewares-Error-Handling-Cookies-Sessions":{"title":"Middlewares, Error Handling, Cookies, Sessions","content":"# Middlewares, Error Handling, Cookies, Sessions\n- [[Express Life Cycle 生命週期]]\n- [[Middleware(express)]]\n\t- [[Error Handling（Routing 後面）]]\n- [[Cookies and Sessions]]\n\t- [[Cookies and Sessions 的安全性措施]]\n\t- [[Cookie]]\n\t- [[Session]]\n\t\t- [[Flash]]\n\n- [[Stateful Authentication]]\n- [[Stateless Authentication(JWT)]]\n\n#js #expressJs #storage #session #npm #module","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%8C%AF%E5%85%A5auth-route":{"title":"匯入(auth-route)","content":"# 匯入 (auth-route)\n```js\n// local login, oauth\nconst router = require('express').Router();\nconst passport = require('passport');\n// 註冊加密用： bcrypt\nconst bcrypt = require('bcrypt');\n// \nconst session = require('express-session');\nconst flash = require('connect-flash');\n```\n\u003e[[bcrypt]]\n\u003e[[express-session]]\n\u003e[[connect-flash]]\n\n## 匯出\n```js\n// 匯出（給 index.js 用）\nmodule.exports = Router; \n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%9C%A8-MongoDB-Atlas-%E6%9F%A5%E7%9C%8B-Collection":{"title":"在 MongoDB Atlas 查看 Collection","content":"# 在 MongoDB Atlas 查看 Collection\n\n\u003e[[Create a Model]]：MongoDB 的 Collection 等同於 Mongoose 的 Model\n\n![](https://i.imgur.com/ZwCx3gp.png)\n\n#mongodb #database","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E5%BB%BA%E7%BD%AE%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9FMongoDB-Atlas-Passport.-OAuth":{"title":"建置生命週期（MongoDB Atlas, Passport. OAuth）","content":"# 建置生命週期（MongoDB Atlas, Passport. OAuth）\n\u003e- [ ] 為什麼是叫 index.js 而不是 app.js？\n\u003e- [ ] `app.use(express.json());` 是做什麼的？\n\u003e[What Does `app.use(express.json())` Do in Express?](https://masteringjs.io/tutorials/express/express-json)\n\n## 匯入\n\u003e- [[匯入模組]]\n\u003e- [[dotenv（使用 env 變數）]]\n\u003e- [[Express 匯入]]\n\u003e- [[Mongoose 建置]]\n\n\n```js\n// index.js\n// import express, app, mongoose, dotenv\n// dotenv.config();\n// 匯入 passport.js ([[Configure Strategy]])\n// 匯入 auth-route\n// 匯入 profileRoute\n```\n\n## 數據庫連接\n\u003e- [[利用 Mongoose 連上 MongoDB]]\n\u003e\t- [[MongoDB Atlas]]\n```js\n// 連結的 URI 要存到 env \nmongoose.connect(process.env.DB_CONNECT).then(() =\u003e {\n\t\tconsole.log('成功連上 mongodb atlas');\n\t}).catch((err) =\u003e {\n\t\tconsole.log(err);\n})\n```\n\n## [[Middleware(express)]]\n\u003e需設定的有\n\u003e- [[EJS with Express 的基本設定]]\n\u003e- [[body-parser]]：表單（登入表單）\n\u003e- [[cookie-session]]：關掉頁面可以不用重新登入（應該不用）\n\u003e- [[Sessions in Passport]]：同上\n\u003e- [[auth-route]]：設定 local 或是 OAuth 登入\n\u003e- [[profile-route]]：登入後畫面的設定\n```js\n// ejs\napp.set('view engine, 'ejs);\n// body-parser\napp.use(express.json());\napp.use(express.urlencoded({extend: true}));\n```\n\n\n## Nav \n\u003e需要先完成 [[OAuth]] 的部份\n\u003e[[req.user]]\n```js\napp.get('/', (req, res) =\u003e {\n\tres.render('index', { user: req.user });\n})\n```\n\n\n## Listen\n![[Express Life Cycle 生命週期#^cafd08]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E6%9C%AC%E5%9C%B0%E5%B8%B3%E8%99%9F%E7%99%BB%E5%85%A5":{"title":"本地帳號登入","content":"# 本地帳號登入\n\u003e[[本地註冊（Local Signup）]]\n\n\n[[Passport.js]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E6%9C%AC%E5%9C%B0%E8%A8%BB%E5%86%8ALocal-Signup":{"title":"本地註冊（Local Signup）","content":"# 本地註冊\n這個註冊完，存到數據庫後不會有 googleID\n```js\n// auth-route\n// 匯入 bcrypt 做註冊密碼加密\n// 匯入 User model\nrouter.get('/signup', (req, res) =\u003e {\n\tres.render('signup', { user: req.user });\n})\n\nrouter.post('/signup', async (req, res) =\u003e {\n\tconsole.log(req.body);\n\tlet { name, email, password } = req.body;\n\t// 檢查 email 是否已註冊\n\tconst emailExist = await User.findOne({ email });\n\tif (emailExist) {\n\t\t\treq.flash('error_msg', 'Email 已經被註冊');\n\t\t\treq.redirect('/auth/signup')\n\t\t}\n\t/////return res.status(400).send('此 email 已註冊');\n\t// 加密\n\tconst hash = await bcrypt.hash(password, 10);\n\tlet newUser = new User({ name, email, password: hash});\n\ttry {\n\t\t// 通常不會顯示給用戶看這個，可以 flash（下一段）\n\t\t// const savedUser = await newUser.save();\n\t\t// res.status(200).send({\n\t\t//\tmsg: '用戶已儲存',\n\t\t//\tsavedObj: savedUser,\n\t\t// });\n\t\tawait newUser.save();\n\t\treq.flash('success_msg','感謝您的註冊，請登入');\n\t\tres.redirect('/auth/login')\n\t} catch(err) {\n\t\treq.flash('error_msg', err.errors.name.properties.message);\n\t}\n\tres.send('感謝您的註冊');\n})\n```\n\u003e[[Hash Function]]：[[bcrypt]]\n\n\n## 註冊成功\n\u003e[[Sessions in Passport]]\n\u003e[[Flash]]\n\u003e- [[express-session]]\n\u003e- [[connect-flash]]\n\u003e- [[cookie-session]]\n\n### middleware(index.js)\n```js\n// index.js(why\n// auth-route 匯入之前\n// 為什麼這段又把 cookie-session 刪掉了\n// 突然又不用 cookie-session 的 middleware 了\n// ?????\n// 需要會匯入 express-session, connect-flash\n\napp.use(session({\n\tsecret: process.env.SECRET,\n\tresave: false,\n\tsaveUninitialized: false\n\t\n}))\n// session in passport\napp.use(passport.initialize());\napp.use(passport.session());\n// flash\napp.use(flash());\napp.use((req, res, next) =\u003e {\n\tres.locals.success_msg = req.flash('success_msg');\n\tres.locals.error_msg = req.flash('error_msg');\n\tnext();\n}) \n```\n\n### message.ejs (partials)\n#### include 到會顯示這行訊息的頁面\n```js\n\u003c!-- signup.ejs --\u003e\n\u003c%- include ('partials/message') %\u003e\n```\n```js\n\u003c!-- login.ejs --\u003e\n\u003c%- include ('partials/message') %\u003e\n```\n```js\n\u003c% if (error_msg != '') { %\u003e\n\t\u003cdiv class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\"\u003e\n\t\t\u003cstrong\u003e\u003c%= error_msg %\u003e \u003c/strong\u003e\n\t\u003c/div\u003e\n\u003c% } %\u003e\t\n\u003c!-- break --\u003e\n\u003c% if (success_msg != '') { %\u003e\n\t\u003cdiv class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\"\u003e\n\t\t\u003cstrong\u003e\u003c%= success_msg %\u003e \u003c/strong\u003e\n\t\u003c/div\u003e\n\u003c% } %\u003e\t\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%85%A5%E5%89%8D%E5%BE%8C%E9%A0%81%E9%9D%A2%E7%9A%84%E8%AE%8A%E5%8C%96":{"title":"登入前後頁面的變化","content":"# 登入前後頁面的變化\n\n\n## nav\n- 登入狀態時，不顯示登入按鈕，顯示 porfile, post 頁面\n- 反之，登出狀態不顯示登出按鈕\n- \n```html\n\u003c%# 如果 req.user 沒有資料 %\u003e\n\u003c% if(!user) { %\u003e\n\t\u003cli class=\"nav-item\"\u003e\n\t\t\u003ca class=\"nav-link\" href=\"/auth/login\"\u003eLogin\u003c/a\u003e\n\t\u003c/li\u003e\n\u003c% } %\u003e\n\t\n\u003c% if(!user) { %\u003e\n\t\u003cli class=\"nav-item\"\u003e\n\t\t\u003ca class=\"nav-link\" href=\"/auth/signup\"\u003eSign Up\u003c/a\u003e\n\t\u003c/li\u003e\n\u003c% } %\u003e\n\t\n\u003c%# 如果 req.user 有資料 %\u003e\n\u003c% if(user) { %\u003e\n\t\u003cli class=\"nav-item\"\u003e\n\t\t\u003ca class=\"nav-link\" href=\"/auth/logout\"\u003eLogout\u003c/a\u003e\n\t\u003c/li\u003e\n\t\u003cli class=\"nav-item\"\u003e\n\t\t\u003ca class=\"nav-link\" href=\"/profile\"\u003eProfile\u003c/a\u003e\n\t\u003c/li\u003e\n\t\u003cli class=\"nav-item\"\u003e\n\t\t\u003ca class=\"nav-link\" href=\"/profile/post\"\u003eProfile\u003c/a\u003e\n\t\u003c/li\u003e\n\u003c% } %\u003e\n\n```\n\u003e[[EJS 註解 comment]]\n\u003e[[auth-route]] 要設定這些連結對應的 route","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%85%A5%E5%BE%8C":{"title":"登入後","content":"## 登入後\n```js\n// 取得 configure strategy 的資料後\nrouter.get('/google/redirect', \n\t// middleware\n\t// 到 config passport verified callback\n\tpassport.authenticate('google'),\n\t(req, res) =\u003e {\n\t\tres.redirect('profile');\n\t}\n)\n```\n\u003e- [[Routing 執行時的 Middleware（Route 中間）]]\n\u003e- [[Configure Strategy]]\n\u003e- [[profile-route]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E7%99%BB%E5%87%BA":{"title":"登出","content":"## 登出\n[[req.logout()]]\n```js\n// login route 後面\nrouter.get('/logout', (req, res) =\u003e {\n\treq.logout();\n\tres.redirect('/');\n})\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/%E9%81%B8%E6%93%87%E4%BB%80%E9%BA%BC%E6%96%B9%E5%BC%8F%E7%99%BB%E5%85%A5":{"title":"選擇什麼方式登入","content":"# 選擇什麼方式登入\n- 請求包含`/auth/login` ？[[Local Login]]\n- 包含`/auth/google` ？[[Google Login]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Google-Login":{"title":"Google Login","content":"# Google Login\n\n- 檢查是否有設定 [[Configure Strategy(passport-google)]]\n\t\t- 否：\n\t\t- 是：得到客戶端 ID 跟密碼與 Google 取得資料後，導向 [[Configure Strategy]] 設定的 callbackURL\n```js\n// google\nrouter.get('/google',\n\t// 這是一個 middleware\n\t// 透過 passport 與取得 google 驗證\n\t// 對應 config/passport.js 的設定\n\tpassport.authenticate('google', {\n\t\t// 取得 google 的 profile, email 資料\n\t\tscope: ['profile', 'email'],\n\t});\n);\n```\n\u003e - callbackURL 需要在\tGoogle Cloud Platform 設定：[[Web Application Client ID 設定]]\n\u003e - 導過去之後的行為：[[Passport Verified Callback]]\n\u003e- [[req.user]]\n\n## （選用）google 登入可選擇登入帳號\n```js\nrouter.get('/google',\n\tpassport.authenticate(\"google\", {\n\t\tscope: [\"profile\", \"email\"],\n\t\tprompt: \"select_account\",\n\t})\n);\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Local-Login":{"title":"Local Login","content":"## Local Login\n[[passport-local]]\n```js\n// local\nrouter.get('/login', (req, res) =\u003e {\n\tres.render('login', { user: req.user });\n});\n\napp.post('/login', \n  passport.authenticate('local', { \n\t\tfailureRedirect: '/auth/login',\n\t\tfailureFlash: '帳密錯誤',\n\t}),\n  (req, res) =\u003e {\n    res.redirect('/profile');\n  });\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/MongoDB-Atlas-Passport.js-OAuth":{"title":"MongoDB Atlas, Passport.js, OAuth","content":"# MongoDB Atlas, Passport.js, OAuth\n```\n專案/\n|\n|– routes/\n|   |– auth-routes.js\t# Authenticate Request\n|– config/\n|   |– passport.js   # Cofigure Strategy\n|– views/\n|   |– ejs 檔案\n|– public/\n|   |– css 檔案\n|– .env\n|– index.js\n|– \n|– \n```\n- [[MongoDB Atlas]]\n- [[建置生命週期（MongoDB Atlas, Passport. OAuth）]]\n\t- [[OAuth]]\n\t\t- 登入、登出 routing\n\t\t- passport 建置\n\t\t- google OAuth 憑證\n\t\t- Session （不用每次重開都要登入）\n\n- model\n\t- [[user-model]]\n\t- [[post-model.js]]\n\n- [[EJS]] 檔案\n\t- index.ejs\n\t- login.ejs\n\t- profile\n\t- partial/header.ejs\n\n## 認證類型\n- [[Stateful Authentication]]\n- [[Stateless Authentication(JWT)]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%8F%96%E5%BE%97-Google-OAuth-Client-ID":{"title":"取得 Google OAuth Client ID","content":"- 再回到「憑證」頁面 -\u003e 建立憑證 -\u003e OAuth 用戶端 ID\n\t- 應用程式種類：網路應用程式\n\t- 名稱：任意\n- 「OAuth 用戶端已建立」：得到用戶端 ID 跟密碼","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%9C%A8-Google-Cloud-Platform-%E5%BB%BA%E7%AB%8B%E6%86%91%E8%AD%89":{"title":"在 Google Cloud Platform 建立憑證","content":"- 建立專案 -\u003e 結束後到「憑證」的頁面\n- 憑證 -\u003e 建立憑證 -\u003e OAuth 用戶端 ID -\u003e 設定同意畫面 -\u003e 外部\n\t- 應用程式名稱：隨意\n\t- 使用者支援電子郵件：自己的 email\n\t- 應用程式首頁：`http://localhost:8080`\n\t- 開發者聯絡資訊：自己的 email","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/%E5%BB%BA%E7%AB%8B-Google-%E7%9A%84-OAuth-%E6%86%91%E8%AD%89":{"title":"建立 Google 的 OAuth 憑證","content":"# 建立 Google 的 OAuth 憑證\n[Google Cloud Platform](https://console.cloud.google.com/)\n- 在 Google Cloud Platform 建立專案\n\t- [[在 Google Cloud Platform 建立憑證]]\n\t\t- [[取得 Google OAuth Client ID]]\n\t\t\t- 取得用戶端 ID 跟密碼：[[Configure Strategy]] / [[passport-google-oauth20 的 .env 變數]]\n\t\t\t- [[Web Application Client ID 設定]]\n\t\t\t\t- 已授權的重新導向 URI","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Authenticate-Requests":{"title":"Authenticate Requests","content":"# Authenticate Requests\n- [[middleware(Authenticate Requests)]]：auth-route 的前置 middleware\n- [[auth-route]]：設定登入時的流程（透過 google, local login）\n- [[profile-route]]：設定登入後顯示的頁面\n\u003e [[在 MongoDB Atlas 查看 Collection]]：可以查看登入客戶的公開資料\n\n\n#passport #session #js #authentication #oauth","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategy":{"title":"Configure Strategy","content":"# Configure Strategy\n新增 config 資料夾，新增 passport.js 檔案 \n\n## 模組設定\n\u003e- [[Passport.js]]\n\u003e- [[用資料夾管理 Mongoose models 模組]]\n\u003e- [[bcrypt#檢查密碼]]：登入時加密\n```js\n// config/passport.js\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20');\nconst User = require('../models/user-model');\nconst LocalStrategy = require('passport-local');\nconst bcrypt = require('bcrypt');\n```\n\n### 在 index.js 匯入\n```js\n// index.js\n// 不用 const 一個變數來存\nrequire('./config/passport');\n```\n\u003e[[建置生命週期（MongoDB Atlas, Passport. OAuth）]]\n\n## Stretegy\n- [[Configure Strategy(passport-google)]]\n- [[Configure Strategy(passport-local)]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategypassport-google":{"title":"Configure Strategy(passport-google)","content":"# Configure Strategy (passport-google)\n\u003e[[Configure Strategy]]\n\n存取（clientID, cilentSecret）導向 [[Configure Strategy]] 設定的 callbackURL\n\n\n\n\u003e - callbackURL 需要在\tGoogle Cloud Platform 設定：[[Web Application Client ID 設定]]\n\u003e - 導過去之後的行為：[[Passport Verified Callback]]\n```js\npassport.use(new GoogleStrategy({\n\t\t// 用 .env 存起來\n    clientID: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n\t\t// \n    callbackURL: \"/auth/google/redirect\"\n  },\n\t// done 是一個 callback function\n\t// passport verified callback\n\t(accessToken, refreshToken, profile, done) =\u003e {\n\t\tconsole.log(profile);\n\t\tUser.findOne({googleID: profile.id})\n\t\t\t.then((foundUser) =\u003e {\n\t\t\t\tif(foundUser) {\n\t\t\t\t\tconsole.log('User already exist');\n\t\t\t\t\tdone(null, foundUser);\n\t\t\t\t} else {\n\t\t\t\t\tnew User({\n\t\t\t\t\t\t\n\t\t\t\t\t\tname: profile.displayName,\n\t\t\t\t\t\tgoogeID: profile.id,\n\t\t\t\t\t\tthumbnail: profile.photos[0].value,\n\t\t\t\t\t\temail: profile.emails[0].value,\n\t\t\t\t\t}).save().then((newUser) =\u003e {\n\t\t\t\t\t\tconsole.log('成功透過 google 新增帳戶');\n\t\t\t\t\t\tdone(null, newUser);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t}\n )\n);\n```\n\u003e - [[dotenv（使用 env 變數）]]\n\u003e\t - [[passport-google-oauth20 的 .env 變數]]\n\u003e- callbackURL 需要設定：\n\u003e\t [[建立 Google 的 OAuth 憑證]]：[[Web Application Client ID 設定]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Configure-Strategypassport-local":{"title":"Configure Strategy(passport-local)","content":"# Configure Strategy (passport-local)\n\u003e[[Configure Strategy]]\n\u003e- [[bcrypt#檢查密碼]]：登入時加密\n```js\npassport.use(new LocalStrategy(\n\t(username, password, done) =\u003e {\n\t\tUser.findOne({ email: username }.then(async (user) =\u003e {\n\t\t\tif (!user) {\n\t\t\t\t// 不進行認證\n\t\t\t\treturn done(null, false);\n\t\t\t}\n\t\t\tawait bcrypt.compare(password, user.password, function(err, result) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn done(null, false);\n\t\t\t\t}\n\t\t\t\tif (!result) {\n\t\t\t\t\treturn done(null, false);\n\t\t\t\t} else {\n\t\t\t\t\treturn done(null, user);\n\t\t\t\t}\n\t\t\t});\n\t\t}).catch(err) {\n\t\t return done(null, false);\n\t\t});\n\t})\n\t);\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/OAuth":{"title":"OAuth","content":"# OAuth (Open Authentication)\n\u003e使用 JS Library：[[Passport.js]]\n\n\u003e [[Library 跟 Framework 的差別]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Passport-Verified-Callback":{"title":"Passport Verified Callback","content":"# Passport Verified Callback\n[[Configure Strategy]] 中的最後一段，設定用戶用 google 登入後的行為\n\n- 數據庫裡有這個用戶嗎（比對 OAuth 提供的 profile）？\n\t- 有：將這用戶的資料取出\n\t- 沒有：將這個用戶加 DB\n\n\n```js\npassport.use(new GoogleStrategy({\n\t\t// 用 .env 存起來\n    clientID: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n\t\t// \n    callbackURL: \"/auth/google/redirect\"\n  },\n\t// done 是一個 callback function\n\t// passport verified callback\n\t(accessToken, refreshToken, profile, done) =\u003e {\n\t\tconsole.log(profile);\n\t\tUser.findOne({googleID: profile.id})\n\t\t\t.then((foundUser) =\u003e {\n\t\t\t\tif(foundUser) {\n\t\t\t\t\tconsole.log('User already exist');\n\t\t\t\t\tdone(null, foundUser);\n\t\t\t\t} else {\n\t\t\t\t\tnew User({\n\t\t\t\t\t\tname: profile.displayName,\n\t\t\t\t\t\tgoogeID: profile.id,\n\t\t\t\t\t\tthumbnail: profile.photos[0].value,\n\t\t\t\t\t}).save().then((newUser) =\u003e {\n\t\t\t\t\t\tconsole.log('成功透過 google 新增帳戶');\n\t\t\t\t\t\tdone(null, newUser);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t}\n )\n);\n```\n```\n// 沒有設定的話網頁會顯示：\ncannot get /auth/google/redirect\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Passport.js":{"title":"Passport.js","content":"# Passport. js\n[npm](https://www.npmjs.com/package/passport)\n[Passport Stretegies](https://www.passportjs.org/packages/)\nPassport 提供 node 伺服器端使用各平台 OAuth 來登入\n```shell\n// passport 模組跟 + 使用的特定平台 stretegy\nnpm install passport \u003c看你要用什麼平台登入\u003e\n```\n\n- [[passport-google-oauth20]]\n- [[passport-local]]\n- [[Sessions in Passport]]\n\n\n[[Authenticate Requests]]\n[[post-model.js]]\n\n## 可使用的值\n使用 [[Passport.js]] 之後，可以使用幾個值\n- [[req.user]]\n- [[req.logout()]]\n- [[req.isAuthenticated()]]\n\n\n#authentication #js #npm #nodeJs #module","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Sessions-in-Passport":{"title":"Sessions in Passport","content":"# Sessions in Passport\n\u003e- 需安裝 [[cookie-session]]\n\u003e- [passport.js doc\u003econfigure](https://www.passportjs.org/docs/configure/)\n\n僅將 userID 存進 [[Session]]\n```js\n// index.js\n// cookie session 的 middleware 之後\napp.use(passport.initialize());\napp.use(passport.session());\n```\n```js\n// import 之後\n// serialize\npassport.serializeUser((user, done) =\u003e {\n\tconsole.log('Serializing user now');\n\t// mongoDB 存取的 id 要加底線（我不懂）\n  done(null, user._id);\n});\n// deserialize\npassport.deserializeUser((_id, done) =\u003e {\n\tconsole.log('Deserializing user now');\n  User.findById({ _id }).then(() =\u003e {\n\t\tconsole.log('found user.')\n\t\tdone(null, user);\n  });\n});\n```\n\u003e[[Find(Read)]]\n\n\n#session #authentication #oauth #expressJs","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/Web-Application-Client-ID-%E8%A8%AD%E5%AE%9A":{"title":"Web Application Client ID 設定","content":"# Web Application Client ID 設定\n[[建立 Google 的 OAuth 憑證]]\n## 已授權的重新導向 URI\n[[Configure Strategy]] 中設定的 `callbackURL` 要設定到這裡，例如\n```\nhttp://localhost:8080/auth/google/redirect\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/auth-route":{"title":"auth-route","content":"---\n# auth-route\n\u003e[[Authenticate Requests]]\n\n在 routes 資料夾內新增 auth-routes.js","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/middlewareAuthenticate-Requests":{"title":"middleware(Authenticate Requests)","content":"## middleware (Authenticate Requests)\n- Middleware：請求包含 `/auth`？\n\t- 否：繼續執行 Life Cycle\n\t- 是：進到 [[auth-route]] 模組\n\n```js\n// 在 index.js 匯入\nconst authRoute = require('./routes/auth-route');\n\n// middleware\n// 檢查每次進來的 request 有沒有 /auth ，有的話就執行 authRoute\n// authRoute 若被執行，就會辨識應該要回應 /login 還是 /google\napp.use('/auth', authRoute);\n```\n\u003e[[指定特定 Route 之前的 Middleware（Route 前面）]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-google-oauth20":{"title":"passport-google-oauth20","content":"---\n# passport-google-oauth20\n[passport-google-oauth20](https://www.passportjs.org/packages/passport-google-oauth20/)\n\n## 安裝模組\n```shell\nnpm install passport passport-google-oauth20\n```\n\n- [[Authenticate Requests]]：登出登入 routing、登入後流程設置\n- [[Configure Strategy]]：[[Configure Strategy(passport-google)]](passport.js)\n- [[建立 Google 的 OAuth 憑證]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-google-oauth20-%E7%9A%84-.env-%E8%AE%8A%E6%95%B8":{"title":"passport-google-oauth20 的 .env 變數","content":"# passport-google-oauth20 的 .env 變數\n```shell\n// string 不用加 '' or \"\"\nDB_CONNECT=Atlas 給的 URI（密碼跟數據庫名要設定）\nGOOGLE_CLIENT_ID=從 google platform 取得的用戶端 ID\nGOOGLE_CLIENT_SECRET=從 google platform 取得的用戶端密碼\n```\n\u003e[[dotenv（使用 env 變數）]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/passport-local":{"title":"passport-local","content":"# passport-local\n[passport-local](https://www.passportjs.org/packages/passport-local/)\n\n\u003e[[Passport.js]]\n\n```shell\nnpm install passport-local\n```\n```js\nconst LocalStrategy = require('passport-local');\n```\n- [[Configure Strategy(passport-local)]]\n- Authenticate Requests(local)\n\t- [[Local Login]]\n\n\u003e[[Authenticate Requests]]","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/profile-route":{"title":"profile-route","content":"# profile-route\n\u003e[[Authenticate Requests]]\n\n[[登入後]] 會顯示 profile.ejs 頁面\n\n\u003e[[登入前後頁面的變化]]\n## 匯出匯入\n```js\n// routes/profile-route.js\nconst router = require('express').Router();\n// 新增貼文用\nconst Post = reuqire('../models/post-model');\n```\n\n```js\n// 最後匯出\nexport.modules = router;\n```\n## middleware\n`/profile` 的路徑會先執行 profile-route 模組\n```js\n// index.js\nconst profileRoute = require('./routes/profile-route');\n\n// middleware\napp.use('/profile', profileRoute);\n```\n\u003e[[建置生命週期（MongoDB Atlas, Passport. OAuth）]]\n\n## profile-route\n\u003e[[req.user]]\n\u003e[[res.redirect()]]\n\u003e[[req.isAuthenticated()]]\n```js\n// routes/profile-route.js\n\n// 只給特定 route 用的 middleware \nconst authCheck = (req, res, next) =\u003e {\n\tif(!req.isAUthenticated) {\n\t\tres.redirect('/auth/login');\n\t} else {\n\t\tnext();\n\t}\n}\n\n// 使用 req.user\n// /profile 請求中，客戶端會先經過 authCheck\n// 如果尚未認證會導去登入畫面，有的話就會執行這個 route\n// render porfile 頁面\nrouter.get('/', authCheck, (req, res) =\u003e {\n\n\tres.render('profile', { user: req.user });\n})\n```\n\u003e[[Routing 執行時的 Middleware（Route 中間）]]\n\n## profile 新增貼文\n再新增一個 [[post-model.js]] 來儲存貼文的數據\n```js\n// routes/profile-route.js\n// 匯入 post-model.js\nrouter.get('/post', authCheck, (req, res) =\u003e {\n\tres.render('post', { user: req.user });\n})\n\nrouter.post('/post', authCheck, async (req, res) =\u003e {\n\t// 看 post.ejs 上面表單送出的 name\n\tlet { title, content } = req.body;\n\tlet newPost = new Post({ title, content, author: req.user._id });\n\ttry {\n\t\tawait newPost.save();\n\t\t\tres.status(200).redirect('/profile');\n\t} catch(err) {\n\t\treq.flash('error_msg', '標題與內文必填');\n\t\treq.redirect('/profile/post');\n\t}\n})\n\n```\n\u003e[[Routing 執行時的 Middleware（Route 中間）]]\n\u003e新增貼文的 model：[[post-model.js]]\n\u003e[[登入前後頁面的變化]]\n\u003e[[Form]]\n\u003e[[Flash]]：參考[[本地註冊（Local Signup）]]\n### 顯示所有貼文\n繼續修改顯示 profile 的頁面\n```js\nrouter.get('/', authCheck, async (req, res) =\u003e {\n\t// 將 post-model 內的資料顯示到頁面上\n\tlet postFound = await Post.find({ author: req.user._id });\n\tres.render('profile', { user: req.user, posts: postFound });\n})\n\t\n```\n\n```js\n// profile.ejs\n\u003c% if (posts.length \u003e 0) { %\u003e\n\t\u003c% for (let i = 0; i \u003c posts.length; i++ ) { %\u003e\n\t\t\u003cdiv class=\"card\" style=\"width: 18rem\"\u003e\n\t\t\t\u003cdiv class=\"card-body\"\u003e\n\t\t\t\t\u003ch5 class=\"card-title\"\u003e\u003c%= posts[i].title %\u003e\u003c/h5\u003e\n\t\t\t\t\u003cp class=\"card-text\"\u003e\u003c%= posts[i].content %\u003e\u003c/p\u003e\n\t\t\t\t\u003ca href=\"#\" class=\"btn btn-primary\"\u003e\u003c%= posts[i].date %\u003e \u003c/a\u003e\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\n\t\u003c% } %\u003e\n\u003c% } %\u003e\n```\n#passport #oauth #authentication #expressJs","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.isAuthenticated":{"title":"req.isAuthenticated()","content":"# req.isAuthenticated ()\n代表客戶端是否有認證完成（設定 passport 之後可以用的資料）","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.logout":{"title":"req.logout()","content":"# req.logout ()\n使客戶端可以登出的 method（設定 passport 之後可以用的資料）","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Passport.js/req.user":{"title":"req.user","content":"# req.user\n客戶端使用者的資料（設定 passport 之後可以用的資料）\n```js\nrouter.get('/', (req, res) =\u003e {\n\tres.render('page', { req.user });\n})\n```\n\n可以使用像類似這種資料\n```js\n\n\u003c%= user.name %\u003e\n\u003c%= user.name %\u003e\n\u003c%= user.thumbnail %\u003e\n\u003c%= user.date %\u003e\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Stateful-Authentication":{"title":"Stateful Authentication","content":"# Stateful Authentication\n\u003e[[Session]]\n- client 發送的請求時，server 會按照請求在 session memory 中尋找對應的 ID\n\n## 缺點\n- 後端有權限刪除資料：如果在後端刪掉了這個對應的 ID，客戶端持有的資料就會失效\n- 佔據伺服器資源：因為資料都存在 server，隨著登錄的用戶增加，server 的資源也會被佔用\n- 很難擴充：如果伺服器佔滿了，要擴充新的伺服器，要為了新的伺服器寫不同的規則\n- 安全性：cookies 可以透過客戶端修改，可能真的試出別人的資料\n\n\u003e[[Stateless Authentication(JWT)]]\n#session #authentication #oauth","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/Stateless-AuthenticationJWT":{"title":"Stateless Authentication(JWT)","content":"---\n# Stateless Authentication\n\u003e[[Stateful Authentication]]\n\n```\n客戶端","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/MongoDB-Atlas-Passport.js-OAuth/post-model.js":{"title":"post-model.js","content":"```js\nconst mongoose = require('mongoose');\n\nconst postSchema = new mongoose.Schema({\n\ttitle: {\n\t\ttype: String, \n\t\trequired: true,\n\t},\n\tcontent: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n\tdate: {\n\t\ttype: Date,\n\t\t\tdefault: Date.now,\n\t},\n\tauthor: {\n\t\ttype: String,\n\t}\n})\n\nmondule.exports = mongoose.model('Post', postSchema)\n```","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/%E4%BB%8B%E7%B4%B9-Node.js":{"title":"介紹 Node.js","content":"# 介紹\n- 一種執行環境，允許原本只能在瀏覽器運行的 [[JavaScript]] 可以在瀏覽器**外**執行\n- 讓 JS 可以不僅限於前端，可以做 server-side 的動作\n\n## JS 可以在哪裡運行\n- 瀏覽器：最一般的運作方法\n- Node：[[Module Wrapper]] 包住，在瀏覽器外運作\n- 終端機撰寫 JS：[[REPL]]（不常用）\n\n\n\n\n#js #advanceJs #library #framework #nodeJs #backEnd","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/%E5%B8%B8%E8%A6%8B%E7%9A%84%E5%BE%8C%E7%AB%AF%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80":{"title":"常見的後端的程式語言","content":"# 後端的程式語言\n常見的有\n- PHP：programming language\n- Node.js + Express + MongoDB：JS\n- Java：programming language, android\n- Ruby on Rails\n- Python(Django)：機械學習\n- .NET：Microsoft 產\n\n#js #advanceJs #library #framework #nodeJs #backEnd","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/Node-%E6%8C%87%E4%BB%A4":{"title":"Node 指令","content":"# 指令\n\n```shell\nnode\n```\n## 查看版本\n```shell\nnode --version\n```\n## 執行檔案\nnode.js 可以讓 JS 在瀏覽器之外的環境運行\n```shell\n// 在 fileName.js 檔的所在位置運行\nnode fileName.js\n```\n\n## help\n```shell\n.help\n```\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm #cmd","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E4%BB%8B%E7%B4%B9/REPL":{"title":"REPL","content":"# REPL (Read, Evaluate, Print, Loop)\n在 Python, Java, [[Node]] 中都有這個功能，可在終端運行該語言（[[介紹 Node.js]]）\n\n```shell\n// 例如在終端機寫算式\n\u003e 2 * 2\n// 會得到 4\n```\n\n#js #advanceJs #library #framework #nodeJs #backEnd #CMD","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E5%BB%BA%E7%BD%AE/%E5%AE%89%E8%A3%9D-Node.js":{"title":"安裝 Node.js","content":"# 安裝 Node.js\n- 官網下載\n\n- VScode plugin: [code runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)： 可以讓 vscode 在 vscode 裡面直接運行，不用開 live server 用瀏覽器運行\n\u003e[[npm 建置與指令]]：安裝完 node 就會直接安裝好 npm 囉！\n\n#js #advanceJs #library #framework #nodeJs #backEnd","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E5%BB%BA%E7%BD%AE/Server-%E5%BB%BA%E7%AB%8B":{"title":"Server 建立","content":"# 建立 Server\n用[[內建模組(Node.js)]] 來建立 Web server，不太容易，通常會用 [[Express.js]] 來建立\n```javascript\nconst http = require('http');\t\t\t\t\t\t// 內建模組\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =\u003e {\t// 建立 server，提供兩端交換的內容\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () =\u003e {\t\t\t\t// 監聽 port\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n```\n\n## 步驟\n- 匯入內建模組 `http`\n- middleware（到 express再談，[[Express 的 CSS 樣式環境建置 (Serving a Static File)]]）\n- 建立 Server\n- 監聽 [[Port]]\n\n### http 模組\n```js\nconst http = require('http');\n```\n\n### createServer\n\u003e通常會用 Express.js 來建立：[[Request Handling(Express)]]\n\n建立 [[Server]]\n處理對方的請求跟回應 ([[request]]), [[response]]) 之間交換的內容\n\n```js\nconst server = http.createServer((req, res) =\u003e {\n});\n```\n#### response\n可以使用 `res` 參數，寫入要送出去的內容\n```js\nconst server = http.createServer((req, res) =\u003e {\n\n\tres.write('Hello user');\t\t// write：回應一行字\n\tres.write('\u003ch1\u003etitle\u003c/h1\u003e')\t\t// 也可以寫 html，也可以寫很多行\n\tres.end();\t\t\t\t\t\t// 要記得\n});\n```\n\u003e[[send 和 sendFile 回應(express)]]\n\n#### request\n也可以使用 `req` 參數，處理傳過來的資料\n\n\u003e- parse：[[物件不要傳參考的時候：深層、淺層拷貝#深層拷貝]]\n\u003e- [[url(module)]]\n\n```js\nconst server = http.createServer((req, res) =\u003e {\n\tif(req.url == '/') {\n\n\t\tfs.readFile(path.join(__dirname, 'index.html'), (err, data) =\u003e {\n\t\t\tres.writeHead(200, { 'Content-Type': text/html });\n\t\t\tres.write(data);\n\t\t\tres.end();\n\t\t})\n\t\tres.writeHead(200, { 'Content-Type': text/html });\n\t\tres.write('\u003ch1\u003eThis is Homepage.\u003c/h1\u003e');\n\t\tres.end();\n\t} else {\n\t\tlet parsedURL = url.parse(req.rul);\t// string 轉 array\n\t\tres.write('Hello,' parsedURL.pathname);\n\t\tres.end();\n\t}\n\tconsole.log(res.url);\t\t\t\t// 這個會 log 到終端機\n\tlet parsedURL = url.parse(req.url)\t// string 轉 array\n})\n\n```\n\n\u003e[[fs (File System)]]\u003e[[writeFile]]\n\u003e[[Port]]\n\n#### 一些規則\n```js\nres.statusCode = 200;\nres.setHeader('Content-Type', 'text/plain');\n```\n\n```js\nres.writeHead(200, {'Content-Type': 'text/plain'});\n```\n### 監聽請求\n建立完 [[Server]] 之後，要設定一個負責接收請求的 [[Port]]，並且監聽他有沒有任何請求傳過來\n```js\n// 參數 port：設定一個接收請求的 port\n// 箭頭函數：開始監聽後會出現的提示\nserver.listen(port, hostname, () =\u003e {\n});\n```\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm #server","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E5%8C%AF%E5%85%A5%E6%A8%A1%E7%B5%84":{"title":"匯入模組","content":"# 匯入模組\n\u003e [[Node.js 的預設參數#取得 Node js 裡的模組 相關]]\n\u003e [[取得 Node.js 裡的模組]]\n```js\nconst 給他個名稱 = require(\"所在位置\");\t\t// 用 const 佳\n```\n```js\n// ES6 寫法\nimport 給他個名稱 from '所在位置';\n```\n## 舉例\n回到 `app.js` 現在可以把 `hi.js` 匯入了\n `hi.js` 會變成 `app.js` 的一個物件\n```js\n// app.js\nconst hi = require(\"./hi\");\n\nh1.sayHi();\n```\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E5%8C%AF%E5%87%BA%E6%A8%A1%E7%B5%84":{"title":"匯出模組","content":"## 匯出\n```js\n// 模組.js\nexports.函數名稱 = 函數名稱();\n```\n匯入\n```js\n// app.js\nconst 模組 = require('./模組');\n模組.函數名稱();\n```\n## 實例\n利用 [[Module Wrapper]] 的 [[module 參數]]來將檔案匯出\n```js\n// hi.js\nfunction sayHi() {\n\tconsole.log('Hi.');\n}\n\n// module 太常用了可直接省略\n// module.exports.sayHi = sayHi;\nexports.sayHi = sayHi;\n```\n看一下現在的 `module`\n```js\n// hi.js\nconsole.log(module.exports);\n\n// log\n{ sayBye: [Function: sayHi] }\n```\n就會增加一個 `sayHi` 屬性了\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8/%E6%95%B4%E5%90%88%E6%A8%A1%E7%B5%84%E5%8C%AF%E5%87%BA%E5%8C%AF%E5%85%A5":{"title":"整合模組匯出匯入","content":"# 多個模組\n`.js` 檔案一多之後，檔案的可讀性會降低，且[[匯入模組]]的手續也會變複雜\n```shell\n// app.js 夾雜在各種小檔案中間\njs/\n|– app.js\t\t\n|– hi.js\n|– bye.js\n|- goodnight.js\n|- goodMorning.js\n|- goodEvening.js\n...\n```\n## 整合匯出\n個別的檔案（`greetings/*.js 們`）匯出（[[自製模組(Node.js)#匯出]]）之後，在分類的資料夾裡面新增 `index.js` 做整合\n```shell\njs/\n|- greetings/\t\t\t\t# 不同性質的模組用資料夾分開\n|\t|- index.js\t\t\t\t# 統整資料夾的 index 檔\n|\t|- hi.js\n|\t|- bye.js\n|\t|- goodnight.js\n|\t|- goodMorning.js\n|\t|- goodEvening.js\n|- app.js\n```\n統一將匯出的屬性與功能在這裡做匯出\n```js\n// greetings/index.js\nconst hi = require('./hi');\t\t// hi.js 成為物件\nconst bye = require('./bye');\n\nexports.sayHi = hi.sayHi;\t\t// 匯出 hi.sayHi\nexports.sayBye = bye.sayBye;\n```\n\n## 整合匯入\n匯入時就可以統一從資料夾存取了，不用記是來自哪個`.js` 的功能\n```js\n// app.js\nconst greetings = require(\"./greetings\");\t\t\t// 直接匯入整個資料夾\n\ngreetings.sayHi();\t\t\t\t\t// 可以讀取資料夾內有匯出的任何檔案\n```\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/%E4%BD%BF%E7%94%A8%E8%B7%AF%E5%BE%91%E7%9A%84%E5%85%A9%E7%A8%AE%E5%AF%AB%E6%B3%95":{"title":"使用路徑的兩種寫法","content":"# 使用路徑的兩種寫法\n- [[Node]] 有兩個預設參數 [[Node.js 的預設參數#路徑相關]]，單純使用[[string#string 的串接]]或是使用 [[path]] 模組 + [[join()]]\n- [[send 和 sendFile 回應(express)]]\n\n## 串接\n```js\napp.get(\"/\", (req, res) =\u003e{\n\tres.sendFile(__dirname + \"/index.html\"))\n})\n```\n## path 模組\n使用 [[path]] 模組 要用 [[join()]]\n```js\n// 除了 express, app 之外匯入要多匯入這個\nconst path = require(\"path\");\n\n// 用 path.join，網址路徑不用寫成 /index.html\napp.get(\"/\", (req, res) =\u003e{\n\tres.sendFile(path.join(__dirname, \"index.html\"))\n})\n```\n\n```js\n// 也可以把 path 存進一個變數使用\nlet newPath = path.join(__dirname, 'greetings.js');\n```\n#js #advanceJs #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/app.set":{"title":"app.set()","content":"# app.set ()\n[doc](https://expressjs.com/en/4x/api.html#app.set)\n\n```js\napp.set('title', 'My Site')\napp.get('title') // \"My Site\"\n```\n\n\n- [Using template engines with Express](https://expressjs.com/en/guide/using-template-engines.html)\n#backEnd #node/express #node/npm #node/ejs","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/body-parser":{"title":"body-parser","content":"# body-parser\n[npm](https://www.npmjs.com/package/body-parser)\n\u003e 其實 [[Express.js]] 自帶這個模組，可以直接使用\n\u003e```js\n\u003eapp.use(express.urlencoded({ extended: true }));\n\u003e```\n\n```js\nconst bodyParser = require(\"body-parser\");\n\n// middleware 收到請求一定會被執行\napp.use(express.json());\napp.use(bodyParser.urlencoded(\n\t{ extended: true }\n));\n```\n#form #server #routing\n#backEnd #node/express #node/npm #node/ejs","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/fs-File-System":{"title":"fs (File System)","content":"# fs (File System)\n在 JS 檔案記錄一些伺服器遭遇的事件\n```js\nconst fs = require('fs');\n\n// 參數是：寫入的檔案、寫入訊息、function\nfs.writeFile('try.txt', 'Today is a good day.' e =\u003e {\n\tif (e) throw e;\t\t\t\t\t\t\t// 失敗的話終端機顯示\n\t\n\tconsole.log('file has been written.')\t// 終端機顯示\n})\n```\n```js\nfs.readFile('./try.txt', 'utf8', (e, data) =\u003e {\n\tif (e) throw e;\n\tconsole.log(data);\n})\n```\n\n- [[writeFile]]\n- [[readFile]]\n\n\n[[Middleware(Mongoose)]]\n[[內建模組(Node.js)]]\n\n#js #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/path":{"title":"path","content":"# [path](https://nodejs.org/dist/latest-v16.x/docs/api/path.html) 模組\n[[內建模組(Node.js)]] 之一\n\n\u003e[[Node.js 的預設參數#路徑相關]]：兩者都是顯示「路徑」，無法單純顯示檔名\n\n```js\nconsole.log(path.去文件找功能());\n```\n- [[使用路徑的兩種寫法#path 模組]]：組合路徑名稱\n- basename：顯示檔名\n- extname：副檔名\n\u003e[[匯入模組]]\n\n#js #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/readFile":{"title":"readFile","content":"```js\nfs.readFile('./try.txt', 'utf8', (e, data) =\u003e {\n\tif (e) throw e;\n\tconsole.log(data);\n})\n```\n[[內建模組(Node.js)]]\n\n#js #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84/urlmodule":{"title":"url(module)","content":"# url 模組\n```js\nconst url = reuqire('url');\n\nconst blaURL = 'http://126.0.0.0:5501/blablabla.html?inputName=Peter'\nconst parsedURL = url.parse(blaURL, true); // string -\u003e array\n\n// 取得網址第一段（126.0.0.0:5501）\nconsole.log(parsedURL.host);\n\n// 取得網址第一段，不包含 port（126.0.0.0）\nconsole.log(parsedURL.hostname);\n\n// 取得路徑（/blablabla.html）\nconsole.log(parsedURL.pathname);\n\n// 取得路徑＋query(/blablabla.html?inputName=Peter)\nconsole.log(parsedURL.path);\n\n// 取得 query\nconsole.log(parsedURL.query);\n// 取得 query 的特定內容\nconsole.log(parsedURL.query.email);\n```\n\u003e[[類型轉換#JSON]]：parse() 是 string -\u003e array\n\n\n- host：[[IP]] + [[Port]]\n- hostname：[[IP]]\n- pathname：路徑\n- path: 路徑 + [[Query]]\n- query: [[Query]]\n\n[[內建模組(Node.js)]]\n#js #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E5%85%A7%E5%BB%BA%E6%A8%A1%E7%B5%84Node.js":{"title":"內建模組(Node.js)","content":"# 內建模組\n```js\n// 直接匯入即可\nconst 內建模組 = require();\n```\n- [[path]]\n- [[url(module)]]\n- [[fs (File System)]]\n\n\n#js #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E5%8F%96%E5%BE%97-Node.js-%E8%A3%A1%E7%9A%84%E6%A8%A1%E7%B5%84":{"title":"取得 Node.js 裡的模組","content":"# 取得 Node.js 裡的[[模組]]\n## 取得管道\n- [[內建模組(Node.js)]]\n- [[自製模組(Node.js)]]\n- 他人製作模組（[[npm]]）\n\n\u003e[[Module Wrapper#取得 Node js 裡的模組 相關]]的參數與模組有關\n\n\n## 使用\n為了讓專案可以使用模組，需要[[匯入模組]]\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/%E5%8F%96%E5%BE%97%E6%88%96%E7%94%9F%E6%88%90/%E8%87%AA%E8%A3%BD%E6%A8%A1%E7%B5%84Node.js":{"title":"自製模組(Node.js)","content":"# 自製 Node.js [[模組]]\n會利用到 [[Module Wrapper]] 的預設參數 [[Module Wrapper#exports require module]]\n\n建立模組檔案（舉例 hi, bye）\n```\njs/\n|– app.js\t\t\n|– hi.js\n|– bye.js\n```\n\n```js\n// hi.js\nfunction sayHi() {\n\tconsole.log('Hi.');\n}\n```\n\n```js\n// bye.js\nfunction sayBye() {\n\tconsole.log('Bye.');\n}\n```\n\n如果用 Node.js 去執行 `.js` 檔的話，會把 `.js` 用 [[Module Wrapper]] 執行，可以讀取預設參數\n\n## [[匯出模組]]\n## [[匯入模組]]\n## [[整合模組匯出匯入]]\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/Module-Wrapper":{"title":"Module Wrapper","content":"# Module Wrapper\n[21/11/12 現下的 Document 說明](https://nodejs.org/dist/latest-v17.x/docs/api/modules.html#the-module-wrapper)\n\nJS 可以在瀏覽器內直接執行，但透過 Node 在終端運行時，會用 Module Wrapper 將 js 程式碼包起來再運行\n\n```js\n(function(exports, require, module, __filename, __dirname) {\n\t// Module code actually lives in here\n});\n```\n\n所以會使全域變數都會限制在這個函式的作用域([[Scope#Function Scope]])內\n\n\u003e  如何使用這些參數：[[Node.js 的預設參數]]\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/Node.js-%E7%9A%84%E9%A0%90%E8%A8%AD%E5%8F%83%E6%95%B8":{"title":"Node.js 的預設參數","content":"## Node.js 的預設參數\n[[Module Wrapper]] 帶有幾個參數可以使用，平常在瀏覽器運作時是不會有這些參數的\n\n### 路徑相關\n- 文件位置：`__filename`\n- 資料夾位置：`__dirname`\n\n\u003e [[使用路徑的兩種寫法]]\n\u003e [[path]]：組合路徑、顯示檔名等功能\n\n### [[取得 Node.js 裡的模組]] 相關\n- export：[[匯出模組]]\n- require：[[匯入模組]]\n- module：[[module 參數]]\n\n\u003e [[整合模組匯出匯入]]：進階的匯出匯入使用法\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/Module-Wrapper/module-%E5%8F%83%E6%95%B8":{"title":"module 參數","content":"## module\n在終端內可以看到 `module` 也是一個物件（[[Module Wrapper]] 的其中一個參數）\n```js\nModule {\n  id: '.',\n  path: '/Users/sz/8kbps/學習領域/前端學習/wilson/node',\n  exports: {},\n  parent: null,\n  filename: '/Users/sz/8kbps/學習領域/前端學習/wilson/node/bye.js',\n  loaded: false,\n  children: [],\n  paths: [\n    '/Users/sz/8kbps/學習領域/前端學習/wilson/node/node_modules',\n    '/Users/sz/8kbps/學習領域/前端學習/wilson/node_modules',\n    '/Users/sz/8kbps/學習領域/前端學習/node_modules',\n    '/Users/sz/8kbps/學習領域/node_modules',\n    '/Users/sz/8kbps/node_modules',\n    '/Users/sz/node_modules',\n    '/Users/node_modules',\n    '/node_modules'\n  ]\n}\n```\n其中有一個屬性是 `exports`\n```js\nexports: {},\n```\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/%E6%8C%87%E4%BB%A4npm":{"title":"指令(npm)","content":"# 指令 (npm)\n\n## 安裝\n```shell\nnpm i {模組名稱}\n```\n### global 安裝（全部的專案都可以用）\n```shell\nnpm install -g {名稱}\n```\n專案會出現 `node_modules` 資料夾\n\n## 其他指令\n- [[npm uninstall：裝錯模組取消安裝]]\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-%E5%BB%BA%E7%BD%AE%E8%88%87%E6%8C%87%E4%BB%A4":{"title":"npm 建置與指令","content":"# [[npm]] 建置與指令\n- [[安裝 Node.js]]（電腦）\n- [[npm init 初始化(package.json)]]（專案）：`package.json` 檔案\n- [[npm install 尋找想要的 npm 模組]]（專案）：`node_modules`  資料夾\n- [[npm uninstall：裝錯模組取消安裝]]\n\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-init-%E5%88%9D%E5%A7%8B%E5%8C%96package.json":{"title":"npm init 初始化(package.json)","content":"# 初始化 (package.json)\n當專案要做 npm 的使用時，都必須先初始化環境，製作一個 `package.json` 的檔案，有這個檔案才能上 npm 去使用別人的模組\n```shell\n// 專案資料夾\nnpm init\n```\n\n```json\n// package.json\n\n{\n\n\t\"name\": \"node\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"Learning npm and node.js\",\n\t\"main\": \"app.js\",\n\t\"scripts\": {\n\t\t\"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n\t},\n\t\"author\": \"SZ\",\n\t\"license\": \"ISC\"\n}\n```\n\n## dependencies\n當[[指令(npm)#安裝]] 模組之後，這個 `.json`檔會出現該 npm 模組\n```json\n\"dependencies\": {\n\t\"cowsay\": \"^1.4.0\"\t\t// 模組名稱與版本\n},\n```\n\n## scripts\n這個屬性可以自定指令\n```json\n\"scripts\": {\n\t\"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n\t\n\t\"mynodemon\": \"nodemon app.js\", // 可以自己新增指令與動作\n\t\n},\n```\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-install-%E5%B0%8B%E6%89%BE%E6%83%B3%E8%A6%81%E7%9A%84-npm-%E6%A8%A1%E7%B5%84":{"title":"npm install 尋找想要的 npm 模組","content":"---\n## 尋找想要的 npm 模組\n```shell\n// install 可以用 i 簡寫\nnpm install \u003c模組名稱，有多個用空白鍵隔開\u003e \n```","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8C%87%E4%BB%A4/npm-uninstall%E8%A3%9D%E9%8C%AF%E6%A8%A1%E7%B5%84%E5%8F%96%E6%B6%88%E5%AE%89%E8%A3%9D":{"title":"npm uninstall：裝錯模組取消安裝","content":"# npm uninstall：裝錯模組取消安裝\n```shell\nnpm uninstall \u003c模組名稱，有多個用空白鍵隔開\u003e\n```\n\n#node/npm #js/module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/method-override":{"title":"method-override","content":"---\n# method-override\n\u003e[method-override](https://www.npmjs.com/package/method-override)","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/nodemon":{"title":"nodemon","content":"# nodemon\n[nodemon](https://www.npmjs.com/package/nodemon)\ncode 更新後， cmd 會自動重新執行 node.js\n\n## 安裝\n方法一：電腦全域安裝（推薦）\n```shell\nnpm install -g nodemon\n```\n\u003e 有出現 `nodemon: command not found` 請用 [[nvm]] 重新安裝 node\n\n方法二：專案安裝\n```shell\nnpm install --save-dev nodemon\n```\n\u003e目前測試無法使用 (Mac 10.14 2021/3/20)\n## 使用\n```shell\nnodemon app.js\t// 執行專案的 js 檔案\n```\n\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84/npm-%E6%8E%A8%E8%96%A6%E6%A8%A1%E7%B5%84":{"title":"npm 推薦模組","content":"- [[nodemon]]\n- [[Express.js]]\n- [[Mongoose]]\n- [[Node to API - node fetch]]\n\n\n\n#js #advanceJs #library #framework #nodeJs #backEnd #module #expressJs #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/%E6%B2%92%E8%BE%A6%E6%B3%95%E5%85%A8%E5%9F%9F%E5%AE%89%E8%A3%9D-npm-%E6%A8%A1%E7%B5%84code-EACCES":{"title":"沒辦法全域安裝 npm 模組：code EACCES","content":"# 沒辦法全域安裝 npm 模組：code EACCES\n\n[[npm install -g less does not work: EACCES: permission denied](https://stackoverflow.com/questions/33725639/npm-install-g-less-does-not-work-eacces-permission-denied)](https://stackoverflow.com/questions/33725639/npm-install-g-less-does-not-work-eacces-permission-denied)\n\n裝 [[nvm]] 解決","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/npm":{"title":"npm","content":"# npm (node package manager)\n管理並追蹤他人撰寫的 Node [[模組]]，安裝 [[Node]] 就會一起下載下來囉！\n\n- [[npm 建置與指令]]\n\t- [[指令(npm)]]\n- [[npm 推薦模組]]\n\n## 遭遇狀況\n- [[沒辦法全域安裝 npm 模組：code EACCES]]：[[nvm]]\n- \n#js #advanceJs #library #framework #nodeJs #backEnd #module #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/npm/nvm":{"title":"nvm","content":"---\n# nvm\n[nvm github](https://github.com/nvm-sh/nvm)：詳細指令請參照\n[nvm：快速安裝、切換不同版本的 Node.js](https://noob.tw/nvm/)\n\n安裝\n```shell\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n```\n\n結束後先重開 terminal\n\n```shell\ncommand -v nvm\n```\n\n## 指定安裝版本\n```shell\nnvm install node # 最新版\n```\n\n```shell\nnvm install 14.7.0 # or 指定版本\n```","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/%E6%A8%A1%E7%B5%84/writeFile":{"title":"writeFile","content":"# writeFile\n\n```js\nconst fs = require('fs');\n\n// 參數是：寫入的檔案、寫入訊息、function\nfs.writeFile('try.txt', 'Today is a good day.' e =\u003e {\n\tif (e) throw e;\t\t\t\t\t\t\t// 失敗的話終端機顯示\n\t\n\tconsole.log('file has been written.')\t// 終端機顯示\n})\n```\n預設是可以在該檔案寫內容，每次使用這個功能，都會覆寫掉原本的內容\n\n\n#js #library #framework #nodeJs #backEnd #module","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Node.js/Node":{"title":"Node","content":"## 後端\n- [[常見的後端的程式語言]]\n\n### 網路知識\n- [[IP]]\n- [[Port]]\n- [[靜態與動態網頁 Static and Dynamic Website]]\n\n## Node\n- [[介紹 Node.js]]\n- [[安裝 Node.js]]\n- [[Node 指令]]\n- [[Module Wrapper]]\n\t- [[Node.js 的預設參數]]\n\n## 模組\n### 使用模組\n- [[匯出模組]]\n- [[匯入模組]]\n- [[整合模組匯出匯入]]\n\n### 生成或取得模組\n- [[取得 Node.js 裡的模組]]（[[模組]]）\n\t- [[自製模組(Node.js)]]\n\t- [[內建模組(Node.js)]]\n\t- [[npm]]\n\n### [[內建模組(Node.js)]]\n- [[path]]\n- [[url(module)]]\n- [[fs (File System)]]\n\t- [[writeFile]]\n\t- [[readFile]]\n- [[body-parser]](不確定是不是內建的)\n\n## Server\n- [[Server 建立]]\n- [[Express Life Cycle 生命週期]]\n\n## npm\n- [[npm]]\n- [[npm 建置與指令]]\n- [[npm 推薦模組]]\n\t- [[Express.js]]\n\t- [[Mongoose]]\n\t- [[EJS]]\n- [[dart-sass(sass) 建置]]\n\t\n### 其他\n- [[nodemon]]\n- [[Node to API - node fetch]]\n- [[method-override]]([[Express and Mongoose]])\n\n### [[Cookies and Sessions]]\n- [[cookie-parser]]：cookie\n- [[express-session]]：session\n- [[dotenv（使用 env 變數）]]：讀取 env\n- [[cookie-session]]\n- [[connect-flash]]\n\n### [[Authentication and Cryptography]]\n- [[bcrypt]]：加密\n\n### React\n- [[UUID]]\n\n\n## [[Session]]\n- [[process(node)]]：node 的一個全域物件\n\n## gitignore\n[[node 的 gitignore 設定]]\n\n#js #advanceJs #library #framework #nodeJs #backEnd","lastmodified":"2022-04-23T12:34:05.632865448Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Query":{"title":"Query","content":"[[Routing for Query 回應表單]]\n[[url(module)]]\n[[Async（目錄）]][[endpoint]]","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/%E4%BD%BF%E7%94%A8-Postman-%E7%99%BC%E5%87%BA%E8%A1%A8%E5%96%AE%E8%AB%8B%E6%B1%82":{"title":"使用 Postman 發出表單請求","content":"## 使用 Postman 發出表單請求\n![[api 傳送請求.png]]\n- 寫在 POST（看用什麼請求，更新就用 PUT） → Body → x-www-form-unrencoded\n- 對應的是 POST 表單用的 [[body-parser]]（[[Middleware(express)]]）\n- 不會只限定 GET, POST 請求\n\n\n#api #js #restfulapi #api #crud #database #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E5%88%AA%E9%99%A4%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93":{"title":"API 提供刪除資料的管道","content":"# API 提供刪除資料的管道\n這個功能通常不會提供給用戶使用（這什麼恐怖的功能）\n\n- [[API 提供刪除資料的管道#刪除一項]]\n- [[API 提供刪除資料的管道#刪除全部]]\n\n## 刪除一項\n\u003e 同 [[透過 Postman 刪除數據庫資料]]\n```js\napp.delete('/students/delete/:id', (req, res) =\u003e {\n\tlet { id } = req.params;\n\tStudent.deleteOne({ id })\n\t\t.then(meg =\u003e {\n\t\t\tconsole.log(meg);\n\t\t\tres.send('刪除成功');\n\t\t}).catch(e =\u003e {\n\t\t\tconsole.log(e);\n\t\t\tres.send('刪除失敗');\n\t\t})\n})\n```\n\n## 刪除全部\n\u003e[[Delete]]\n```js\napp.delete('/students/delete/:id', (req, res) =\u003e {\n\tlet { id } = req.params;\n\tStudent.deleteMany({})\n\t\t.then(meg =\u003e {\n\t\t\tconsole.log(meg);\n\t\t\tres.send('全部資料刪除成功');\n\t\t}).catch(e =\u003e {\n\t\t\tconsole.log(e);\n\t\t\tres.send('刪除失敗');\n\t\t})\n})\n```\n#api #js #restfulapi #api #crud #database #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%89%80%E6%9C%89%E8%B3%87%E6%96%99":{"title":"API 提供所有資料","content":"# API 提供所有資料\n[[將數據庫資料顯示於網頁]]\n\u003e[[send 和 sendFile 回應(express)#回應物件的話]]\n```js\n// /students/（已登入學生表）\napp.get('/students', async (req, res) =\u003e {\n\ttry {\n\t\tlet data = await Student.find();\n\t\tres.send(data);\n\t} catch {\n\t\tres.send({ message: '找不到學生資料' });\n\t}\n})\n```\n\n之後就可以用 [[Postman]] 發出 GET 請求了\n#api #js #restfulapi #api #crud #database #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%96%B0%E5%A2%9E%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93":{"title":"API 提供新增資料的管道","content":"# API 提供新增資料的管道\n\u003e[[表單資料存入數據庫]]\n\n不用提供表單了，用戶會直接透過 [[Postman]] 輸入資訊\n\n```js\n// routing for query\napp.post('/students', (req, res) =\u003e {\n\t// req.body 是表單資訊\n\tlet { id, name, age, merit, other } = req.body;\n\t// create an object\n\tlet newStudent = new Student({\n\t\tid, name, age, scholarship: { merit, other },\n\t});\n\t\n\t// 存入數據庫\n\tnewStudent.save()\n\t\t.then(() =\u003e {\n\t\t\tres.send({ message: '提交成功' })\n\t\t}).catch(e =\u003e {\n\t\t\tres.status(404);  // 有更好的狀態碼\n\t\t\tres.send(e);\n\t\t})\n}) \n```\n\n[[使用 Postman 發出表單請求]]\n\n#api #js #restfulapi #api #crud #database #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E6%9B%B4%E6%96%B0%E8%B3%87%E6%96%99%E7%9A%84%E7%AE%A1%E9%81%93":{"title":"API 提供更新資料的管道","content":"# API 提供更新資料的管道\n\u003e[[獲得請求後更新數據庫資料]]\n\n- [[API 提供更新資料的管道#PUT]]\n- [[API 提供更新資料的管道#PATCH（還沒搞懂）]]\n\n\n## PUT \n一樣不用提供表單（[[EJS 提供用戶更新的資料的表單]]），也不用提供 edit 頁面（透過 HTTP Verb 即可）\n```js\n// 收到 put 更新後，更新數據庫\napp.put('/students/:id', async (req, res) =\u003e {\n\t// 因為網頁上的 merit, other 沒有多包一層一個物件，需要先提出來\n\tlet { id, name, age, merit, other } = req.body;\n\ttry {\n\t\tres.send('感謝您，資料已更新');\n\t\tlet data = await Student.findOneAndUpdate(\n\t\t\t{ id },\n\t\t\t{ id, name, age, scholarship:{ merit, other } },\n\t\t\t{\n\t\t\t\tnew: true,\n\t\t\t\trunValidators: true,\n\t\t\t\toverwrite: true\t\t\t// 只有 put 需要設定\n\t\t\t}\n\t\t);\n\t\tres.send('感謝您，資料已更新')\n\t\t\n\t} catch {\n\t\tres.status(404);\n\t\tres.send('更新失敗')\n\t}\n})\n```\n\n\u003e[[使用 Postman 發出表單請求]]，使用 PUT 請求即可\n\n## PATCH（還沒搞懂）\n只有部分更新\n\u003e[[Class]]\n\n使用 findOneAndUpdate 的時候，因為有設定 [[Update with Validators]]，所以會沒辦法直接運行\n只動 age, merit \n```js\nclass newData {\n\tconstructor() {};\n\t// 只用 prototype 的功能\n\t// 不是 scholarship：newData\n\tsetProperty(key, value) {\n\t\tif(key !== 'merit' \u0026\u0026 key !== 'other') {\n\t\t\tthis[key] = value;\t\t\t// 使用時會指向物件實例\n\t\t} else {\n\t\t\tthis[`scholarship.${key}`] = value\n\t\t}\n\t}\n}\n\n// 收到 put 更新後，更新數據庫\napp.patch('/students/:id', async (req, res) =\u003e {\n\tlet { id } = req.parmas;\n\tlet newObject = new newData();\n\tfor (let property in req.body) {\n\t\tnewObject.setProperty(property, req.body[property] );\n\t}\n\tconsole.log(newObject);\n\ttry {\n\t\tres.send('感謝您，資料已更新');\n\t\tlet data = await Student.findOneAndUpdate(\n\t\t\t{ id },\n\t\t\tnewObject,\n\t\t\t{\n\t\t\t\tnew: true,\n\t\t\t\trunValidators: true,\n\t\t\t}\n\t\t);\n\t\tconsole.log(data);\n\t\tres.send('感謝您，資料已更新')\n\t\t\n\t} catch {\n\t\tres.status(404);\n\t\tres.send('更新失敗')\n\t}\n})\n```\n#api #js #restfulapi #api #crud #database #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/API-%E6%8F%90%E4%BE%9B%E7%89%B9%E5%AE%9A%E8%B3%87%E6%96%99":{"title":"API 提供特定資料","content":"# API 提供特定資料\n\u003e[[使用 Routing for pattern 顯示特定數據庫物件]]\n```js\napp.get('student/:id', async (req, res) =\u003e {\n\tlet { id } = req.params;\n\ttry {\n\t\tlet data = await Student.findOne({ id });\n\t\tif( data !== null) {\n\t\t\tres.send(data);\n\t\t} else {\n\t\t\tres.status(404);  // \n\t\t\tres.send({ message: '該 ID 尚未被登錄' };\n\t\t}\n\t} catch(e) {\n\t\tres.send('資料取得失敗');\n\t}\n})\n```\n\u003e[[狀態碼]]\n\n#api #js #restfulapi #api #crud #database #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/HTTP-Verbs":{"title":"HTTP Verbs","content":"# HTTP Verbs (HTTP Methods)\n\u003e[[HTTP request]]\n- GET\n- POST\n- PUT\n- PATCH\n- DELETE\n\n\n#js #api #restfulapi","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API":{"title":"Restful API","content":"# Restful API\n- [[Restful API 介紹]]\n- [[Restful API from Scratch]]；將 [[Express and Mongoose]] 製作成 API 讓他人連接到你的 MongoDB\n\n\n- [[使用 Postman 發出表單請求]]\n\n#api #js #restfulapi #api #crud #database #json","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API-%E4%BB%8B%E7%B4%B9":{"title":"Restful API 介紹","content":"---\n# Restful API 介紹\n- Representational state transfer\n- 描述一種製作 API 需要依循的原則（像[[OSI 開放式通訊系統互連參考模型的七層架構]] 也是網路的參考原則）\n- Restful Routing\n\u003e目前提過的 JokeAPI, openweather API 都是遵照這個原則","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E5%BE%8C%E7%AB%AF/Restful-API/Restful-API-from-Scratch":{"title":"Restful API from Scratch","content":"---\n# Restful API from Scratch\n從頭開始製作一個 Restful API （以 [[Express and Mongoose]] 改寫）\n把原本要拿來顯示在網頁上的東西（EJS），用資料的方法送給 API 用戶\n\n## 步驟\n[[建置（連接數據庫的表單）]]中 [[Request handling（搭配數據庫CRUD）]]需要更動的有；\n- 不用網頁的介面\n\t- Homepage 不用了\n\t- EJS 也不用了\n\t- 也不用提供表單了\n\t- 傳送的內容幾乎都是 [[Object]] 格式\n\t- 也不用傳 console.log 的資料了\n\n| 動作           | 網頁版                                          | Restful API 版             |\n|:","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E5%B0%81%E5%8C%85":{"title":"Untitled Page","content":"# 封包\nData packet（數據包）是在封包交換網路中傳輸的格式化數據單位。\n一個封包最大 1506，TCP 表頭大約 20 Bytes\n## 包含內容\n- header：包括控制資訊\n- 負載(payload)，和資料本身\n## 封包可以分成多個小封包\n封包比作為一封信，表頭資料像信封，資料部分相當於內容。和信不同的是，有時候一個大封包可以分成多個小封包。\n\n## 利用 [[Wireshark]] 來檢視封包\n[[Wireshark#介面]]\n\n## TCP 封包\n\n-    [TCP 封包結構](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE#%E5%B0%81%E5%8C%85%E7%B5%90%E6%A7%8B) \n-   TCP 表頭 20Bytes - 每個 TCP 封包 data 可夾帶 40~1500 Bytes Data 資料\n\n![TCP_header.png](https://codahosted.io/docs/EFZGtPoMSj/blobs/bl-aq98D3ooXS/00bb29881e67e21af4b37ca0582d3acccff6539ce394b0236fa206fb2aaaf16ad46b47217c61edcad9a547b3c15a6b0916f84a5f12e8c8a923ae6d840cac30a1982eede51bc657757743ff0ef9ae3c4fc8760e8bfef529986f0148839fbf9a60ada61f76)","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%8B%80%E6%85%8B%E7%A2%BC":{"title":"Untitled Page","content":"# 狀態碼 HTTP Status Code\nClient 傳送 [[HTTP request]] 之後，Server 會給一個狀態碼回去，可以辨識回應結果\n\n```js\napp.get(\"/\", (req, res) =\u003e {\n\tconsole.log(res.statusCode);\t\t// 可以查看該頁面的狀態碼\n})\n```\n\n## 簡要\n### 1XX 進行\n### 2XX 成功\n- 200\n### 3XX 拒絕\n- [[302 Found]]\n### 4XX 請求失敗\n- [[404 Not Found]]\n### 5XX 回應失敗\n- 500\n伺服器失敗\n\n#js #backEnd #expressJs #server #npm","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%B6%B2%E8%B7%AF%E8%AB%8B%E6%B1%82":{"title":"Untitled Page","content":"# 網路請求\n- 事前知識：[[計算機網路總結]]、[[計算機概論]]\n- [線上簡報](https://cacoo.com/diagrams/FvctrUl4Zw2EWvvc/61B2F) \n- [[Wireshark]]\n- [fiddler 下載網址](https://www.telerik.com/download/fiddler) 、 [示範影片](https://youtu.be/MhGb5mdnw6w) \n\n- 輸入網址的過程發生什麼事情\n- get, post\n\n## 瀏覽器如何與伺服器要資料\n有兩種\n###  [[TCP 傳送（雙向溝通）]]\n- [[TCP IP#傳輸 封包 的過程]]\n### [[UDP 傳送]]\n速度快不嚴謹，會掉封包\n\n\n\n## 加密\n![](https://i.imgur.com/2uvtkBv.png)\n[[HTTPs]] 會在應用層與傳輸層中間，做一道加密的手續，讓傳輸時，資料不會被看光光\n\n\n## [[網路請求 常見面試題目]]\n\n  \n\n\n\n#internet #network ","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E7%B6%B2%E8%B7%AFInternet%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86":{"title":"Untitled Page","content":"# 如何傳遞資料？  \n1. 裝置傳實體資料：傳真  \n2. 裝置傳裝置：網路\n\n## [[網路]] Internet\n\n### 形成網路可以做什麼事情\n- 共享資料\n- 分工合作\n\n## 第一階段：裝置連裝置  \n靠電線連接  \n但欲連接的裝置增多時，電線會越接越複雜  \n![](https://i.imgur.com/plWDnxo.png)\n\n## 第二階段：多台裝置\n### Router 路由器\n![](https://i.imgur.com/qzBdvHr.png)\n建立一個統一的中心，讓多台裝置可以直接透過路由器來相連\n\n## 第三階段：[[WWW]] (World Wide Web)\n資訊系統，可以做文件傳輸\n建立在 internet 之上，[[HTTP]] 規範如何文件傳輸\n- 跨國網路\n- 格式不相容\n\n### 跨國網路\n- [海底電纜](https://www.submarinecablemap.com/)\n\t- 不受天氣影響\n- 衛星傳輸\n\t- 快、受天氣影響\n#network","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B6%B2%E8%B7%AF%E7%B8%BD%E7%B5%90":{"title":"Untitled Page","content":"# 計算機網路總結\n-   [線上題目設計](https://docs.google.com/forms/d/1JPRXsgl3JaLY78Z2apnL8AFcjnW0p4RG0_Z62HghUc4/edit)\n-   [線上簡報](https://cacoo.com/diagrams/FvctrUl4Zw2EWvvc/61B2F)\n\n## 當輸入一個網址時，先後執行順序\n\n**網址範例： https://www.xx.com.tw/index.html**\n\n1.  瀏覽器進行網址 [[DNS]] 解析，並獲得網址對應 [[IP]]\n2.  進行 [[TCP 傳送（雙向溝通）]]\n3.  瀏覽器端送出 [[Request]] send: request header\n\n4.  進行 SSL 握手\n5.  發出網路請求 (request)\n6.  獲得 HTML response，並顯示狀態碼 200\n7.  解析 HTML，並顯示於瀏覽器上。parse\n\n## 當在瀏覽器輸入一個網址時的流程\n\n-   [瀏覽器解析過程](https://developers.google.com/web/fundamentals/performance/rendering/?hl=zh-tw)\n-   **資料傳輸**：DNS 解析 \u003e TCP 建立連線 \u003e SSL建立連線 \u003e 回傳 response 狀態碼\n-   **網頁解析**：[瀏覽器解析過程](https://developers.google.com/web/fundamentals/performance/rendering/?hl=zh-tw) 、[延伸閱讀](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-tw)\n\n-   拿乾淨網頁來示範\n-   拿 [hexschool](https://www.hexschool.com/)、[IT 邦幫忙](https://ithelp.ithome.com.tw/)\n\n## DNS 解析\n\n-   懶人包流程：買網址 \u003e 買主機 \u003e DNS 指向主機\n-   DNS 指向主機：\n\n-   A 紀錄：單一主機 IP\n-   C Name：指向到服務主機\n\n-   將實際拿 [Github](https://help.github.com/en/articles/setting-up-a-custom-subdomain)、[Heroku](https://devcenter.heroku.com/articles/custom-domains) 設定 CNAME 流程給各位看\n\n## 延伸閱讀\n\n-   [測量資源加載時間](https://developers.google.com/web/tools/chrome-devtools/network-performance/resource-loading?hl=zh-tw)\n-   [來做個網路瀏覽器吧！Let's build a web browser!](https://ithelp.ithome.com.tw/users/20103745/ironman/1270)\n-   [30 天學會 Web 前端效能優化](https://ithelp.ithome.com.tw/users/20091377/ironman/781)\n\n## 常見面試題目\n\n-   [當在瀏覽器輸入一個網址，中間會發生什麼事？](https://www.google.com/search?rlz=1C5CHFA_enTW790TW790\u0026ei=uRPIXO-ULZK2mAXNvIeoAQ\u0026q=%E7%95%B6%E5%9C%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E8%BC%B8%E5%85%A5%E7%B6%B2%E5%9D%80+%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE\u0026oq=%E7%95%B6%E5%9C%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E8%BC%B8%E5%85%A5%E7%B6%B2%E5%9D%80+%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE\u0026gs_l=psy-ab.3...11451.13148..13425...0.0..0.143.786.11j2......0....1..gws-wiz.......33i160.JcIkLfhTWu8)\n-   [請描述何謂 http 請求](https://www.google.com/search?rlz=1C5CHFA_enTW790TW790\u0026ei=5xPIXImcHYvU0gTa-YnICw\u0026q=http+%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE+\u0026oq=http+%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE+\u0026gs_l=psy-ab.3...17917.21113..21425...0.0..0.52.204.4......0....1j2..gws-wiz.......35i39j0j0i30j0i5i30.Xo9t9rTynW4)\n-   [前端工程師有必要學 fiddler 與 wireshark 嗎？](https://www.zhihu.com/question/266935932)","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E7%B6%B2%E8%B7%AF":{"title":"Untitled Page","content":"1. 任兩台裝置相連，即形成網路\n2. 世界可存在無限多個不相連網路","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E7%B6%B2%E8%B7%AF%E8%AB%8B%E6%B1%82-%E5%B8%B8%E8%A6%8B%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE":{"title":"Untitled Page","content":"# 網路請求 常見面試題目\n- 當發出一個 GET/POST 請求時，中間過程會經過哪些傳輸協定\n\n- 不知道 HTTP、HTTPS 的差異，為什麼在 HTTP 不能用 POST\n\t- [[HTTPs]]\n- 一部 100 MB 影片是否能只用一個封包來進行傳送？\n\t- 每個 TCP [[封包]] data 可夾帶 40~1500 Bytes Data 資料，100MB必須分成好幾個小封包\n- 如果一個網頁有 10 張圖片，是否要執行十次 TCP 三項交握來獲得？\n\tNO, 在傳完所有資料之前，三項交握只需要執行一次，傳完後關閉\n- 在 post API 時，可以安心在 http 網站使用，不會被人看到資料或竄改封包？\n\t- 不可，在傳輸層就會看光光所有的 user 資料\n- 如果講求傳輸速度，就算資料掉一些也不打緊的話，該用 TCP 還是 UDP 傳輸？\n\t- [[UDP 傳送]]，不用三項交握\n- 只能寫 JavaScript AJAX 來撈 API 資料，無法透過其他方式來發送請求\n\t- 發送網路請求管道：\n\t-   JS AJAX\n\t-   POSTMAN\n\t-   cURL：用終端指令發送\n\t-   各種後端語言\n\t-   IOS/Android\n\t-   Desktop App\n- 後端語言只能開啟 web 伺服器與接資料庫，無法針對 TCP/IP、UDP 來設計服務?\n\t-   後端除了建立 web 伺服器之外也可以\n\t\t-   也有不使用應用層，單純用 TCP 協定，做資料傳輸\n\t\t-   UDP 只有做 server 接收資料\n\n- 如果要看 HTTP 協定傳送， Fiddler、wireshark 都可以？\n\t- yes\n- wireshark 每個封包都一定會有以下內容嗎？\n\t- NO, \n\t\t-   Frame\n\t\t-   Ethernet II：可能網卡類型不同\n\t\t-   Internet Protocol Version 4：可能是 IPv6\n\t\t-   Transmission Control Protocol：可能換成 UDP\n\t\t-   Hypertext Transfer Protocol\n\n## 融會貫通後（校長建議撰寫主題）\n-   前端該理解的 TCP/IP 觀念\n-   在與後端介接 API 時，如何透過 TCP/IP 、wireshark、Fiddler 來觀察是否 ok\n-   輸入瀏覽器網址後，過程中發生了哪些事？","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/%E8%B6%85%E6%96%87%E5%AD%97":{"title":"Untitled Page","content":"# 超文字\n可以顯示在電子裝置上的文字，其中有可以用點擊方式就可以連接到其他位置、文件的超連結\n\nHTML, CSS, JS 都可以說是實現超文字的相關技術","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/MAC":{"title":"Untitled Page","content":"訊框，網路卡提供\n```\n38:f9:d3:7f:e9:85\n```\n長得像這樣，每個 MAC 都不一樣","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/OSI-%E9%96%8B%E6%94%BE%E5%BC%8F%E9%80%9A%E8%A8%8A%E7%B3%BB%E7%B5%B1%E4%BA%92%E9%80%A3%E5%8F%83%E8%80%83%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%83%E5%B1%A4%E6%9E%B6%E6%A7%8B":{"title":"Untitled Page","content":"# OSI 開放式通訊系統互連參考模型\n\n[什麼是OSI的7層架構？和常聽到的Layer 7有關？](https://www.ithome.com.tw/tech/47085)\n- 國際化標準組織(ISO) 制定\n- Open System Interconnection Reference Model\n- 一種概念，描述制定網路時需要什麼樣的架構，協助網路功能發展時的制定有個參考的標準\n- 幫助學習或是開發時，可以有個參考依據\n\n## 七層\n![](https://i.imgur.com/hGfbJ75.png)\n\n- 實體層\n- 資料連結層\n- 網路層\n- 傳輸層\n- 會議層\n- 展示層\n- 應用層\n\n### 第一層︰實體層（Physical Layer）\n最底層，定義裝置間的物理**傳輸**，規範[[網路]]連結時的規格、速度、電壓等等\n#### 實例\n網路線、網路卡、hub 等\n\n### 第二層︰資料連結層（Data Link Layer）\n資料連結層介於實體層與網路層之間，主要是在網路之間建立邏輯連結，並且在傳輸過程中處理流量控制及錯誤偵測，讓資料傳送與接收更穩定。資料連結層將實體層的數位訊號封裝成一組符合邏輯傳輸資料，這組訊號稱為資料訊框（Data Frame）。訊框內包含媒體存取控制（Media Access Control，MAC）位址。\n#### 實例\n網路線、網路卡、hub 等\n\n### 第三層︰網路層（Network Layer）\nIP層\n### 第四層︰傳輸層（Transport Layer）\n- TCP\n- UDP\n\n傳輸層主要負責電腦整體的**資料傳輸及控制**，是OSI模型中的關鍵角色，它可以將一個較大的資料切割成多個適合傳輸的資料，替模型頂端的第五、六、七等三個通訊層**提供流量管制及錯誤控制**。  \n  \n傳輸控制協定（Transmission Control Protocol，TCP）是我們常接觸具有傳輸層功能的協定，它在傳輸資料內**加入驗證碼**，當對方收到後，就會依這個驗證碼，回傳對應的確認訊息（ACK），若對方未及時傳回確認訊息，資料就會重新傳遞一次，以確保資料**傳輸的完整性**。\n### 第五層︰會議層（Session Layer）\n### 第六層︰展示層（Presentation Layer）\n  \n### 第七層︰應用層（Application Layer）\n\n## OSI 與 TCP/IP 的關係\n- [[OSI 開放式通訊系統互連參考模型的七層架構]]：1984年，ISO 發布了著名的 ISO/IEC 7498 標準，它定義了網路互聯的 7 層框架，也就是開放式系統互聯參考模型。\n","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/SSL":{"title":"Untitled Page","content":"免費的 SSL：cloudfare","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/TCP-IP":{"title":"Untitled Page","content":"# TCP/IP\n被視為[[OSI 開放式通訊系統互連參考模型的七層架構]]的**簡化版**，1990 年開始蓬勃發展(與 [[[WWW]]/mail 等相關技術開始發展相關)。\n## 與 OSI 對應\n|OSI|TCP/IP|常見協定與標準|\n|-|-|-|\n|應用層、表現層、會議層|應用層|HTTP, FTP, SMTP, POP3, SSH|\n|傳輸層|傳輸層|TCP, UDP|\n|網路層|網路層|IP|\n|網路連結層、實驗層|網路連結層|Ethernet|\n\n\n## 實際應用會看到的資訊\n 可以從 [[Wireshark#介面#對應 TCP IP]] 看實際應用時的資訊\n \n## 傳輸[[封包]]的過程\n```\n// 瀏覽器\n應用層\t\t\t// HTTP 發出請求（提供 USER 資料）\n-\u003e 傳輸層\t\t// TCP 傳輸封包（提供 TCP 表頭）\n-\u003e 網路層\t\t// IP 要從這裡送出（提供 IP 表頭）\n-\u003e 網路連結層   // 連到伺服器（提供以太表頭）\n-------\u003e 連到伺服器\n```\n\n```\n// 伺服器\n-\u003e 網路連結層   // 接到封包\n-\u003e 網路層\t\t// 知道要送到哪個 MAC\n-\u003e 傳輸層\t\t// 知道是要送到哪個 Port\n-\u003e 應用層\t\t// 知道是要送什麼資料回去\n\n-\u003e 傳輸層\t\t// 提供 TCP 表頭\n-\u003e 網路層\t\t// 提供 IP 表頭\n-\u003e 網路連結層   // 提供以太表頭\n-------\u003e 連到瀏覽器\n\n```","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E8%A8%BB%E8%A7%A3/WWW":{"title":"Untitled Page","content":"# WWW\n\u003e為一種資訊系統，是 internet 提供的功能之一\n跨國網路有兩點需要克服\n- [[網路(Internet)基本原理#跨國網路]]\n- 格式不相容\n\n## [[HTTP]]\n\n#network\n","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/%E9%9D%9C%E6%85%8B%E8%88%87%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81-Static-and-Dynamic-Website":{"title":"Untitled Page","content":"# 靜態與動態網頁\n## 靜態網頁 Static Website\n網頁內容都是事先寫好的，應訪問者需求提供內容\n訪問者 -\u003e Server（商品）\n## 動態網頁 Dynamic Website\n訪問者 -\u003e 店員 -\u003e 後台（廚師） -\u003e 倉庫（原料）\n### 範例\n- facebook\n- Youtube\n- 需要登入的網站\n\n#js  #nodeJs #web ","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/DNS":{"title":"Untitled Page","content":"# DNS(Domain Name System)\n由於 [[IP]] 都是由數字組成，沒有語意，DNS 可以讓訪問者輸入語義化（例如：youtube.com）的方式後，轉換成電腦讀得懂得 IP 位置","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTP":{"title":"Untitled Page","content":"# HTTP(HyperText Transfer Protocol [[超文字]]傳輸協議)\n由於世界可以存在不相關的無限個網路，彼此使用的格式不同，若要形成一個共通的 [[WWW]] 環境，會需要先解決格式不相容的問題，[[HTTP]] 便是一個在 [[WWW]] 網路中傳輸[[超文字]]時，要遵守的共同協議。 \n\n\n\n## 訪問網站的動作（[[網路請求]]）\n\n訪問者訪問網站時的動作\n```\ndevice ------  REQUEST ----\u003e server\ndevice \u003c----- RESPONSE ----- server\n```\n\n### 常見的 [[HTTP request]]（請求）\n#internet #http #request","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTP-request":{"title":"Untitled Page","content":"# HTTP Request\n## HTML Form 可以做的\n- GET：獲得資訊（影片、文章……）（最常見）\n- POST：送出資訊\n\n## [[Database 數據庫]]可以做的\n[[Database 數據庫#C R U D]]\n### 更新\n- [[獲得請求後更新數據庫資料]]：整個更新\n- PATCH：只更新有更新的內容\n\n### 刪除\n- DELETE\n\n#js #internet #backEnd #expressJs #crud #database #mongoose ","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/HTTPs":{"title":"Untitled Page","content":"# HTTPs 與 HTTP 的差異？\n- Hyper Text Transfer Protocol over Secure Socket Layer\n- 有沒有加密，get, post 什麼都看不到\n-  因此 HTTP 的狀況下不要用 POST，資料都會被看光光\n-  HTTP 是 80 port、HTTPS 是  443 port\n-  HTTP 是 應用層、HTTPS 是傳輸層\n\n## [[Wireshark]] 上的樣子\n![](https://i.imgur.com/SnWGOsS.png)\n有透過 HTTPS 加密的文件，是沒辦法直接查看[[封包]]內容的，TLSv1.2 就是代表 HTTPs\n![](https://i.imgur.com/2YSAmhs.png)\n詳細資料也會多一行 Secure Sockets Layer([[SSL]] 憑證)\n\n\n\n## 其他連結\n-    [執行過程](https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A#%E8%BF%87%E7%A8%8B) \n\t-    [TLS 1.2（SSL 3.3）](https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A) \n","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/IP":{"title":"Untitled Page","content":"# IP\n任何**裝置**連上網路都會有一個辨識的 IP 位置\n\n## 如何儲存\n IP 用[[二進位]]的方式儲存\n### IPv4\n由 4 Bytes (32bits, `2**32 種，約 42億9千萬`)組成，目前已經不夠用\n```\n168.0.0.1\t\t// 每個 byte（用點隔開） 都介於 0-255 中間\n```\n \n ### IPv6\n 由 16 Bytes (128bits, `2**128 種`)組成，目前還很難想像用完的一天\n \n ## 固定 IP 與 浮動 IP\n##  [[Port]]","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/Port":{"title":"Untitled Page","content":"# Port 接口\n連上 [[IP]] 後，一個 IP 可能有多個 Port 提供不同的 Server\n```\n// mac 的查詢 port 功能\nlsof -nP -i | grep LISTEN\n```\n\n## 常見的 Port Number\n\n- 80: HTTP\n- 20: FTP\n- 53: DNS\n- 443: HTTPs\n- 3389: 遠端桌面\n\n## 網址\n1. 利用裝置輸入網址\n```\nwww.youtube.com\n```\n2. [[DNS]] 將網址轉換成 [[IP]]\n```\n208.65.153.238\n```\n3. [[IP]] 後面接上 Port\n```\n208.65.153.238:80\n```\n\n## Port 不可重複\n不能把不同功能開在同一個 Port","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/TCP-%E5%82%B3%E9%80%81%E9%9B%99%E5%90%91%E6%BA%9D%E9%80%9A":{"title":"Untitled Page","content":"# TCP 傳送（雙向溝通）\n initial connection\n嚴謹，需要握手揮手\n## TCP 三項交握（建立連線）\n建立三項交握後，瀏覽器跟伺服器才會建立雙向溝通\n\n```\n瀏覽器  --   [SYN]   --\u003e 伺服器\t// 1\n瀏覽器 \u003c-- [SYN/ACK] --  伺服器\t// 2\n瀏覽器  --   [ACK]   --\u003e 伺服器\t// 3 TCP 三項交握\n```\n## request（發送請求）\n```\n瀏覽器  --   [GET HTTP1.1]   --\u003e 伺服器\t// request\n瀏覽器 \u003c--     [TCP 傳送]     --  伺服器   // 伺服器給資料\n瀏覽器  --   [HTTP 200 OK]   --\u003e 伺服器\t// 伺服器表示傳好了\n```\n\n在 [[Wireshark]]上會有這樣的訊息\nGET 完後就會開始 TCP [[封包]]傳送\nTCP 會分成很多個小[[封包]]傳送\n送完就會收到 `200 OK` 的[[狀態碼]]\n![](https://i.imgur.com/w6cQ1YI.png)\n![](https://i.imgur.com/DTy9BJg.png)\n\n## TCP 中斷連線\nTCP 四次揮手，中斷連線\n```\n瀏覽器  --   \t\t      [確認收齊資料，申請關閉]  \t\t\t    --\u003e 伺服器\n瀏覽器 \u003c--     \t\t\t[申請通過，準備關閉]\t\t\t\t\t  --  伺服器\n瀏覽器  --   [收到關閉通知，回戳確認，等待一段時間後，瀏覽器端也關閉]   --\u003e 伺服器\n```\n\n- 從 [[Wireshark]] 來看過程發生什麼事： [[Wireshark#對應 TCP IP]]\n- 從 [[TCP IP]] 來看發生什麼事：[[TCP IP#傳輸 封包 的過程]]\n\n#internet #backEnd #request ","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/UDP-%E5%82%B3%E9%80%81":{"title":"Untitled Page","content":"### UDP 傳送\n比較 [[TCP 傳送（雙向溝通）]]\n不用三向握手，就是一直傳\n```\n瀏覽器  \u003c--   [傳資料]   -- 伺服器\n瀏覽器  \u003c--   [傳資料]   -- 伺服器\n瀏覽器  \u003c--   [傳資料]   -- 伺服器\n```","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/Wireshark":{"title":"Untitled Page","content":"# Wireshark \n- [wireshark 下載網址](https://www.wireshark.org/download.html) 、 [指令表](http://packetlife.net/media/library/12/tcpdump.pdf) \n## 介面\n### filter\n![](https://i.imgur.com/PMO44yx.png)\nWireshark 的 filter 功能，可以篩選特定封包\n### [[封包]]\n![](https://i.imgur.com/fmmQQ4b.png)\n 有網路傳輸的時候就可以看到有很多封包進來，每個封包會這樣一條一條進來\n ### 資訊\n![](https://i.imgur.com/ab7QoRh.png)\n\n裡面詳細資訊可以從這裡看\n\n#### 對應[[TCP IP]]\n- 網路連結層（的實體層）：第一行，對應的是實際用哪條光纖、哪個網路口做傳送的\n- 網路連結層：以太 Ethernet ，顯示對方與自己的網路卡的 [[MAC]]\n- 網路層：Internet Protocol Version 4 (IPv4)\n- 傳輸層：Transmission Control Protocol (TCP)，包含[[Port]]資訊\n\t- Port: 自己的 Port 跟對應對方的 Port\n- 應用層：Hypertext Transfer Protocol(HTTP)\n- Secure Socket Laye (SSL)： 如果有 [[HTTPs]] 就會有這行資訊\n- \n#### 實際上的格式\n ![](https://i.imgur.com/k41LCno.png)\n但事實上，封包內容都是以 16 進位儲存，使用這個格式跟共同網路規範有關（例如 [[TCP IP]]）\n## 常見指令\n```filter\n// 尋找來源 IP\nip.src== xxx.xxx.xxx.xxx\n// 或是（src = 來源 / dst = 目的地）\nip.src== xx.xx.xx.xx or ip.dst == xx.xx.xx.xx\n```\n\n[[Port]]\n```\n// port\ntcp.port == 80\n```\n\n```\n// 網路請求\nhttp.request.method==\"POST\"\n```\n\n不知道 IP 可以用這個指令可取得該網址的 [[IP]]\n```terminal\nping {該網址}\n````\n\n","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E7%B6%B2%E8%B7%AF/godaddy-%E8%B2%B7%E7%B6%B2%E5%9D%80%E6%80%8E%E9%BA%BC%E7%94%A8":{"title":"Untitled Page","content":"# godaddy 買網址怎麼用\n彩蛋週｜課程直播｜切版班 by Sz\n\n[網站上線全攻略](https://hackmd.io/WqYJs4b4SnCD9WeEG8MMVA?view)\n\n## 步驟\n1. 申請網址（godaddy）\n2. 代管（cloudflare）\n3. 管理 DNS，可以新增很多個導向網站\n4. 以導向 github 為例\n5. 加密\n6. 新增一律加密規則（免費版有三次）\n7. 主機\n8. 上線後搜尋引擎的設定（google search console）\n9. google analytics(GA) 觀察客戶行為\n10. SEO\n\n## 申請網址(godaddy)\n```\n名稱.頂級網域\n```\n市面上有很多地方可以買、也有代理商（不同網域）\n其實在哪買沒什麼差\n想續約要注意網址蟑螂\n::: warning\n`.com`, `.com.tw` 是公司用，可能會被檢舉\n:::\n\n### 購買步驟\n![](https://i.imgur.com/LKUyAFo.png)\n全部no thank you\n買純網址即可，他提供的加值服務可以透過下個步驟完成\n\n## 代管（cloudflare）（耐心）\n![](https://i.imgur.com/sq05zlE.png)\n- 加密 (SSL，可使用 https 協定)\n- DNS 導到不同網站\n- 可免費使用\n\n\n\n### 管理 DNS\n::: info\nDNS 讓你可以自訂網址，方便指向對應主機位置\n:::\n網路管理員-\u003e管理 DNS\n買好的網址前綴可以無限新增，來導向不同的位置\n![](https://i.imgur.com/zbhMze2.png)\n```\n可自訂新增的前綴.名稱.頂級網域\n```\n`www.買的網址` -\u003e某個主機\n`shop.買的網址` -\u003e某個主機(CNAME)\n\n#### CNAME\n可以再進入導向的網站後台設定，設定托管會連到哪個細部網頁\n\n#### 不同的前綴有不同功用\n|類型|功用|\n|-|-|\n|A|IP|\n|mx|信箱|\n|cname|例如 github|\n \n## 代管步驟\n1. 複製到 godaddy 網頁名稱伺服器\n2. -\u003e輸入自己的名稱伺服器(cloudflare)\n\n\n## 以導向 github 為例\n:::info\ngithub pages 本身有加密，但如果要自訂網址，則要自己準備（在 cloudflare）\n:::\n## custom domain（耐心）\n![](https://i.imgur.com/HF9s6zV.png)\n經由 CNAME 導入的 github，\n可以再到 github 的 custom domain 上去設定，讓他直接指回代管\n![](https://i.imgur.com/SFzNM4X.png)\n他會 publish 到沒有 https 的網址\n但因為 cloudflare 有提供\n記得在「規則」的地方自動轉成 https\n輸入記得要改成 https，就會有了\n![](https://i.imgur.com/S3vV9bI.png)\n:::    warning\n目前已知 bug\n重新 deploy 完會被導回預設網址，要重設定（耐心）\n:::\n## 回到 cloudflare\n### SSL/TLS\n跟 https 加密的設定有關\n### 規則\n可以設定一律用 https， github pages 就會成功加密了（免費版限三次）\n\n\n\n## 為什麼需要主機\n容量\n:::    info\ngithub 有容量限制（各repo 1G），真的太大的網站還是需要主機\n:::\n## 購買主機通路\n- emanager\n- heroku\n\n\n## google search console(耐心)\n檢查網站狀態\n1. 資源-\u003e新增資源\n![](https://i.imgur.com/I8GZXLv.png)\n2. 驗證需要再回 cloudflare 新增 txt 類型的驗證文字\n\n\n\n## 安裝 Google Analytics(GA) 追蹤流量\n分析顧客行為\n沒有買網域也可以用\n要貼一串到網站程式碼內\n![](https://i.imgur.com/faY7K5f.png)\n新增帳戶，再新增資源\n![](https://i.imgur.com/WR6wOBC.png)\n21:35\n\n## SEO\n:::danger\nh1 可以寫錯，但 title 不行\n:::\n```htmlembedded=\n\u003ctitle\u003e\n 本頁主題 - 分類 - 品牌\n\u003c/title\u003e\n```\n- \n- 每個頁面標題不該一樣\n- 本業主題該放最前面，而非品牌名\n- 數量要達 10 頁以上，Google 才會開始讓你的連結在搜尋引擎上曝光\n\n## 分析類似網站\nhttps://www.similarweb.com/ja/\n\n\n[[輕量化]]\n","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%88%E7%AE%97%E6%A9%9F%E6%A6%82%E8%AB%96":{"title":"計算機概論","content":"---\n# 電腦做什麼事情\n[前後端都該理解的計算機概論]( https://www.youtube.com/watch?v=QuCu4iDpPTU)\n[How Computers Work](https://www.youtube.com/playlist?list=PLzdnOPI1iJNcsRwJhvksEo1tJqjIqWbN-)\n## 流程\n```\nINPUT --\u003e [ STORAGE \u003c--\u003e PROCESSING ] --\u003e OUTPUT\n```\n\n### INPUT\n透過滑鼠、鍵盤、麥克風、攝影機等，作為電腦的接收器\n\n### STORAGE and PROCESSING\n電腦必須能儲存資料，並且經過一連串的指令(Algorithm)處理這些資料，等到這些儲存的資料都處理完，便可以送出\n\n### OUTPUT\n依照裝置的目的，可以輸出文字、影像、遊戲、虛擬實境、控制機器人等\n\n## [[網路]]\n```\nDevice \u003c-- I/O --\u003e INTERNET \u003c-- I/O --\u003e Device\n```\n在網路的影響下，不同的裝置可以互相成為彼此的輸出輸入\n\n## MEMORY and CPU\n![](https://i.imgur.com/mB6k8m0.jpg)\n暫存跟處理器\n\n![](https://i.imgur.com/SWgVQHp.png)\n- 執行緒 [[thread]]\n- [[程序 process]]：軟體\n- 一個程序會有一個專屬編號 (PID)\n\n![](https://i.imgur.com/aREzxtl.png)\n一個記憶體會有很多個[[程序 process]](多個軟體)在執行\n每個軟體會有多個等待執行的執行緒 [[thread]]\n由[[作業系統 OS]]來規劃該如何執行\n```\n開啟一個軟體","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E4%BA%8C%E9%80%B2%E4%BD%8D":{"title":"二進位","content":"# 二進位\n![](https://i.imgur.com/YQMx45U.jpg)\n\n## ON/OFF\n一條電線可以處理的資訊為：ON/OFF\n這讓電子訊息可以處理很多二元的訊息，例如 1/0, TRUE/FALSE, YES/NO\n這樣的二元訊息就是一個 bit\n![](https://i.imgur.com/LJPUAGj.jpg)\n如果有更多的電線，就可以處理更複雜的訊息\n## Binary Digits(bit)\n0, 1\n\n## Byte\n```\n1 Byte = 8bits\n2**8 = 256\n```\n\n#computer","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-OS":{"title":"作業系統 OS","content":"## 作業系統 OS\n負責控制哪些 [[thread]] 需要先被執行，CPU OS 排程\n\n#computer","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/%E8%A8%BB%E8%A7%A3/%E7%A8%8B%E5%BA%8F-process":{"title":"程序 process","content":"# 程序 process\n- 一個程序會有一個專屬編號 (PID)\n- 一個程序裡面會有很多的執行緒，等待被執行\n\n#computer","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E8%A8%88%E7%AE%97%E6%A9%9F/thread":{"title":"thread","content":"# 執行緒 thread\n- JS 是一種 single-thread 語言\n- [[計算機概論]]：[[作業系統 OS]] 會決定執行緒的運作優先程度，且一個軟體可以產生多個 thread\n\n#computer #js","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/%E9%82%84%E6%B2%92%E5%BB%BA%E7%AB%8B%E5%89%8D%E7%AB%AF%E5%89%8D%E7%94%A8-Postman-POST-%E8%AB%8B%E6%B1%82":{"title":"還沒建立前端前，用 Postman POST 請求","content":"# 還沒建立前端前，用 Postman POST 請求\n在後端測試（登入系統）的時候，可以用 Postman 來發出請求看看\nBody -\u003e raw -\u003e 格式選 JSON 來發出\n![](https://i.imgur.com/lBPPQs4.png)","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/frontend/.navbar-brand":{"title":"Untitled Page","content":"","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/.navbar-nav":{"title":"Untitled Page","content":"","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Discord/carl.gg-%E5%BB%BA%E7%AB%8B%E8%BA%AB%E5%88%86%E7%B5%84%E9%98%B2%E6%AD%A2-discord-%E6%B4%97%E7%89%88":{"title":"carl.gg 建立身分組防止 discord 洗版","content":"---\n# carl.gg\n![](https://i.imgur.com/MoCy4wt.png)\n\ncarl. gg 可以透過回應表符的方法，來讓成員加入想要的身分組，可以做到的效果像是\n- 不用管理員設定，成員自己選擇要加入什麼身分組\n- 管理員可以按照身分組區分私人頻道，防止伺服器變大之後，避免成員被不感興趣的頻道洗版\n\n這個機器人可以做到其他很多效果，這邊就只針對回應表符指定身分組的功能做說明\n\n## 邀請機器人到伺服器\n登入完後選擇你要加入機器人的伺服器（你必須是管理者或有管理權限）\n![](https://i.imgur.com/XpHhGlB.png)\n確定伺服器正確後「繼續」\n![](https://i.imgur.com/RVKzwH2.png)\n以下清單是他會要有的權限，如果你本身沒有更動這些權限的權限（？）的話，後續安裝會有些問題，ok 後「授權」，結束後會有個不是機器人驗證\n![](https://i.imgur.com/V9jgFmV.png)\n## 快速導覽（可跳過）\n進到快速開始的導覽（可以直接跳過）\n![](https://i.imgur.com/PlpWqic.png)\n設定打指令的時候前綴字，可跳過\n![](https://i.imgur.com/FsBpaP8.png)\n用戶進到你的伺服器時顯示的招呼語，可跳過\n![](https://i.imgur.com/yfG862R.png)\n\n示範怎麼建立連結身分組的投票區塊\n新增任何一個都會幫你自動建立對應的身分組，如果他的選項不合你使用，可跳過晚點自己建\n![](https://i.imgur.com/1IkVCBX.png)\n沒特別研究，就照他的建立新的 muted role（create new role）\n![](https://i.imgur.com/9fZ1HJQ.png)\n沒特別研究，可跳過\n![](https://i.imgur.com/AplUMBx.png)\n快速導覽完成頁面\n跟你推薦一下他們另一個機器人，是累積貢獻值的系統，有需要才裝\n![](https://i.imgur.com/3Pp1vZa.png)\n## 設定畫面\n### 編輯機器人名稱\n進去設定畫面後，這裡可幫機器人編輯名稱\n![](https://i.imgur.com/lnKzmIN.png)\n### Reaction roles\n以下會講解這些內容在哪裡設定\n![](https://i.imgur.com/k4e009Q.png)","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Fork":{"title":"Fork","content":"取得一個 copy，可以隨意更動，不會影響到原作者的檔案","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%B4%B9":{"title":"版本控制介紹","content":"# Version Control System (VCS)\n版本控制\n管理做過的歷史紀錄\n\n\n\n### 沒有 VCS 的作法\n**傳統作法**：另存檔案，把不同版本存在另一個資料夾\n**缺點**：都是手動進行，容易出錯，到最後也稿不清楚寫到哪個版本了 error prone\n\n\n## RCS\n曾經有名的 local 版本控制系統（至今還有很多電腦在使用），會散落在不同電腦\n安裝[[開發]]者[[工具包]]之後就有`rcs`指令可用，透過讀取不同的[[版本控制介紹#patch set 補丁]]就可以產生不同的版本資料\n\n\n### patch set\n補丁\n檔案中被更改的片段，套用不同的 patch set 就可以重新產生每個版本的內容\n\n## CVCSs\nCentralized Version Control Systems\n後來因為與使用不同系統、裝置的團隊[[協作]]的需求漸增，中心化的版本控制也隨之誕生\n- CVS\n- Subversion\n- Perforce\n\n\n有單一的 server 來保管所有版本資料\n**缺點**：server 掛了就全掛\n\n## DVCs\n[[分散式]]版本控制 Distributed Version Control Systems\n- [[Git 特徵]]\n- Mercurial\n- Bazaar \n- Darcs\n\n每個 client 都會鏡像保存完整的歷史版本，server 掛了也沒事\n\n\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Git-%E7%89%B9%E5%BE%B5":{"title":"Git 特徵","content":"# 版本的紀錄方式\n## Git: Snapshot\n[[git commit]] 的時候會記錄當前檔案樣子 snapshot ，只要檔案沒有變更，就不會儲存他，而是不動將原檔案參照到新版本內。\n### 其他：差異\n記錄每個版本的更新資訊\n\n\n## 快速\n由於檔案都會完整的在本機內，所以不需要像[[版本控制介紹#CVCSs]]一樣受到[[網路]][[延遲]]影響。\n\n## 檢查完整性\n所有儲存前都會被計算校驗碼(checksum)，在 Git 資料庫內，檔案都是用這個碼的形式來儲存的\n任何更改或是毀損都沒無法瞞過 Git\n\n## 只增不減\n通常只會增加資料，所以很難做出讓系統無法復原的動作\n只要 commit 了 snapshot 之後，檔案很難遺失，特別是如果將這個 repository push到其他 repository。\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Git-%E8%AA%95%E7%94%9F":{"title":"Git 誕生","content":"### Linux kernel\n- 在 1991-2002 幾乎都是透過 [[版本控制介紹#RCS]] 的 [[版本控制介紹#patch set]] 或是壓縮檔來做[[版本控制介紹]]的\n- 2002 開始採用 BitKeeper 的[[版本控制介紹#DVCs]]系統。（商用）\n- **2005** 自行開發\n\t- 快速\n\t- 簡潔\n\t- 完整支援非線性開發（branches）\n\t- 完全的分散式系統\n\t- 可有效處理大規模的專案\n\t\n\t\n\t#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E4%BA%8B%E5%89%8D%E7%90%86%E8%A7%A3/Working-Tree":{"title":"Working Tree","content":"# Working Tree\n中文稱 Git 資料夾\n代表一個版本的一連串流程，從專案當中取出的獨立版本可以在本機編輯\n![working tree](https://w3c.hexschool.com/img/72316309_2739111376108490_535994150261096448_n1fkzgd.jpg)\n![工作目錄，預存區及 Git 資料夾。](https://git-scm.com/book/en/v2/images/areas.png)\n- Working Directory\n\t- 在這裡編輯\n- Staging Area\n\t- 在這裡決定下次要 commit 哪些更動\n- Git Directory (Repository)\n\t- 將更動儲存為 snapshot 正式 commit 於此\n\n## Three States\n### modified\n已修改：但尚未 commit 到 database\n### staged\n已預存：標記一個已經 modified 的資料，會存到下次 commit 到 snapshot 中\n### committed\n已提交：已經安全的存在本機 database\n\n\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E4%BE%86%E6%BA%90":{"title":"來源","content":"https://git-scm.com/book/zh-tw/v2\nhttps://w3c.hexschool.com/git/dba36bc5","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/%E9%81%A0%E7%AB%AF-Repository":{"title":"遠端 Repository","content":"# 遠端 Repository\n## 連接遠端 repo\n在 push 之前，git 只有在本機的 git 運作，\n若資料要儲存在網路上，則需要連到遠端的 repo，有兩種方法\n- [[本機 Repository#進行版本控制]] -\u003e [[git remote add]]\n- [[git clone]]：[[遠端 Repository]] 下載\n\n## 更新本機 repo 內容\n多人協作時，有人更新了 repo （位於遠端）後使用 [[git pull]] 來更新本機的資料\n- [[git pull]]\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/Github-Pages":{"title":"Github Pages","content":"# 取得靜態網頁\n建立靜態網頁\nSettings\u003eGithub Pages\u003eSource\u003e\u003c選擇分支\u003e\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-clone":{"title":"git clone","content":"## 遠端新增數據庫，抓下來用\n由於會自動綁定好，可以視為另一種取得 remote repo 的方法\n\n1. github 新增 repo(remote) \n2. 新增 readme 等檔案\n3. clone 到本機\n```shell\ngit clone \u003curl\u003e\n```\n\u003e clone 完後不需重新執行 [[git init]]，也不用執行 [[git remote add]]\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-pull":{"title":"git pull","content":"# （遠端他人更新後）更新本機 repo 的內容\npull 為將遠端 repo 抓下來，到其他人的本機 repo 的方法\n與 [[git clone]] 不同的部份是，他是抓更新的部分，這樣可以維持多人協作時的同步更新\n```shell\ngit pull \u003curl\u003e\n```\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/%E9%81%A0%E7%AB%AF-Repository/git-remote-add":{"title":"git remote add","content":"## 現存本機 repo 加入到遠端 repo\n```shell\ngit remote add origin https://github.com/Szyln/Joanne.CV.git\ngit branch -M main\ngit push -u origin main\n```\n\n1. 在 github 新增 repo（遠端）\n2. 為已存在的本機 repo 連上遠端 repo，並新增 branch\n```shell\ngit remote add \u003c遠端數據庫簡稱\u003e \u003curl\u003e\ngit branch -M main\n```\n3. 檢查是否連上，觀看遠端數據庫列表\n```shell\ngit remote\n```\n4. push 資料上去\n```shell\ngit push -u \u003c遠端數據庫簡稱\u003e main\n```\n\u003e`-u`: upstream\n\n-   觀看遠端數據庫列表：`git remote`\n-   觀看遠端數據庫列表(包含 rul)：`git remote -v`\n-   下載遠端數據庫：`git clone \u003curl\u003e`\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/%E6%9C%AC%E6%A9%9F-Repository":{"title":"本機 Repository","content":"## 本機 Repository\n### 進行版本控制\n- [[git init]]：初始化，資料夾執行一次\n- [[git add(track)]]：track，有新檔案就要執行\n- [[git commit]]：提交更新，要更新版本內容就要執行\n\n### 其他功能\n- [[git status]]：查看 [[git add(track)]] 狀態\n- [[git log]]：查看 [[git commit]] 記錄\n- [[gitignore]]：建立不會被 [[git add(track)]] 的檔案列表\n\t- [[node 的 gitignore 設定]]（後端）\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/Branch":{"title":"Branch","content":"# Branch\n新增 branch\n```shell\ngit branch login(一個分支的名稱)\n```\n\n移動到該 branch\n```shell\ngit checkout login\n```\n:::info\ncheckout 可以讓你在不同 branch 的版本間做切換\n:::\n## 與原本的 branch 做合併\n:::warning\n一定先 add, commit， 後 merge\n:::\n如果在新 branch 裡面做了 commit（目前不會影響到主 branch\n```shell\ngit add .\ngit commit -m \"login commit\"\n```\n\n回到主 branch，與新 branch 做 merge\n```shell\ngit checkout main\ngit merge login\n```\n\n## merge conflict\n![](https://i.imgur.com/je8HfGW.png)\n 當新分支與主分支同時被修改時，merge 功能會因為不知道該取捨哪個修改，所以必須先處理掉 conflict 狀態才能 merge\n ![](https://i.imgur.com/88WDGGs.png)\n決定完之後，需再重新執行 add, commit\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/Repository":{"title":"Repository","content":"# Respository \n在[[Working Tree]]中 Respository 分為兩種\n- [[本機 Repository]]\n- [[遠端 Repository]] (Github, Bitbucket)\n\n\n\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-addtrack":{"title":"git add(track)","content":"## Track\n只有[[git init]]還不會產生效果，需要將裡面的檔案 track 起來，才能追蹤到他們的變化，之後[[git commit]] 的時候就會把他們提交出去了\n### 全體 track\n```shell\ngit add .\n```\n### track 特定副檔名檔案\n```shell\ngit add *.html\n```\n### 移除 stage 狀態\n```shell\ngit rm --cached \"檔名\"\n```\n\n\n之後可以用 [[git status]] 再檢查目前狀態\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-commit":{"title":"git commit","content":"# 提交\n```shell\ngit commit -m \u003c提交訊息\u003e\n```\n\ncommit 時附上資訊後會再刷新 `UnModified` 狀態（沒有修改過）\n\n`UnModified` 代表 staged 之後沒有再改過\n`Modified` 代表 staged 之後有再改過\n`commited` 代表確定 staged 要同意更改\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-init":{"title":"git init","content":"## 初始化\n針對需要產生 Git 的資料夾執行\n```shell\ngit init\n```\n會產生一個隱藏資料夾：`.git`\n\n\u003eMAC 的話，對該資料 `cmd+shift+.` 就可以看到隱藏資料夾囉（[MAC 叫出隱藏檔案](https://macuknow.com/2017/08/26/1428/%e4%b8%89%e6%8b%9b%e8%ae%93-mac-%e9%a1%af%e7%a4%ba%e5%87%ba%e9%9a%b1%e8%97%8f%e6%aa%94%e6%a1%88/)）\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-log":{"title":"git log","content":"## 查更新記錄\n```shell\ngit log\n```\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/git-status":{"title":"git status","content":"### git status\n檢查目前狀態\n```shell\ngit status\n```\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/gitignore":{"title":"gitignore","content":"## .gitignore\n一個神秘的小檔案\n裡面可以輸入不想要被 git 偵測的檔案\n```\nlog.txt\njustForTest.html\n資料夾/\n```\n\n[Ignoring Files and Folders](https://sodocumentation.net/git/topic/245/ignoring-files-and-folders)\n\n\u003e[[node 的 gitignore 設定]]\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E5%9F%BA%E7%A4%8E/Repository/push":{"title":"push","content":"---","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/%E5%AE%89%E8%A3%9D":{"title":"安裝","content":"# 安裝管道\n## Mac 版本\n在 terminal 直接輸入 `git`，如果沒有安裝，他就會提醒你安裝（燈楞）\n沒安裝就輸入：`$ brew install git`\n\n## 圖形化版本\n在  [Github](http://mac.github.com) 上下載\n\n## 從原始碼安裝\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/%E5%BB%BA%E7%BD%AE":{"title":"建置","content":"# 設定\n`git config` ：指向一個資料夾，裡面就是你的 git 設定\n這些設定只需要做一遍\n\n## 讓 Git 認識你\n需要設定的有：使用者名稱、email（輸入後無法再更改）\n1. 先輸入 `git config --list`確認有沒有設定過（如果有用過類似 github 的軟體的話就不用再設定了）\n\n2. 沒有的話就輸入\n```console\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n\n3. 再確認 git 真的認識你了\n```shell\n$ git config --list\n```\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/Git/Git":{"title":"Git","content":"# Git\n- [[Git/環境建置/安裝]]\n- [[Git/環境建置/建置]]\n\n\n## 連接遠端版本控制\n兩種方法\n- [[本機 Repository#進行版本控制]] -\u003e [[git remote add]]\n- [[git clone]]\n\n\u003e- [[Repository]]\n\u003e\t- [[本機 Repository]]\n\u003e\t- [[遠端 Repository]]\n\n\n## 多人協作\n- [[git pull]]：更新本機既有 repo\n\n\n#git","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/ECMA":{"title":"ECMA","content":"歐洲的電腦廠商協會\n#js #intro","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/JavaScript":{"title":"JavaScript","content":"# JavaScript\n- [[JavaScript 介紹]]\n-","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/Library-%E8%B7%9F-Framework-%E7%9A%84%E5%B7%AE%E5%88%A5":{"title":"Library 跟 Framework 的差別","content":"---\n# Library 跟 Framework 的差別\n| Library   | Framework            |\n|","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E4%BB%8B%E7%B4%B9/Strongly-Weakly-type-Language":{"title":"Strongly Weakly type Language","content":"# Strongly Weakly type Language\n## Strongly\nJava, Ruby...\n## Weakly\nJS, C語言...\n\n#js #intro","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/%E5%91%BD%E5%90%8D%E7%BF%92%E6%85%A3-Naming-Convention":{"title":"命名習慣 Naming Convention","content":"# 命名習慣 Naming Convention\n## 習慣開頭大寫\n\n- [[const]]\n- 物件導向的 [[Constructor]]\n\n#js #intro","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/comment":{"title":"comment","content":"# Comment\n- 多行\n- 單行\n\n## 單行\ncmd + /\n```js\n// 我是註解\n```\n\n## 多行\n1. 第一種\n```js\n/* \n多行\n*/\n```\n\n2.在 vs 打 `/**`\n```js\n/** */\n// 中間空白按 enter 就可以輸入了\n```\n\n#js #intro","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/flow":{"title":"flow","content":"# flow\n## 操作流程\n-   拆解任務\n-   流程設計\n- [[原始資料類型 Primitive Data Types]]\n\n\n## 撰寫步驟\n\n-   全域變數\n-   初始化\n\n#js #intro","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E5%AF%A6%E4%BD%9C%E6%B5%81%E7%A8%8B%E7%9B%B8%E9%97%9C/use-strict-%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F":{"title":"use-strict 嚴格模式","content":"# 嚴格模式 use strict\n[JavaScript 的嚴格模式 \"use strict\"](https://ithelp.ithome.com.tw/articles/10191736)\n使撰寫語法的時候，如果用了不嚴謹的寫法，會跳出錯誤提示\n## 使用方法\n### 在全域下\n```js\n// 在全域直接寫\n'use-strict';\n\n// 開始寫程式碼\n```\n\n### 在 [[function]] 下\n```js\nfunction fn() {\n\t'use-strict';\n\t\n\t// 開始寫 function 內容\n}\n```","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E5%9C%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E5%8E%9F%E7%94%9F%E4%B8%8B%E9%81%8B%E8%A1%8C%E6%A8%A1%E7%B5%84":{"title":"在瀏覽器（原生）下運行模組","content":"## 如何在原生環境下運行\n加入 `type=\"module\"` 即可\n``` html =\n\u003cscript type=\"module\"\u003e\u003c/script\u003e\n```\n\n#js #module","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E6%A8%A1%E7%B5%84":{"title":"模組","content":"# 模組\n- 可被重複利用的 JS 功能 (functionality)\n- 可由單個或多個 JS 檔案所組成\n- 可以簡單也可以繁複\n\n[[取得 Node.js 裡的模組]]\n\n#js #module","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%8A%E9%81%8B%E8%A1%8C-ES-%E6%A8%A1%E7%B5%84":{"title":"瀏覽器上運行 ES 模組","content":"# 在瀏覽器運行 ES 模組\n## 為何模組化\n[[JS 模組化的由來與目的]]\n\n## 方法\n[[在瀏覽器（原生）下運行模組]]\n\n## 匯出\n匯入前要先匯出，原則上都是在 JS 上進行\n### 預設匯出：defaultExport.js\n常見的匯出方式，通常用於匯出物件，在 Vue 開發中可用來匯出元件\n- 只能匯出一個\n``` javascript=\nexport default\n```\n### 具名匯出：namedExport.js\n可用於匯出已定義的變數、物件、函式，專案開發中通常用於 “方法匯出”\n第三方的框架、函式、套件很常使用具名定義 “方法”\n- 可以匯出多個\n``` js\nexport const XXX = ... // 多個，具名\n```\n## 匯入\n在 HTML, JS 匯入都有\n### 預設匯入\n因為本身沒有名稱，可自訂\n``` js\nimport 自訂名稱 from ..\n```\n### 具名匯入\n```js\nimport {具名名稱} from ..\n```\n\n## 實例\n### 預設匯出匯入\n預設匯出，建立一個 export.js 檔\n```js\nexport default {某個元件內容}  // 不包含該元件的名稱\n```\n預設匯入\n```html\n\u003cscript type=\"module\"\u003e\n  import newComponent from 'export.js';\n  newComponent.init();\n\u003c/script\u003e\n```\n\n### 具名匯出匯入\n建立一個 export2.js 檔\n```js\nexport const a = 1;\nexport function b() {\n  ..\n}..\n```\n#### 單一匯入（建議）\n```html\n\u003cscript type=\"module\"\u003e\n  import { a, b } from 'export2.js';\n  console.log(a);\n  b();\n\u003c/script\u003e\n```\n\n#### 全部匯入（不建議，較難除錯）\n```html\n\u003cscript type=\"module\"\u003e\n  import * as all from 'export2.js';  // 避免名稱的衝突，會賦予在一個物件(all)上面\n  console.log(all.a);\n  all.b();\n\u003c/script\u003e\n```\n\n#js #vue #module","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E6%A8%A1%E7%B5%84/%E7%8F%BE%E8%A1%8C%E7%9A%84-ES-%E6%A8%A1%E7%B5%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7":{"title":"現行的 ES 模組使用技巧","content":"# 現行的 ES 模組使用技巧\n## 作用域\n每個 `type=\"module\"` 的作用域都是獨立的\n### 非模組的狀況\n```html\n\u003cscript\u003e\nvar a = 1;\t\t// 設置全域 a 變數\nwindow.b = 2;\t// windows b 屬性\n\u003c/script\u003e\n\n\u003cscript\u003e\nconsole.log(a); // 讀取不到\nconsole.log(b);\t// 讀取不到\n\u003c/script\u003e\n\n```\n\n### 模組的狀況\n```html\n\u003cscript type=\"module\"\u003e\nvar a = 1;\t\t// 設置全域 a 變數\nwindow.b = 2;\t// windows b 屬性\n\u003c/script\u003e\n\n\u003cscript type=\"module\"\u003e\nconsole.log(a); // 讀取不到\nconsole.log(b);\t// 讀到了！（不建議\n\u003c/script\u003e\n\n```\n## 可以運用的 ESM 套件\n網路上有很多版本的 ESM 套件\n\u003e [ESM module](https://cdnjs.com/libraries/vue)\n\u003e [Vue 的 Getting Started 的語法](https://v3.vuejs.org/guide/introduction.html#declarative-rendering)\n\n```html\n\u003cscript type=\"module\"\u003e\n  import { createApp } from 'https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.esm-browser.min.js'    // esm-browser 是給瀏覽器運行用的 ESM 版本\nconst Counter = {\n  data() {\n    return {\n      counter: 0\n    }\n  }\n}\n\n// 決定畫面要在哪裡呈現\ncreateApp(Counter).mount('#app')  \n\u003c/script\u003e\n```\n```html\n\u003cdiv id=\"app\"\u003e  // .mount('#app')指定渲染於此\n  Counter: {{ counter }}\n\u003c/div\u003e\n```\n\n#js #vue #module","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E6%A8%A1%E7%B5%84/JS-%E6%A8%A1%E7%B5%84%E5%8C%96%E7%9A%84%E7%94%B1%E4%BE%86%E8%88%87%E7%9B%AE%E7%9A%84":{"title":"JS 模組化的由來與目的","content":"# JS 模組化由來與目的\n## 由來\n1. 早期：JS 多半不大，瀏覽器可以輕鬆運行\n2. 演進：JS 隨著進化**越來越大**，有了將程式碼輕巧化的需求\n3. 先是框架：框架開始支援編譯模組化\n4. 現在：大多已支援原生環境（瀏覽器）運行\n\n## 目的\n強大的功能固然好，但大部分時候我們不需要一次擁有那麼多\n通常我們只會買我們需要的東西，不會把整家店包下來\n\n#js #vue #module","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP":{"title":"物件導向 OOP","content":"# 物件導向\n## [[Execution Context]]\n- Global Execution Context\n- Function Execution Context\n\n\n## Funciton 都是物件\n\n## [[Constructor]]\n[[Constructor]] 可以重複生成相似物件\n## [[Prototype]]\n[[Prototype]] 可以將屬性共享給多個物件\n## [[Prototype Inheritance]]\n## [[Class]]\n## [[static：僅給 class 內部用的變數]]\nClass 內部呼叫用屬性與方法\n\n#js #advanceJs #object #oop","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/%E5%8E%9F%E5%A7%8B%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B%E4%BD%BF%E7%94%A8-Prototype-Inheritance-%E7%9A%84%E5%8A%9F%E8%83%BD":{"title":"原始資料類型使用 Prototype Inheritance 的功能","content":"# 原始資料類型使用 Prototype Inheritance 的功能\n## Coercion\n[[原始資料類型 Primitive Data Types]]沒有自己的 methods，但因為 JS 有 Coercion 的特性，就算不是物件，也可以使用物件繼承來的功能。 \n## 示範\n[[原始資料類型 Primitive Data Types#Primitive Coercion]]\n\n不推薦：可以透過 [[Constructor]] 的方法去做[[原始資料類型 Primitive Data Types#Primitive Coercion#不正常的作法]]物件類型的 string\n推薦：利用 Coercion 的特性，讓原始資料類型讀取 prototype\n\n#js #advanceJs #object #oop #dataType #primitiveDataType","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/Class":{"title":"Class","content":"# Class\n\n- 改善 [[Prototype Inheritance]] 的繁複寫法的語法糖，本質不變\n- 可以理解為：類、模版\n- 可以簡化 [[Constructor]] 跟 [[Prototype]] 的建立\n\n## 會用到的功能\n### 原 Class\n```js\nclass 原本的 {\n\tconstructor(參數們) {\n\t\t// 物件實例的屬性們\n\t}\n\t\n\t// prototype\n\t函數() {\n\t\t// 共用的功能\n\t}\n}\n```\n### 繼承的 Class\n```js\nclass 繼承的 extends 原本的 {\n\tconstructor(參數們, 新的參數們) {\n\t\tsuper(原本的參數們);\t\t\t// 離散數學的名詞，super 代表母集合\n\t\t// 新物件實例的屬性們\n\t}\n\t\n\t// prototype\n\t新函數() {\n\t\t// 新的 class 共用的功能\n\t}\n}\n```\n## [[Prototype Inheritance#原有的]] 改寫\n[[Constructor]] 與 [[Prototype]] 直接寫在 [[Class]] 裡面\n```js\nclass Person {\n\tconstructor(name, age, height) {\n\t\tthis.name = name,\n\t\tthis.age = age,\n\t\tthis.height = height\n\t\n\t}\n\t\n\t// Prototype\n\tsayHi() {\n\t\tconsole.log(this.name + \" says hi.\");\n\t}\n}\n\nlet Mike = new Person('Mike', 20, 150);\nlet Sam = new Person('Sam', 21, 190);\nconsole.log(Mike.sayHi() === Sam.sayHi())\t// true\n```\n\n## [[Prototype Inheritance#繼承的]] 改寫\n繼承的 [[Class]] 使用 extends 來連結到原本的\n```js\nclass Student extends Person {\t\t\t\t\t\t// 從 Person 繼承\n\tconstructor(name, age, height, major, grade) {\t// 新增兩個新的參數\n\t\tsuper(name, age, height);\t\t\t\t\t// 繼承的部份用 super\n\t\tthis.major = major,\t\t\t\t\t\t\t// 新的屬性\n\t\tthis.grade = grade\n\t\n\t}\n\t\n\t// 新的 Prototype（舊的自動繼承）\n\tstudy() {\n\t\tconsole.log(this.name + \" is studying.\");\n\t}\n}\n```\n\n#js #advanceJs #object #oop","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/Prototype-Inheritance":{"title":"Prototype Inheritance","content":"# Prototype Inheritance\n我們自己可以設定一個 object，但也可以去讀取裡面沒有設定的 methods，原因是因為有從 prototype 的預設功能繼承\n\n## 原有的\nConstructor 負責放每個物件物件內容都不一樣的部份\n一樣的部份就放到 Prototype 裡面，節省記憶體\n繼承時兩個部分都要處理\n### [[Constructor]]\n```js\n// Constructor\nfunction Person(name, age, height) {\t// 大寫開頭\n\tconsole.log(this);\t\t\t\t\t// 指向 object\n\tthis.name = name,\n\tthis.age = age,\n\tthis.height = height\n\n}\n\nlet StudentSam = new Student(\"Sam\", 20, 140)\t// this 指物件本身\n```\n\n### [[Prototype]]\n```js\n// 共用的函數拉出來到 prototype 內\n// 注意是 simple call\nPerson.prototype.sayHi = function() {\n\tconsole.log(this.name + \" says hi.\");\t// 目前 this 指向全域\n}\n```\n\n## 繼承的\n### Constructor\n使用[[置換函數的 this 指向#call]] 的方式，繼承[[Prototype Inheritance#原有的#Constructor]]（但目前 Prototype 沒有被繼承）\n```js\n// 從 Person 繼承過來的新 Constructor\n// 用 call 將 Person 繼承過來\n// 新增兩個只有 Student 才有的參數\nfunction Student(name, age, height, major, grade) {\n\n\t// 將原本的 this 置換成這裡的 this\n\tPerson.call(this, name, age, height, major, grade); \t// 更新 this 的指向\n\tthis.major = major,\n\tthis.grade = grade\n\t\n}\n\nlet StudentSam = new Student(\"Sam\", 20, 140, \"math\", 2);\t// this 指物件\n```\n#### 備註：沒效率的作法\n```js\n// 從 Person 繼承過來的新 Constructor\n// 把 Person 的內容照抄過來\nfunction Student(name, age, height, major, grade) {\n\tthis.name = name,\n\tthis.age = age,\n\tthis.height = height,\n\t\n\tthis.major = major,\n\tthis.grade = grade,\n\t\n}\nlet StudentSam = new Student(\"Sam\", 20, 140, \"math\", 2);\t// this 指物件\n```\n### [[Prototype]]\n接下來處理 [[Prototype Inheritance#原有的#Prototype]]，使用 [[create()]] 增加可讀性，必且讓新 Constructor 的 prototype 等同於原 Constructor\n```js\n// 讓新 Constructor 的 prototype 等同於原 Constructor\nStudent.prototype = Object.create(Person.prototype);\n\n// 也可以繼續新增 Student 獨有的 Prototype\nStudent.prototype.study = function() {\n\tconsole.log(\"I'm studying\");\n} \n\nlet Mike = new Student(\"Mike\", 10, 140, \"Design\", 1);\n```\n#### 備註：沒效率的作法\n手動把 Student 新增 prototype，但這樣會導致修改 Prototype 的時候，每行都要修改(`Person.prototype.sayHi` 跟 `Student.prototype.sayHi`...)\n\n```js\nStudent.prototype.sayHi = function() {\n\tconsole.log(this.name + \" says hi.\");\n}\n```\n\n#js #advanceJs #object #oop","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/%E7%B9%BC%E6%89%BF/create":{"title":"create()","content":"# create ()\n在不建構 [[Constructor]] 的情況下也可以從物件實例新增其他物件實例\n\n```js\nlet person2 = Object.create(person1);\n```\n\n#js #advanceJs #object #oop","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/Constructor":{"title":"Constructor","content":"# Constructor Function\n可以重複生成相似物件的功能\n\n## 使用規則\n```js\nfunction Person(name, age, height) {\t// 大寫開頭\n\tconsole.log(this);\t\t\t\t\t// 指向 object\n\tthis.name = name,\n\tthis.age = age,\n\tthis.height = height\n\tthis.sayHi = function() {\n\t\tconsole.log(this.name + \" hi.\")\n\t}\n}\n\nlet Sam = new Person(\"Sam\", 10, 100);\t// new 建立空物件\n\n\n```\n- 使用大寫開頭（[[命名習慣 Naming Convention]]）\n- 使用 [[new]] 字(reserved words)\n\n\n### 如果不使用 new 的話\n```js\nfunction Person(name, age, height) {\n\tconsole.log(this);\t\t\t\t\t// 指向 window\n\tthis.name = name,\n\tthis.age = age,\n\tthis.height = height\n}\n\nlet Sam = Person(\"Sam\", 10, 100);\t\t\nconsole.log(Sam);\t\t\t\t\t\t// undefined\n\n\n```\n\n## 記憶體\n用 Constructor 製作出來的物件，每一個都是不同的記憶體空間，但有些物件的屬性不希望一直複製，會使用 [[Prototype]]\n\n#js #advanceJs #object #oop","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/Prototype":{"title":"Prototype","content":"# Prototype\n一個物件，包含共用的 properties 和 methods，可以供所有繼承的[[物件實例]](instances) 讀取（都放在同一個記憶體）\n\n```js\n// Constructor\nfunction Person(name, age, height) {\t// 大寫開頭\n\tconsole.log(this);\t\t\t\t\t// 指向 object\n\tthis.name = name,\n\tthis.age = age,\n\tthis.height = height\n\t\n\t// 從 constructor 拿出，放到 prototype 來共用\n\t// this.sayHi = function() {\n\t//\tconsole.log(this.name + \" hi.\")\n\t//}\n}\n\nPerson.prototype.sayHi = funciton() {\t// 新增 prototype 屬性\n\tconsole.log(this.name + \" says hi.\")\n}\n\nlet Sam = new Person(\"Sam\", 10, 100);\t// new 建立空物件\nlet Mike = new Person(\"Mike\", 12, 200);\t// new 建立空物件\n\nconsole.log(Sam.sayHi === Mike.sayHi)\t// true，都是從 prototype 讀取\n\n\n```\n\n## [[Prototype Inheritance]]\n用語法糖代替來寫\n## [[Class]]\n#js #advanceJs #object #oop","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/new":{"title":"new","content":"# new\n一種 JS 的 reserved word\n\n## 功能\n 創造一個空物件\n \n #js #advanceJs #object #oop","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-OOP/static%E5%83%85%E7%B5%A6-class-%E5%85%A7%E9%83%A8%E7%94%A8%E7%9A%84%E8%AE%8A%E6%95%B8":{"title":"static：僅給 class 內部用的變數","content":"# Static 的 properties, methods\nStatic 的屬性與方法僅供 class 內部做呼叫，不會拿來給物件實例做呼叫\n```js\nclass Circle {\n\tstatic pi = 3.1415926535;\t\t\t\t\t\t\t// static properties\n\tstatic getAreaFormula() {\t\t\t\t\t\t\t// static methods\n\t\tconsole.log(\"r * r * 3.14\");\n\t};\n\t\n\tconstructor(radius) {\n\t\tthis.radius = radius\n\t}\n\t\n\tgetArea() {\n\t\treturn this.radius * this.radius * Circle.pi;\t// 呼叫 static\n\t}\n}\n\nlet cl = new Circle(10);\nconsole.log(cl.getArea());\n```\n\n#js #advanceJs #object #oop #class","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E5%88%9D%E5%A7%8B%E5%8C%96initializer":{"title":"初始化(initializer)","content":"# 初始化 (initializer)\n宣告後**賦值**的動作，宣告後沒有初始化的 const 是不能使用的\n```js\nvar a;\t\t// 未初始化\nlet b;\t\t// 未初始化\nconst c;\t// 未初始化\n\nconsole.log(a);\t\t// undefined\nconsole.log(b);\t\t// undefined\nconsole.log(c);\t\t// error\n```\n\n#js #variable #scope","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E6%9A%AB%E6%99%82%E6%80%A7%E6%AD%BB%E5%8D%80TDZ":{"title":"暫時性死區(TDZ)","content":"# 暫時性死區 (TDZ)\n暫時性死區指的是 `let`, `const` 在**未宣告**時，使用會出現 error 的狀況\n[[var, let, const 的作用域#重複宣告的狀況#let]]\n\n#js #variable #scope","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/%E8%AE%8A%E6%95%B8-variables":{"title":"變數 variables","content":"# 變數\n有三種變數\n## declaration 宣告\n- let\n- [[const]]\n- var（不建議用）\n\n## assignment 指派\n`=`：指派，右邊指派到左邊，不是等於\n`let` 宣告完可以再指派，`const` 不行\n\n```js\nlet x = 10;\nx = 5;\n```\n\n### 屬性與變數的差異\n- 屬性可以被刪除 (a = 1)\n- 變數無法被刪除 (var a = 1)\n\n## 作用域\n[[var, let, const 的作用域]]內詳細\n\n## 命名規則\n- [ ] 開頭數字\n- [ ] 包含 `-`\n- [x] camel case\n- [x] 包含 `_`\n\n\n\n#js #variable","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/ClosureScope-Chaining":{"title":"Closure(Scope Chaining)","content":"# Clousure 閉包 (Scope Chaining)\n執行函數時，呼叫變數會依循\n1. 先在函數內找\n2. 到函數**被宣告**的地方找\n\n\n```js\nlet name = \"sam\";\n\nfunction fn() {\n\tlet name = \"alex\";\n\tconsole.log(name);\n}\n```\n\n#js #variable #scope","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/Hoisting":{"title":"Hoisting","content":"# 提昇 Hoisting\n- function 跟 var **宣告**會被提升到**該作用域**的頂部\n- [[初始化(initializer)]]（賦值）之後就不會 Hoisiting\n- 發生的時間點 [[Execution Context]] 的 Creation Phase\n- 在 Execution Phase 發生之前，電腦記憶體會先分配給 function, var 的宣告（lexical declaration: let, const, function expression 沒有）\n\n## var 的 hoisting\nvar 的 hoisting 只有在**賦值之前**有效果\n```javascript\nconsole.log(a);\t// 不會輸出 not defined，而是輸出 undefined \nvar a = 1; \nconsole.log(a); // 輸出 1\n```\nhoisting 的效果可以解讀成\n```javascript\nvar a; \t\t\t// hoisting\nconsole.log(a);\t// log undefined\nvar a = 1; \t\t// 賦值\nconsole.log(a); // 輸出 1\n```\n## function 宣告的 hoisting\nfunction 的 hoisting 會將宣告提到作用域最頂端\n```js\nfn();\t\t\t\t\t// log \"hi\"\nfunction fn( {\t\t\t// hoisting\n\tconsole.log(\"hi\");\n})\n```\n\n## 不會 hoisting 的部分(lexical declaration)\n- let\n- const\n- function expression\n\n```js\nfn();\t\t\t\t\t\t// error\nlet fn() = function() {\t\t// hoisting\n\tconsole.log(\"hi\");\n}\n```\n\n#js #variable #scope","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/Scope":{"title":"Scope","content":"# Scope 作用域\n[Scope(作用域)](https://developer.mozilla.org/en-US/docs/Glossary/Scope)\n有三種作用域\n\n## 類型\n- Global Scope\n- Function Scope\n- [[Block]] Scope\n\n|作用域類型|var|let|const|\n|-|-|-|-|\n|Global|O|O|O|\n|Function|O|O|O|\n|Block|X|O|O|\n\n## Global Scope\nGlobal Scope 的變數，在哪裡都可以讀取\n```js\nvar age = 14;\nlet name = \"Sam\";\nconst height = 150;\n\nfunction myName() {\n\tconsole.log(name);\n}\n\nmyName();\t\t// log \"Sam\"\n```\n\n## Function Scope\nFunction Scope 的變數，只能在函數內執行\n```js\nfunction myName() {\n\tvar age = 14;\n\tlet name = \"Sam\";\n\tconst height = 150;\n\t\n\tconsole.log(name);\n}\n\nmyName();\t\t\t// log \"Sam\"\nconsole.log(name);\t// error\n```\n\n## [[Block]] Scope\nBlock Scope 的變數，只能在 block (loop, if)裡面讀取\n使用 var 會全域污染\n```js\nvar x = 1;\nfor (var i = 0; x \u003c 10; x++) {\n\tconsole.log(x);\n}\nconsole.log(x);\t\t\t// x = 10 全域污染\n```\n\n#js #variable #scope","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/block":{"title":"block","content":"# block (javascript)\n[block(javascript)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)\n[[Scope]]\n[Closure(閉包)](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures)\n\n## Syntax\n- 用大括號包起來\n- 可以有 label（選用）\n- 常在 if else, for 時使用\n\n### Block Statement\n```javascript\n{\n\t陳述_1\n\t陳述_2\n\t...\n\t陳述_n\n}\n```\n### Labelled Block Statement(optional)\n```javascript\nLabelIdentifier: {\n\t陳述_1\n\t陳述_2\n\t...\n\t陳述_n\n}\n```\n\n\n## [[Scope]]判定\n### 非嚴格模式\n```javascript\n// 不推薦這樣使用\n\nvar x = 1;\n\n{\n  var x = 2;\n}\n\nconsole.log(x); // 非嚴格模式的話 block 不會形成作用域，x = 2\n```\n### 嚴格模式\n```javascript\n\nlet x = 1;\n\n{\n  let x = 2;\n}\n\nconsole.log(x); // 嚴格模式下，使用 let 會形成作用域，x = 1 \n```\n\n#js #variable #scope","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/const":{"title":"const","content":"# const\n命名習慣：開頭大寫\n```js\nconst UseCapslock = 1;\n```\n\n#js #variable #scope","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%AE%8A%E6%95%B8/var-let-const-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F":{"title":"var, let, const 的作用域","content":"# let, const, var 的差異\n[【直播記錄】JavaScript 那個 let, const, var 到底差在哪？](https://www.youtube.com/watch?v=FGdKdn_CnWo)\n[block(javascript)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)\n\n|比較內容|var|let|const|\n|-|-|-|-|\n|[[block]] 內使用造成全域污染（不形成作用域）|O|X|X|\n|顯示在 windows 上 |O|X|X|\n|受非同步影響|O|X|X|\n|hoisting|O|X|X|\n|[[暫時性死區(TDZ)]]|X|O|O|\n|再宣告（re-declaration）|O|X|X|\n|再指派（re-assignment 賦值）|O|O|X|\n|未[[初始化(initializer)]]就使用|O|O|X|\n\n\n\n\n## function\nfunction 會形成作用域，var 不會全域污染\n````javascript\n// var 作用域在程式碼寫完的當下就確定了\nvar a = 1;\n\nfunction fnA() {\n\tconsole.log(a);\t// fnA 叫 a 的話 a = 1\n}\n\nfunction fnB() {\n\tvar a = 2;\t\t// fnB 重新宣告 a 後，在 fnB 裡面使用都是 2\n\tfnA();\t\t\t// fnA 叫 a = 1\n\tconsole.log(a);\t// fnB 叫的話 a = 2，\n}\n\nconsole.log(a)\t\t// 全域叫的話 a = 1，不受 fnB 內部宣告影響\n````\n\n\n## [[block]]\n- 在 block 裡面使用 var 不會形成作用域，會有全域污染問題\n- block 內使用 let **會**形成作用域，不會全域污染([[use-strict 嚴格模式]])\n### var\n````javascript\n{\n\tvar a = 3;\t\t// var 不會形成作用域，會全域污染（非嚴格模式）\n}\nconsole.log(a);\t\t// log 3\n````\n### let\n````javascript\n{\n\tlet a = 3;\t\t// var 會形成作用域，不會全域污染（嚴格模式）\n}\nconsole.log(a);\t\t// not defined\n````\n### 非同步行為的狀況\n#### var\nsetTimeout 屬非同步行為，實際執行時間點會**在所有事件結束後**\n```javascript\nfor (var i = 0; i \u003c 10; i++) {\n\tsetTimeout(() =\u003e {\n\t\tconsole.log(i);\n\t}, 0);\n} // log 十次 10\n```\n#### let\nlet 的作用域只有在這個迴圈內，不會受到非同步影響\n```javascript\nfor (let i = 0; i \u003c 10; i++) {\n\tsetTimeout(() =\u003e {\n\t\tconsole.log(i);\n\t}, 0);\n} // log 0 到 9\n```\n\n## 重複宣告的狀況\n- var 可以被重複宣告，會有 [[Hoisting]] 狀況\n- let 不行，會有錯誤提示\n### var\nvar 可以重複宣告，會 hoisting，作用域內若在宣告前被呼叫，不會產生錯誤提示\n```javascript\nfunction fn(a) {\n\tconsole.log(a);\t// 2.log 1\n\tvar a = 2;\t\t// 3.重複宣告\n\tconsole.log(a);\t// 4.log 2\n}\nfn(1);\t\t\t\t// 1.在外部先指定 a = 1\n```\n\n### let\nlet 不能重複宣告，不會 hoisting，作用域內若在宣告前被呼叫，**會**產生錯誤提示（[[暫時性死區]]）\n```\n// let 在被宣告前呼叫的話\nCannot access 'a' before initialization\n```\n會產生暫時性死區，不能執行\n```javascript\nfunction fn(a) {\n\tconsole.log(a);\t// 2.暫時性死區，log 錯誤提示不能執行\n\tlet a = 2;\t\t// 3.不可重複宣告，不能執行\n\tconsole.log(a);\t// 4.不能執行\n}\nfn(1);\t\t\t\t// 1.外部指定 a = 1\n```\n\n\n\n## const 與 let 不同之處\n````javascript\n// 可重複賦值\nlet a = 1;\na = 2;        // 可\n````\n````javascript\n// 不可重複賦值\nconst a = 1;\na = 2;        // 不可\n````\n\n## [[物件傳參考]]\nconst 如果碰上 object 的話，單純修改裡面的內容是可以的\n但直接改 const 成其他物件是不行的（物件傳參考）\n```javascript\nconst a = {\n\tname: \"卡斯伯\",\n}; \n\na.name = \"Ray\";\t\t// 可\n```\n```javascript\nconst a = {\n\tname: \"卡斯伯\",\n}; \n\na = {\n\tname: \"ray\",\n}; \t\t\t\t\t// 不可\n```\n\n\n#js #variable","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E5%8E%9F%E5%A7%8B%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B-Primitive-Data-Types":{"title":"原始資料類型 Primitive Data Types","content":"# 原始[[資料類型]] primitive data types\n**不是物件**，沒有自己的屬性與功能\n擁有自己的值，不是參考\n\n- [[Number]]\n- [[string]]\n- [[Boolean]]: falsy value\n- symbol\n\n## [[物件傳參考#傳值 Call By Value]]\n不會改變原始值（進階的時候才會理解 primitive data types 為什麼不會被改變）\n\n```js\nlet n1 = 100;\nlet n2 = n1;\n\nn1 = 1;\nconsole.log(n1, n2); // 傳值的特性 log 1 100\n```\n\n## Primitive Coercion\n\nJS 可以強迫把原始資料類型改成 object 來使用（比如說使用 `.length`功能）\n### 不正常的作法\n使用 new String() 的方式生成 object，再去讀取 object 的功能但會佔記憶體，吃效能\n[[Prototype Inheritance#Coercion 強迫]] 的特性，其實不需要這樣處理\n```js\nlet str = new String(\"Hello\");\ncosole.log(type str); // log object\n```\n### 正常的作法\nJS 直接讀取就可以了\n```js\nlet str = \"Hello\";\ncosole.log(type str); // log string\ncosole.log(str.toLowerCase()); // log hello\n\n```\n#js #dataType #primitiveDataType","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B":{"title":"資料類型","content":"# 資料類型、資料型別\n[JavaScript 的資料型別與資料結構](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Data_structures)\n\n|型|返値|\n|-|-|\n|[Undefined](https://developer.mozilla.org/ja/docs/Glossary/undefined)|`\"undefined\"`|\n|[Null](https://developer.mozilla.org/ja/docs/Glossary/Null)|`\"object\"`([備註](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null))|\n|[真偽値](https://developer.mozilla.org/ja/docs/Glossary/Boolean)|`\"boolean\"`|\n|[数値](https://developer.mozilla.org/ja/docs/Glossary/Number)|`\"number\"`|\n|[BigInt](https://developer.mozilla.org/ja/docs/Glossary/BigInt) (ECMAScript 2020 の新機能)|`\"bigint\"`|\n|[文字列](https://developer.mozilla.org/ja/docs/Glossary/String)|`\"string\"`|\n|[シンボル](https://developer.mozilla.org/ja/docs/Glossary/Symbol) (ECMAScript 2015 の新機能)|`\"symbol\"`|\n|[Function](https://developer.mozilla.org/ja/docs/Glossary/Function) オブジェクト (implements [[Call]] in ECMA-262 terms)|`\"function\"`|\n|その他のオブジェクト|`\"object\"`|\n最新的 ECMAScript 標準定義了七種資料型別：\n\n-   有六種資料型別是[原始型別 (en-US)](https://developer.mozilla.org/en-US/docs/Glossary/Primitive \"Currently only available in English (US)\")：\n    -   [Boolean](https://developer.mozilla.org/zh-TW/docs/Glossary/Boolean)\n    -   [Null](https://developer.mozilla.org/zh-TW/docs/Glossary/Null)\n    -   [Undefined (en-US)](https://developer.mozilla.org/en-US/docs/Glossary/undefined \"Currently only available in English (US)\")\n    -   [Number](https://developer.mozilla.org/zh-TW/docs/Glossary/Number)\n    -   [BigInt (en-US)](https://developer.mozilla.org/en-US/docs/Glossary/BigInt \"Currently only available in English (US)\")\n    -   [String (en-US)](https://developer.mozilla.org/en-US/docs/Glossary/String \"Currently only available in English (US)\")\n    -   [Symbol (en-US)](https://developer.mozilla.org/en-US/docs/Glossary/Symbol \"Currently only available in English (US)\")（於 ECMAScript 6 新定義）\n-   另外還有 [Object](https://developer.mozilla.org/zh-TW/docs/Glossary/Object)\n\n\n#js #dataType","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/%E9%A1%9E%E5%9E%8B%E8%BD%89%E6%8F%9B":{"title":"類型轉換","content":"# 類型轉換\n- [[typeof]]：辨識類型（除[[判斷是否為 Array]]）\n## number method\n不會改變原始值（進階的時候才會理解 primitive data types 為什麼不會被改變）\n### number.toString()\n{該數字}.toString()\n### number.toFixed(填入幾位數)\n規定小數點幾位數\n\n## string\n### string's property\n- length：長度\n- index：length - 1 個\n### string method\n- slice()\n- indexOf()\n- toLowerCase()\n- toUpperCase()\n- split()\n- Number(string)\n- parseInt(string) （字串轉成整數）\n\n\n```js\n// length: string's property\nlet str = 'hello';\nconsole.log(string.length); // 5\n\n\n```\n\n## object\n\n- [[物件不要傳參考的時候：深層、淺層拷貝]]\n## JSON\n- `JSON.stringify()`：把資料轉成 string\n- `JSON.parse()`：string 轉成 array\n#js #dataType #primitiveDataType #json","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Boolean":{"title":"Boolean","content":"# Boolean\n- [[falsy value]]\n\n### null\n```js\nlet x = null;\n```\n有時候宣告的資料很大，會對暫存記憶體產生負擔，動態調整宣告為 null 釋放記憶體\n### undefined\n```js\nlet x;\n```\n ## true value\n-   true\n-   42\n-   \"pizza\"\n-   {} 空 object\n-   [] 空 array\n-   NaN：not a number\n\n#js #dataType #primitiveDataType","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%85%B6%E9%A4%98%E5%8F%83%E6%95%B8-Rest-Perameters":{"title":"其餘參數 Rest Perameters","content":"# 其餘參數 Rest Perameters\n設定 function 在導入之前可以為**不特定數量的參數**，並且將他們視為陣列來處理\n\n```js\nfunction f(a, b, ...theArgs) {\n  // ...\n}\nf(1, 2, 3, 4, 5, 6 ,7);\n```\n\n## 範例\n在 [[Math Object]] 的功能中，max 就有這個特性\n```js\n// 應用的範例\ncosole.log(Math.max(2, 20, 200, 2000)); // log 2000\n// 在 max 的參數中，可以填入任意數量的參數，\n```\n#js #function","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%87%BD%E6%95%B8%E7%9A%84%E9%9A%B1%E8%97%8F%E7%9A%84%E5%8F%83%E6%95%B8":{"title":"函數的隱藏的參數","content":"# 函數的隱藏參數\n\n除了我們自己定義的參數之外，也可以呼叫內建的參數\n````js\nvar a = '全域'\nfunction fn(自定參數) {\n\n\t// 沒有設定也可以使用的三個參數\n\t// this, window, arguments\n\n\tconsole.log(\n\t\t自定參數, \n\t\tthis, \n\t\twindow, \n\t\targuments\n\t);\n\t\n\t// 執行 fn() 後可在 debugger 查看\n\tdebugger;\t\t\n}\nfn(1, 2, 3);\n````\n\n## debugger\n![](https://i.imgur.com/CFQ80mm.png)\n\n會將 Devtool 的 debugger 停在這個程式碼上\n\n### debugger -\u003e scope \n![](https://i.imgur.com/gHZ236C.png)\n\n- `fn`\n  - `\u003cthis\u003e`: Window\n  - `arguments`: 多了一個類陣列 (1, 2, 3)\n- `Window`: Global\n\n#js #function","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E5%87%BD%E6%95%B8%E8%A1%A8%E9%81%94%E5%BC%8F-function-expression":{"title":"函數表達式 function expression","content":"# 函數表達式 function expression \n將函數儲存進一個變數中\n因牽涉給變數賦值，故不會 hoisting\n\n## 給變數賦予……\n\n-   匿名函數｜let funExpressionName = function(parameter) { 功能 }\n-   有名稱的函數｜ let funExpressionName = function fnA(parameter) { 功能 }\n\n## 執行……\n-   返回函數結構｜執行 funExpressionName\n-   執行該函數｜執行 funExpressionName({ 要給 argument })\n\n##  函數當參數｜callback fuction\n-   function fnB(callbackFunc) { callbackFunc(預設要給fnA的參數) }\n-   函數表達式 fnA（一個被賦與匿名函數的變數）當 fnB 的參數，讓 fnB 可以調用 fnA\n\n## 內嵌函數表達式｜inline function expression\n-   fnC(callbackFunc, value)\n-   可以多一個 parameter，來指定給 callback function 的 argument\n-   也可以直接少掉將 callbackFunc 在之前建立函數表達式的步驟，直接在 fnC 的 parameter 裡定義 function\n#js #function","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E7%BD%AE%E6%8F%9B%E5%87%BD%E6%95%B8%E7%9A%84-this-%E6%8C%87%E5%90%91":{"title":"置換函數的 this 指向","content":"# 置換函數的 this 指向\n這些是函數都可以使用的 methods\n\n## 常見 methods\n- bind\n- call\n- apply\n\n## bind\n綁定 [[this]] 指向，需要把 bind 過的內容丟到一個新的變數內使用\n\n```js\nlet Sam = {\n\tname: 'Sam',\n\tage: 25\n}\n\nfunction getAge() {\n\n\t// 此 this 是 simple call，指全域\n\tconsole.log(this.age);\t\n}\n\n// bind getSamAge() 的 this 指到 Sam\nlet getSamAge = getAge.bind(Sam);\ngetSamAge();\n```\n\n## call\n比 bind 更實用，可以直接置換 this 為指定的物件\n\n```js\nlet Sam = {\n\tname: 'Sam',\n\tage: 25\n}\n\nfunction getAge() {\n\n\t// 此 this 是 simple call，指全域\n\tconsole.log(this.age);\t\n}\n\n// call this 置換為 call 的參數\ngetAge.call(Sam);\n\n```\n### 函數的其他參數\n如果指定的(`getAge`)函數有多個參數，也可以在 `call` 的參數後方加入\n```js\nlet Sam = {\n\tname: 'Sam',\n\tage: 25\n}\n\nfunction getAge(height) {\t// 有自定參數\n\n\t// 此 this 是 simple call，指全域\n\tconsole.log(this.age);\n\tconsole.log(height);\n}\n\n// call this 置換為 call 的參數\ngetAge.call(Sam, 100);\t\t// 指定完 this 後呼叫即可\n\n```\n\n## apply\n[[置換函數的 this 指向#call#函數的其他參數]] 的狀況中，把其他參數放到陣列即可\n```js\nlet Sam = {\n\tname: 'Sam',\n\tage: 25\n}\n\nfunction getAge(height, weight) {\t// 有自定參數\n\n\t// 此 this 是 simple call，指全域\n\tconsole.log(this.age);\n\tconsole.log(height);\n\tconsol.log(weight);\n}\n\n// apply this 置換為 apply 的參數，自定參數要放到陣列中\ngetAge.apply(Sam, [100, 40]);\t\t// 指定完 this 後呼叫即可\n\n```\n\n#js #function #advanceJs","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/%E9%A0%90%E8%A8%AD%E5%8F%83%E6%95%B8":{"title":"預設參數","content":"# 預設參數\nfunction 可以預設 argument 的 value，不需要每次呼叫都重填\n\n```js\nfunction sum(a, b = 2) {\n\treturn a + b;\n}\n\nsum(2);\n```\n\n#js #function","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/4.%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F-arrow-function":{"title":"4.箭頭函式 arrow function","content":"# 箭頭函式\n:::info\n\n```js\n( (parameter) =\u003e {\u003c自帶 return\u003e})\n```\n```js\n(parameter) =\u003e (\u003creturn 的值，不用再寫 return\u003e)\n```\n- **Arrow Function 的特性**\n    - `()`： parameter 若只有一個的話，可省略\n    - `{}`： 只有一行的話，可省略\n    - 自帶 `return`\n    - 本身無自己的 `this` 指向，看外層\n:::\n\n\n## 箭頭函式的 this 指向\n- 沒有自己的 this，看上層 function 的 this 是誰\n- 沒有上層 function 那就是看全域\n\n### 先複習傳統的 function 裡的 this\n- this 是指看呼叫時，是誰呼叫這個 function 的\n- callback function 通常是在全域下被呼叫的\n```js\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName: function () { \n    console.log('1', this.name); // 1 小明\n    setTimeout(function () {\n      console.log('2', this.name); // 2 全域\n      console.log('3', this); // 3 window\n    }, 10);\n  },\n}\nperson.callName(); \n```\n\n### 箭頭函式裡面出現 this\n箭頭函式內的 this 跟等同於**包住他的外層 function** 的 this\n```js\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName: function () { \n    console.log('1', this.name); // 1 小明\n    setTimeout (() =\u003e {\n      console.log('2', this.name); // 2 跟外層的 this.name 一樣都是小明\n      console.log('3', this); // 3 跟外層的 this 一樣都是 person\n    }, 10);\n  },\n}\nperson.callName(); \n```\n\n\n## 沒有被 function 包住的箭頭函式\n沒有上層 function 那就是看全域\n```js\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName: () =\u003e { \n    console.log(this.name); // 沒有外部 function 參考，this 會指向全域\n  },\n}\nperson.callName();\n```\n## 回到上章[[this#this 的幾種狀況]]的這個話題\n- 先讓 this 設定指向其他變數：vm (Vue 中指的 ViewModel)\n- 使用箭頭函式\n\n### 先讓 this 設定指向其他變數：vm \n在 function 外面抓取外部的 vm\n再將 vm 帶進去 function 內部\n```js\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    // const vm = this; // vm 在 Vue 中意指 ViewModel\n    setTimeout(function () {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n### 直接改用箭頭函式\n用箭頭函式的特性，會直接讀取外層的 this\n```js \nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(() =\u003e {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n#js #vue #advanceJs","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/Function":{"title":"Function","content":"# 函數｜function\n一種物件\n```js\n// function declaration\nfunction 名稱(parameter) {\n 功能(parameter);\n}\n\n// invoke(執行)\n名稱(argument);\n```\n  \n\n\n## return 或是 console.log\n-   fuction 執行之後，若要將執行後的結果儲存於變數中，要用 `return`\n-   單純顯示可直接用 `console.log`，除 bug 好用\n\n## 判斷終止｜return 或 }\n### return｜一旦碰到第一個 return 就會跳出整個 function\n也可以 \n```js\nfunction fun(x) {\n\treturn;\n}\n```\n不回傳東西當做終止 function 用\n\n### }｜沒有碰到 return 就會執行到 function 的結尾 }\n\n## [[函數表達式 function expression]]\n## 原生 function\n### alert\n```js\nalert('你好');\n```\n#### prompt\n彈出式視窗輸入框\n```js\nprompt('請輸入年齡');\n```\n#js #function","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/Higher-Order-Function":{"title":"Higher Order Function","content":"# Higher Order Function\n把 function 當做 function 的參數稱為 Higher Order Function\n#js #function","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/IIFE":{"title":"IIFE","content":"# IIFE (Immdiately Invoked Function Expression)\n宣告後直接執行函數\n在 JS 的 library sourse code 常見到\n```js\n(function fn(name) {\n\tconsole.log(name);\n})(\"Sam\");\n```\n\n#js #function","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Function/this":{"title":"this","content":"# this\n\n## 目錄\n- this 的幾種狀況\n\t- simple call （不太會這樣用）\n\t- object 的 function（最常用）\n\t- 不同物件中的同個函數\n\t- 陷阱題\n\t\t- object 中還有 object\n\t\t- Object 裡面的 function 硬要呼叫全域 function\n\t\t- callback function\n\n\n## 特性\n- this 是[[函數的隱藏的參數]]之一\n- 指向會變動\n-  ** function 是從哪裡宣告的，就是指誰**（ES6 的 this 參照[[4.箭頭函式 arrow function]]）\n- 主流框架都會用到\n\n## 情況\n看 function 從哪調用\n\n||函數|物件的函數|\n|-|-|-|\n|this 指向|全域|物件|\n\n### 不太會這樣用：simple call\n\nfunction 在全域中，function 中的 this 指向全域\n```js\nvar someone = '全域';\nfunction callSomeone() {\n  // 呼叫全域的變數：simple call\n  console.log(this.someone);\t// 指 global\n}\ncallSomeone();\n```\n\n### 最常用的：object 裡的 function\n\nfunction 在 object 中，function 中的 this 指向 object \n\n```js\nvar obj = {\n  someone: '物件',\n  callSomeone() {\n    console.log(this.someone);\t// 指該物件\n  }\n}\nobj.callSomeone();\n```\n\n### 不同物件的擁有同名的函數 \n\n例如由 [[Constructor]] 建立的 instance，每一個物件的參考（[[物件傳參考]] ）不一樣，事實上並不是同一個\n```js\nvar obj = {\n  someone: '物件',\n  callSomeone() {\n    console.log(this.someone);\t// 指該物件\n  }\n}\n\nvar obj2 = {\n  someone: '物件2',\n  callSomeone()      // 語法糖省略 key\n}\nobj2.callSomeone();  // 指向 obj2\n\nconsole.log(obj.callSomeone() === obj2.callSomeone());\t// false\n```\n\n### 陷阱題\n\n#### Object 中還有 Object\n\n```js\nvar wrapObj = {\n  someone: '外層物件',\n  callSomeone(),          // wrapObj 的 function\n  innerObj: {\n    someone: '內層物件',\n    callSomeone(),        // innerObj 的 function\n  }\n}\nwrapObj.innerObj.callSomeone();\n```\n\n#### Object 裡面的 function 硬要呼叫全域 function\n\ncallSomeone 還是全域的 funciton\n\n```js\nvar obj3 = {\n  someone: '物件 3',\n  fn() {\n    callSomeone(); // 通常平常不會這樣去取用 this\n  }\n}\nobj3.fn();\n```\n\n#### callback function：避免用\n\n使用 callback function（像是在forEach裡），大部分就是把一個定義好的 function 簡化放到 callback funciton 裡面\n所以他還是一個全域的 function\n\n```js\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(function () {\n      console.log(this.someone);    // simple call\n    });\n  }\n}\nobj4.fn();\n```\n\n\n#js #vue #advanceJs","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/JSON/8.-Axios-%E7%9A%84-API-%E4%B8%B2%E6%8E%A5":{"title":"8. Axios 的 API 串接","content":"# Axios 的 API 串接\n他是一個 promise base 的外掛，可以使用他的語法來進行串接\n## 環境建置：使用 CDN 版本\n\u003e [axios 外掛在這](https://github.com/axios/axios)\n\n### 在 html 匯入 cdn\n```html=\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n```\n## 取得遠端資料\n```javascript=\naxios.get('https://randomuser.me/api/')\n  .then(res =\u003e {\n  // 通常 res 會是多項資料，取出需要的部份\n    console.log(res.data.results);  \n  })\n   // err.response 是固定用法\n  .catch(err =\u003e {\n    console.log(err.response); \n  })\n```  \n#js #vue #api #axios #json","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/JSON/JSON":{"title":"JSON","content":"# JSON\n- JavaScript Objecy Notation\n- 跟 object 寫法很像，不過 key 的部份要用 ”” 包起來\n- 最外邊是 [] 或 {} 都有可能\n- 前端工程師常常撈特定資料存在一個變數裡\n- [[SQL#NoSQL]]\n#js  #api #axios #json","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Number/Floating-Point":{"title":"Floating Point","content":"# Floating Point\n因為電腦的二進位跟小數點的十進位換算有點複雜\n可能會遇到碰上小數點無法正常運算的問題\n```js\nconsole.log(0.2 + 0.1 == 0.3); // false \n```\n\n## 一種解決方法 toFixed(小數點第幾位)\n```js\nconsole.log((0.2 + 0.1).toFixed(1) == 0.3.toFixed(1)); // false \n```\n#js #dataType #primitiveDataType","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Number/Number":{"title":"Number","content":"# Number\n- NaN: not a number\n- Infinity: 無限大\n\n```js\nconsole.log(5 / 0); // log Infinity\nconsole.log(Infinity / Infinity); // log Infinity 跟微積分有關（好）\nNaN === NaN; // log false 想要認定是否為 NaN 要用 isNaN\n```\n\n[[運算#條件語句｜if switch]]\n\n#js #dataType #primitiveDataType","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E5%B1%95%E9%96%8B":{"title":"展開","content":"# 展開 Spread Operators\n\n[[Object]] 跟 [[Array]] 都有[[展開]]的功能，可以將不同的物件做合併\n但與 [[string]] 不同，單純使用 `+`  無法如期合併，需要使用 `concat()` 的功能\n在 ES6 有新增語法糖\n\n可以適用以下狀況：\n- 陣列擴展，不同陣列合併\n- 物件擴展，導入更多物件\n- NodeList 轉成純陣列（參照 [[HTMLCollection, Nodelist, array 比較]]）\n\n## 陣列擴展，不同陣列合併\nES6 有展開的語法糖 `...`\n### 原本寫法 concat(ary)\n```js\nconst aryA = [1, 2, 3];\nconst aryB = [4, 5];\nconst aryAll = aryA.concat(aryB);\n\nconsole.log(aryAll); // log [1, 2, 3, 4, 5]\n```\n### 語法糖：[...aryA, ...aryB]\n```js\nconst aryA = [1, 2, 3];\nconst aryB = [4, 5];\nconst aryAll = [...aryA, ...aryB]\n\nconsole.log(aryAll); // log [1, 2, 3, 4, 5]\n```\n## 物件擴展，導入更多物件\n將 object 內容直接展開新增到另一個 object\n```js\nconst methods = {\n\tfnA() {},\n\tfnB() {}\n}\n\nconst newMethods = {\n\t...methods\n}\n```\n\n## 轉成純陣列\n比如說使用 querySelectorAll 時，雖然一樣是 array 形式（[[HTMLCollection, Nodelist, array 比較]]），但可以用的動作（`__proto__` 裡面）比較少，實務上很常需要把它轉回純的 array\n```js\n// 取得複數個 li 的 array\nconst allLi = document.querySelectorAll('li'); \n// 讓他在新的 array 裡展開，取得純陣列可使用的__proto\nconst newAllLi = [...allLi];\t\t\n```\n\n#js #object","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E5%BE%9E%E7%89%A9%E4%BB%B6%E4%B8%AD%E6%8F%90%E5%8F%96%E5%B1%AC%E6%80%A7%E5%88%B0%E8%AE%8A%E6%95%B8%E4%B8%AD-Destructing-an-object":{"title":"從物件中提取屬性到變數中 Destructing an object","content":"# 從物件中提取屬性到變數中 Destructing an object\n\u003e[[Destructing Assignment]]\n\n\n- 長相像有大括號的變數\n- 可以把物件的屬性提出來使用，不用重複用點記法點屬性\n```js\nlet {} =\t\t\t\t\t\t // 防失智搜尋用\nlet {提出來用的物件屬性1, 提出來用的物件屬性2 ...} = 物件;\n\n```\n```js\nlet Sam = {\n\tname: 'Sam',\n\tage: 25,\n\tfriends: {\n\t\tfriendName: 'Mike',\n\t}\n}\n\n// 舊作法\n// let name = Sam.name;\n// let age = Sam.age;\n// let firendName = Sam.friends.name;\n\n// 新作法\nlet {name, age} = Sam;\t\t\t// {} 批次處理\nlet {firendName} = Sam.friends;\n```\n\n#mango #js #object","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E6%B7%B1%E5%B1%A4%E6%8B%B7%E8%B2%9D%E9%9D%9E-string-%E9%A1%9E%E5%9E%8B%E7%9A%84%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B%E8%BD%89%E6%8F%9B":{"title":"深層拷貝、非 string 類型的資料類型轉換","content":"# 深層拷貝 (Deep Copy)\n[[物件不要傳參考的時候：深層、淺層拷貝]]\n\n深層拷貝會將物件先轉成 [[string]] 再轉回物件\n賦值到 newObject 之後，與原物件就不會再具有傳參考特性(link)\n```\nconst newObject = JSON.parse(JSON.stringify(object))\n```\n\n## [[Storage]] 內的資料使用\n#### 非 [[string]] 的資料類型 [[類型轉換]]\n由於 storage 裡面只會有 string ，其他的[[資料類型]]都會被轉成 string，如果想要其他的資料提出時還是維持資料原本的類型，可以用以下功能（object, array, boolean 皆可）\n- [[類型轉換#JSON]]","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E4%B8%8D%E8%A6%81%E5%82%B3%E5%8F%83%E8%80%83%E7%9A%84%E6%99%82%E5%80%99%E6%B7%B1%E5%B1%A4%E6%B7%BA%E5%B1%A4%E6%8B%B7%E8%B2%9D":{"title":"物件不要傳參考的時候：深層、淺層拷貝","content":"# 斬斷一切的牽連：淺層拷貝、深層拷貝\n開發時如果沒有留意到[[物件傳參考]]特性，會很容易不小心修改到原本的資料\n避免此狀況可使用\n- 其他的[[類型轉換]]\n\n## 淺層拷貝(Shallow Copy)\n最外層的 object 是新建的，內層若有其他 object 還是保留傳參考特性，程式碼較單純\n\n### Object.assign()\n```js\nconst newObject = Object.assign({}, originObject)\n```\n- 第一個 parameter 放空的 object (建立新的記憶體空間)\n- 第二個放想要複製的 object\n  - 在空 object 中展開想要複製的物件\n\n\n### 在新的空 object 內[[展開]]\n```js\nconst newObject2 = {\n    ...originObject\n}\n```\n\n\n## 深層拷貝\n[[深層拷貝、非 string 類型的資料類型轉換]]\n\n\n\n#js #object #dataType","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E5%82%B3%E5%8F%83%E8%80%83":{"title":"物件傳參考","content":"# 物件傳參考\n\u003e ### 備註\n\u003e 找資料的時候看到很多種說法，可能要留意一下是不是在講同件事XD\n\u003e 傳參照、傳參、call by reference、pass by reference\n\n\n## 傳？傳什麼？\n- [五分鐘快速了解 [傳址，傳參考，傳址] ](https://ithelp.ithome.com.tw/articles/10198215)\n- [JS 的傳值 \u0026 傳參考](https://ithelp.ithome.com.tw/articles/10225762)\n- [這篇還沒看](https://ithelp.ithome.com.tw/articles/10209104)\n\n### 參考是什麼？\n參考（參照、reference） ，指的是他們存在的**記憶體空間**\n傳參考會共用同一個記憶體空間，不會複製\n\n### JS 的傳值與傳參考\n|傳什麼|動作|舉例|特性|\n|-|-|-|-|\n|傳值|Copy|[[原始資料類型 Primitive Data Types]]|複製過後，兩者並沒有關連|\n|傳參考|Link|物件型別([[Object]], [[Array]], [[Function]])|複製過後，其中一方被修改，兩方都會更新|\n\n\n#### 傳值 Call By Value\n- 把 value 傳到另一個**記憶體位置**的 value 上，是 copy 非 link \n- JS 中的純值（[[原始資料類型 Primitive Data Types]]）就是這個特性(Boolean、Null、Undefined、Number、String)\n- 彼此只有 copy 關係，所以 copy 完後，其中一方被更改，不會影響到另一方\n#### 傳參考 Call By Reference\n- 把記憶位置傳到另一個物件的記憶體位置上，為 link 非 copy\n- JS 中物件型別是這個特性\n- 彼此有 link 關係，所以在哪裡其中一方被修改了，兩邊都會更新\n\n\n## Object 的傳參考特性\n不論物件、陣列都是用傳參考方式賦值，\n賦值後彼此有 link 關係，其中一方被更改，兩方都會一起更新\n\n有個 person 物件\n```js\nconst person = {\n  name: '小明',\n  obj: {}\n}\n```\nperson2 與 person 建立了一個 link 關係\n在 person2 裡不論更改 key， 或是內部 obj 的 key 都會更新原本資料\n```js\nconst person2 = person;  // link 了一個 person2 物件\nperson2.name = '杰倫';   // 在 person2 更新這個物件內容\nperson.name = person2.name = '杰倫';  // 兩邊都會自動更新\n```\n### object 在 object 內部也一樣擁有傳參考特性\n再額外建立一個 obj2 跟 obj 建立 link 關係（還不知道為什麼要這麼做）\n直接打 person2.obj.{key} 也會更新 person.obj\n```js\nconst obj2 = obj // 建立新的 link\n```\n\n## Danger Zone\n### 透過 function 修改 object 的 key （不清楚自己在幹嘛不要亂用）\n有個 funciton 專門修改 object 的某個 key\n```js\nconst fn = (item) =\u003e {\n  item.name = '杰倫';\n}\n```\n不論這個 function 帶入 person, person2 都會被更新\n```js\nfn(person2);   // 透過這個 function 去修改 person2（跟 person 有 link 相關）\nconsole.log(person);  // 物件傳參考特性， person 也會被更新\n```\n\n\n## [[物件不要傳參考的時候：深層、淺層拷貝]]\n#js #vue #object #advanceJs","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E7%89%A9%E4%BB%B6%E5%AD%97%E9%9D%A2%E5%80%BC":{"title":"物件字面值","content":"# 物件字面值\n\n物件字面值：字面上物件長什麼樣子的意思\n[[Key-Value Pair]]\n```\nconst obj = {\n    key: value,\n}\n```\n\n#js #object","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/%E8%AE%8A%E6%95%B8%E7%B0%A1%E5%AF%AB%E8%AA%9E%E6%B3%95%E7%B3%96":{"title":"變數簡寫語法糖","content":"# 物件內的變數簡寫語法糖\n[[物件字面值]]中，一組屬性皆以 [[Key-Value Pair]] 形式出現，在 ES6 中，如果變數的 value 與 key 同名，可以直接省略 key\n## 原本寫法\n```js\n// 第一個物件\nconst person = {\n\tname: '小明'\n};\n// 將 person 設定為 people 中 person 的 value \nconst people = {\n\tperson: person\n}\n```\n### ES6 語法糖\n導入物件 A 到 B 物件當 value 時，如果屬性與 value 同名，則可以簡寫\n```js\nconst person = {\n\tname: '小明'\n};\n\nconst people = {\n\tperson\n}\n```\n\n#js #variable #object","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E5%88%A4%E6%96%B7%E6%98%AF%E5%90%A6%E7%82%BA-Array":{"title":"判斷是否為 Array","content":"# 判斷是否為 Array\n\u003e 之後讀到物件導向會講更多\n\n因為 typeof 只能判斷是否為 object，使用 `Array.isArray(該陣列)`來辨識是 object 中的陣列或物件\n\n```js\nlet ary = [1, 2];\nconsole.log(typeof ary); // 無法分辨，顯示 object\nconsole.log(Array.isArray(ary)); // true  \n\n```\n#js #dataType #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E5%88%AA%E9%99%A4%E6%88%96%E5%8F%96%E4%BB%A3stringreplace":{"title":"刪除或取代（string）：replace()","content":"# 刪除或取代（string）\n```js\nlet str1 = 'I am strring.'\nconsole.log(str1.replace('rr', 'r'))\n```\n\n#js/string","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%8E%92%E5%88%97%E9%99%A3%E5%88%97%E5%85%83%E7%B4%A0":{"title":"排列陣列元素","content":"# 排列陣列元素\n## sort()\n - 把元素照順序排([[string#邏輯]])\n - 會改變原本的陣列\n```js\nlet ary = [1, 3, 5, 2, 11];\nconsole.log(ary.sort()); // log [1, 11, 2, 3, 5]\n```\n### 按照數字大小排：\n```js\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n```\n### 照 string.length 大小排\n```js\nfunction compareNumbers(a, b) {\n  return a.length - b.length;\n}\n```\n### 升羃降羃\n```js\nfunction compareNumbers(a, b) {\n  return b - a;  // 轉換順序\n}\n```\n\n#js #dataType #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%96%B0%E5%A2%9E%E8%88%87%E5%88%AA%E9%99%A4":{"title":"新增與刪除","content":"# 新增與刪除\n直接更動原本的陣列\n\n|功能|新增|刪除|\n|-|-|-|\n|頭|unshift()|shift()|\n|尾|push()|pop()|\n|指定位置|-|splice(index, amount)|\n\n## return 的內容\n- 新增：array 的長度\n- 刪除：被刪除的成員\n\n##   新增\n```js\nary.push(想新增的內容);\t\t// 頭\nary.unshift(想新增的內容);\t// 尾\n```\n\n## 刪除\n```js\nary.shift();\t\t\t\t// 頭\nary.pop();\t\t\t\t\t// 尾\nary.splice(起始位置, 刪幾個); // 指定位置\n```\n\n#js #dataType #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E6%A2%9D%E4%BB%B6%E5%88%A4%E5%AE%9A%E9%99%A3%E5%88%97%E7%9A%84%E5%85%83%E7%B4%A0":{"title":"條件判定陣列的元素","content":"---\n# 條件判定陣列的元素\n以下幾個功能可以處理陣列內符合特定條件的元素\n\n|  Method  | Return?                             \t\t|\n|:","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/%E9%99%A3%E5%88%97%E7%9A%84%E5%BE%AA%E7%92%B0-for-forEach-map":{"title":"陣列的循環 for, forEach, map","content":"#  陣列的循環\n- for\n- forEach({callback function})\n- map()\n- [[判定]]\n\n## 比較\n|特性|for|forEach()|map()|\n|-|-|-|-|\n|更動原陣列|O|X|X|\n|分別 log 出更改後的元素|X|O|-|\n|return 更動後新陣列（存到變數）|X|X|O|\n|中斷循環|O|X|-|\n\n\n## for\n```js\nlet ary = [1, 2, 3];\nfor (let element of ary) {\n\tconsole.log(element + 1);\n}\n// 分別輸出 2\n// 分別輸出 3\n// 分別輸出 4\n```\n\n## forEach\n```js\nArray.forEach(function(){})\n```\n-  function 的執行次數取決於該 array 的元素數量\n- 若想要得到修改後的 array 可用 .push 到新的 array 中 → 或使用 .map()\n- 不可中斷\n\n### function 預設的參數\n`.forEach()` 的參數會是一個 function ，該 function 的設參數有三個\n```js\nArray.forEach(function(item, index, array) {\n\t// .....\n\n})\n```\n-   item：輪到的元素\n-   index：輪到的 [索引]，可省略\n-   array：執行的 array，不會因為 function 內修改元素內容而變化，可省略、少用\n\n\n## map()\n不改原陣列，新陣列存進變數\n```js\nlet newArray = oldArray.map(function(item{\n\treturn item;\n})\n```\n\n\n#js #dataType #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/Array":{"title":"Array","content":"# Array\n[陣列功能一覽](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n[JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(),](https://courses.hexschool.com/blog/168210/javascript-for)\n\n\n不是[[原始資料類型 Primitive Data Types]]\n是 object 的一種\n\n## 讀取長度\n```js\nary.length;\n```\n## 賦值\t\n```jsˇ\narray[1] = {值};\n```\n\n## 變數宣告\n擁有[[物件傳參考]]特性，只是更改陣列內元素的話，宣告用 `const` 即可\n\n## [[新增與刪除]]\n## [[判斷是否為 Array]]\n## [[陣列的循環 for, forEach, map]]\n- for\n- forEach({callback function})\n- map()\n- filter()\n\n#js #dataType #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/filter":{"title":"filter()","content":"### filter ()\nReturn all 符合條件 element\n```js\nlet array = [1, 2, 4, 6];  \nlet newArray = array.filter(function(item) {  \n\treturn item !== 6\n});  \nconsole.log(newArray);  \n  \n// [1,2,4]\n```\n\n\u003e[[條件判定陣列的元素]]\n\n#js #dataType #array #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/find":{"title":"find()","content":"### find\n回傳陣列的第一個符合條件的元素\n```js\n// 三個 element 都是物件\n// 都有個一個屬性 isPerson 判斷是否為人\nlet ary = [dog, cat, 王小明];\nlet firstPerson = ary.find(element =\u003e {\n\treturn element.isPerson == true;\n})\nconsole.log(firstPerson); // 王小明\n```\n\n\u003e[[條件判定陣列的元素]]\n\n#js #dataType #array #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Array/join":{"title":"join()","content":"# join ()\n將 array 元素合併成字串，可以自訂串連時的連接詞\n```js\nlet fruit = [apple, banana, kiwi];\nfruit.join();\t\t\t// 'apple,banana,kiwi' \nfruit.join(' and ')\t\t// 'apple and banana and kiwi'\n```\n\n\n\u003e 後端：[[path]] 有用到這個功能\n\n\n#js #array","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Destructing-Assignment":{"title":"Destructing Assignment","content":"# Destructing Assignment\n```js\n// array\n[a, b, ...rest] = [10, 20, 30, 40, 50];\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // [30, 40, 50]\n\n// object\n({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});\nconsole.log(a); // 10\nconsole.log(b); // 20\nconsole.log(rest); // {c: 30, d: 40}\n\n// 忽略前面的只取其中一個（以第三個為例）\n[,,c] = [10, 20, 30, 40, 50];\nconsole.log(c); // 30\n```\n\n```js\n// 只取得物件中的特定屬性\n// \nconst person = {\n  name: 'Jesse',\n  age: 30, \n  address: {\n    city: 'Houston',\n    state: 'Texas',\n    country: 'USA'\n  }\n}\n\ndisplayMessage(person)\n\n// 只取 person.address.state\nfunction displayMessage({ address: { state } }) {\n  const message = 'I live in ' + state + '.';\n}\n```","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Function-%E7%B0%A1%E5%AF%AB%E8%AA%9E%E6%B3%95%E7%B3%96":{"title":"Function 簡寫語法糖","content":"# Object 內的 function 簡寫\n原本的[[物件]]字面值的屬性都是以 [[Key-Value Pair]] 的形式出現，ES6 的語法糖中， function 可以如下簡寫：\n## 原本寫法\n```js\nfunName: function() {\n\treturn this;\n};\n```\n## ES6 語法糖\n```js\nfunName() {\n\treturn this;\n};\n```\n## 注意：與 [[4.箭頭函式 arrow function]] 不同\n`this` 指向不同，需注意，不該與語法糖混為一談\n```js\nfunName: () =\u003e {\n\treturn this\n};\n```\n\n#js #function #advanceJs","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Key-Value-Pair":{"title":"Key-Value Pair","content":"# Key-Value Pair\n- key 只能對應一個 value，不可以對應多個 value\n- value 可以對應多個 key \n- 可以儲存的[[資料類型]]只有 string，不是 string 的資料類型都會被轉成 string\n```\n(key, value)\n```\n\n#js #dataType","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Object":{"title":"Object","content":"# 物件 Object\n- [[物件字面值]]內可以包含多個屬性 (properties)\n每個屬性通常都是以 [[Key-Value Pair]] 的形式出現，value 可以為其他的[[原始資料類型 Primitive Data Types]]，或是 [[Function]]、[[Array]]、甚至是 [[Object]]，另外在 ES6 有規範了 [[Function 簡寫語法糖]]\n```js\nlet home = {\n\tname : 'Mary',\n\t{key或屬性} : {值value},\n\tproperties,\n\tmethod,\n}\n```\n\n## [[物件傳參考#傳參考 Call By Reference]]\n物件與陣列皆為傳參考特性(reference data types)，宣告變數時皆為讀取他的記憶體，而非值本身\n```js\nlet people = [A, B];\nlet students = people;\n\npeople.push(C);\n\nconsole.log(people, students); \n// 傳參考特性 log 兩個都是 [A, B, C]\n```\n## 讀取物件\n-   點記法 Dot notation\n-   中括號 Bracket notation\n```js\nperson.name;\nperson[’name’];\n```\n\n## 新增物件\n-   person.name = ‘Mary’;\n-   這個 key 尚未存在也沒關係，也不用在前面加 let\n\n## 修改\n-   同修改變數，可以直接更新，或是 += 去計算也可\n-   person.name = ‘Jane’;\n-   dogsNum += 1;\n\n## 刪除\n```js\ndelete person.age;\n\nperson.age;\t\t\t// undefined\n```\n#js #objecy","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object":{"title":"Window Object","content":"# Window Object\n## Properties\n- Console\n- Document\n- [[Storage]]\n\t- [[Local Storage]]\n\t- [[Session Storage]]\n\n#js #window #object","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Local-Storage":{"title":"Local Storage","content":"# local storage\n關掉不會清空，除非主動用 `clear()`清空","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Session-Storage":{"title":"Session Storage","content":"# session storage\n瀏覽器關掉就會清空","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/Storage":{"title":"Storage","content":"# Storage\n- 瀏覽器的暫存空間（不是 [[Database 數據庫]]）\n- 放一些很簡單的資料，跟資安無關的內容\n- 都是 object\n- 在 devtools 可以找到\n- Storage 資料的使用（[[深層拷貝、非 string 類型的資料類型轉換]]）\n\n## Storage 的 methods \n- [[setItem(key, value)]]\n- [[getItem(key)]]\n- [[removeItem(key)]]\n- [[clear()]]\n\n\u003e key 是不能重複的","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/clear":{"title":"clear()","content":"#### clear ()\n清空","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/getItemkey":{"title":"getItem(key)","content":"#### getItem (key)\n取得內容","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/removeItemkey":{"title":"removeItem(key)","content":"#### removeItem (key)\n刪除指定內容","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Object-Array/Window-Object/setItemkey-value":{"title":"setItem(key, value)","content":"#### setItem (key, value)\n儲存內容進去","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/Template-literals-Template-strings":{"title":"Template literals (Template strings)","content":"# Template literals, Backstick\n```js\n`字串 ${變數}`\n```\n`${varible} 可以把變數放到 string 裡的方法`\n #js #literals #dataType","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/falsy-value":{"title":"falsy value","content":"## falsy value\n-   false\t\n-   null：宣告裡面沒有東西\n-   undefined：宣告尚未指派\n-   0\n-   NaN：not a number","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/string":{"title":"string","content":"# string\n## string 的串接\n可以做串接（+），但不能做運算（加減乘除）\n### string concatenate 串接\nconcatenate 簡稱 concat\n```js\nlet str = `hi` + \", I am fine.\"\n```\n\n\u003e 但在 python 可以做乘法\n\n### string number concat\n數字可以串接字串\n\n\n|兩個資料類型|執行動作|\n|-|-|\n|string + 任意|串接|\n|number + number|運算|\n```js\n1 + 100 + \"1000\" + 3 + 6\n// 答案是：101100036\n\n// 運算順序是左到右\n// \"1001000\" + 3 + 6\n// \"10010003\" + 6\n```\n\n## 其他功能\n-   扣除字尾空白｜.trim（不更改原字串）\n\n### 組合字與變數｜[[Template literals (Template strings)]](ES6)\n\n\n## 邏輯\nstring 可以做邏輯判斷，只看字首順序\n```js\n\"A\" \u003e \"B\" // true 因為 字母 A 比 B 早出現\n\"Apple\" \u003e \"Banana\" // true 只看字首的順序\n\"20\" \u003e \"100\" // true 只看字首順序\n\n```\n\n#js #dataType","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E8%B3%87%E6%96%99%E9%A1%9E%E5%9E%8B/typeof":{"title":"typeof","content":"## 辨認類型 typeof\n（除[[判斷是否為 Array]]）\n```js\nlet x = \"string\"\nconsole.log(typeof x)\n```\n- 數字轉字串\n- 數字限定小數點幾位數\n- 字串轉整數\n\n#js #dataType","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/%E6%A2%9D%E4%BB%B6%E7%B0%A1%E5%AF%AB-ternary-operator%E8%AA%9E%E6%B3%95%E7%B3%96":{"title":"條件簡寫 ternary operator(語法糖)","content":"# 條件簡寫（三元運算符 ternary operator）\n可以簡寫[[if, switch#if if else else if]]\n`()?`為判斷句 condition ，`:` 代表 else\n```js\nlet price = (age \u003c 18)? 50 : 100;\nlet price = (age \u003c 18)? 50 : (age \u003c 60)? 100 : 75;\n```\n\n\n```js\nconditional ? (if condition is true) : (if condition is false)\n```\n\n#js #math #logic","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90":{"title":"邏輯運算子","content":"# 邏輯運算子\n-   AND｜\u0026\u0026\n-   OR｜||\n-   NOT｜!\n#js #math #logic","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/Logic-OR":{"title":"Logic OR","content":"# Logic OR (||)\n\u003e [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR)\n```js\nexpr1 || expr2\n```\n如果 expr1 是真值，傳 expr1，其餘傳 expr2\n```js\no1 = true  || true       // t || t returns true\no2 = false || true       // f || t returns true\no3 = true  || false      // t || f returns true\no4 = false || (3 == 4)   // f || f returns false\no5 = 'Cat' || 'Dog'      // t || t returns \"Cat\"\no6 = false || 'Cat'      // f || t returns \"Cat\"\no7 = 'Cat' || false      // t || f returns \"Cat\"\no8 = ''    || false      // f || f returns false\no9 = false || ''         // f || f returns \"\"\no10 = false || varObject // f || object returns varObject\n```\n\n#js #logic","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E6%A2%9D%E4%BB%B6/if-switch":{"title":"if, switch","content":"# 條件語句｜if, switch\n## 程式的運算思維\n-   流程圖：[Whimsical](https://whimsical.com/)\n## if, if else, else if\n若要判斷「是否為 NaN」\n```js\nif(x == NaN) {}  // 怎麼樣都是 false\nif(isNaN(x)) {}\t // isNaN()\n```\n只有 true / false 判斷，可以不用寫條件語句\n\n```js\nif(x) {\n  console.log('truthy');\n} else {\n  cosole.log('falsy');\t\t\n} \n```\n### [[條件簡寫 ternary operator(語法糖)]]\n\n## 更多的條件｜switch 語句\n```js\nswitch (option) {\n\t case 1:\n\t\t console.log(\"You selected option 1.\");\n\t\t break;\n\t case 2:\n\t\t console.log(\"You selected option 2.\");\n\t\t break;\n\t case 3:\n\t\t console.log(\"You selected option 3.\");\n\t\t break;\n\n\t default:\n\t\t ...;\n}\n```\n\n## 判斷停止條件\n\n-   if｜一旦符合即停止\n-   switch｜碰到 break 即停止\n#js #math #logic","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for":{"title":"for","content":"# for\n```js\nfor ( start; stop; step ) { // let i = 0, i \u003c 10, i++\n // 做這件事\n}\n```\n- [[for of loop]]\n- [[for in loop]]\n\nfor of loop 的是元素本身的值\nfor in loop 的是元素的 index\n\n#js #loop","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for-in-loop":{"title":"for in loop","content":"# for in\n\n- array\n- object 也可（[[for of loop]]不行）\n\n```js\nlet Sam = {\n\tage: 1,\n\theight:100,\n}\n\nfor (let i in Sam) {\n\tconsole.log(i);\t\t// log age , log height\n\tconsole.log(Sam[i]);\t\t// log 1 , log 100\n\t\n}\n```\n\n#js #loop","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/for/for-of-loop":{"title":"for of loop","content":"# for of\n- 增加易讀性\n\n## 適用範圍\n- string\n- array\n- 類 array([[HTMLCollection, Nodelist, array 比較]])\n- **物件不行**(用 [[for in loop]])\n## 範例\n```js\nlet ary = [1, 2, 3];\nfor (let element of ary) {\n\tconsole.log(element);\n}\n```\n\n## \n\n#js #loop","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E8%BF%B4%E5%9C%88/loop-%E8%BF%B4%E5%9C%88":{"title":"loop 迴圈","content":"## 循環 loop｜while, for, for in, for of\n\n### while\n```js\nvar start = 0; // 何時開始\nwhile (start \u003c 10) { // 何時停止，不要在沒寫完前運行，瀏覽器會當掉\n console.log(start);\n start = start + 2; // 如何進入下一個項目\n}\n```\n### [[for]]\n### 在循環中循環｜Nesting Loop\n```js\nfor (var x = 0; x \u003c 5; x = x + 1) {\n for (var y = 0; y \u003c 3; y = y + 1) {\n console.log(x + \",\" + y);\n }\n}\n```\n  \n  ## break and continue\n  ### continue\n ```js\n for (let i = -; i\u003c= 10; i++) {\n \tif(i==5) {\n\t\tcontinue;  // 跳過這次的迴圈，直接進到下一次\n\t}\n\tconsole.log(i);  // i == 5 的這次迴圈，這裡會被跳掉不執行\n }\n ```\n \n   ### break\n ```js\n for (let i = -; i\u003c= 10; i++) {\n \tif(i==5) {\n\t\tbreak;  // 跳過之後的所有迴圈，直接停止\n\t}\n\tconsole.log(i);  // 只執行到 i == 5 之前， i == 5 就停止\n }\n ```\n \n #js #loop","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/%E9%81%8B%E7%AE%97":{"title":"運算","content":"# 運算","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/%E9%81%8B%E7%AE%97%E7%AC%A6%E8%99%9F-numbers-operators":{"title":"運算符號 numbers operators","content":"# 運算\n-   比較運算子\n\t-   \u003e=,\u003c=,\u003e,\u003c,`!==`,`!=`\n\t-  `==`：類型可不同，但值相同\n\t-  `===`：完全相同\n\t-   `=`：宣告用非比較\n\n## 餘 remainder operator\n```js\n17 % 3 // 答案：2\n```\n\n## 次方 power\n```js\n7**4 // 答案：7 的 4 次方\n```\n\n## ++\n之後 [[loop 迴圈]]會用到\n```js\nx++  // 逐次加一\nx--  // 逐次減一\n```\n\n## `+=, -=, *=, /=`\n語法糖，簡寫\n```js\n// 這兩句相同\nx += 10  \nx = x + 10\n```\n#js #math #logic","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/%E9%82%8F%E8%BC%AF%E6%A2%9D%E4%BB%B6%E6%AF%94%E8%BC%83/%E9%81%8B%E7%AE%97/Math-Object":{"title":"Math Object","content":"# Math\n[](https://i.imgur.com/2aWzzz5.png)\n## property\n- .PI\n\n## method\n- pow(a,b)：a^b\n- random()： 0-1間的隨機數\n- sqrt()：根號\n- abs()：絕對值\n- floo()：去小數點後\n\n#js #math #logic","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/JavaScript/DOM/%E5%B1%AC%E6%80%A7%E8%88%87%E5%8A%9F%E8%83%BD%E7%9A%84%E8%8B%B1%E6%96%87":{"title":"屬性與功能的英文","content":"# 屬性與功能\n- 屬性：properties, attribute\n- 功能：function, method\n\n#js","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/DOM-%E6%96%B0%E8%88%8A%E5%B0%8D%E6%AF%94":{"title":"DOM 新舊對比","content":"# 功能新舊對比\nDOM 的 properties 有很多個，其中有些比較雷同的項目，其中有些已經漸漸不再使用了\n\n|新|舊|\n|-|-|\n|childNodes|children|\n|NodeList|HTMLCollection|\n|querySelectorAll|getElementByClassName|\n\n\n# children 或是 childNode\nchildNodes 會 return **NodeList**\n內容會很多，可以用 children 就好\n\n#js #dom","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/DOM-%E7%B0%A1%E8%A6%81":{"title":"DOM 簡要","content":"# DOM｜Document Object Model\n [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction)\n-   類似 object\n\n## 節點 node｜在 document 裡的物件們\n-   element node\n-   text node\n-   attribute node\n\n## 選取｜節點、內容、屬性\n### 選取節點｜單一選取、群體選取\n-   選起來存在一個 const 裡面\n-   第一個符合的節點｜document.querySelector(’該 CSS 選擇器’)\n\n#### 符合的全部節點｜document.querySelectorAll(’該 CSS 選擇器’)\n會是一個 node list（一個 array，存取各個節點可使用 array 的技巧）\n\n### 選取內容｜內容、文字\n-   有可能修正就存在 let 變數裡\n-   內部內容｜{某節點}.innerHTML\n-   內部文字｜{某節點}.textContent\n\n### 選取屬性｜{某節點}.getAttribute(’{欲取得屬性}’)\n\n## 新增與修改｜內容、文字、屬性\n### 標籤與內容｜{某節點}.innerHTML = {欲修改或新增的內容};\n```js\nmain.innerHTML = `\u003ca href=\"${link}\" class=\"header\"\u003e超連結\u003c/a\u003e;`\n```\n-   可搭配 Template Literals （`字串 ${變數}`） 來寫\n-   若該節點本來裡面就有內容，則會被清除\n\n### 標籤內文字｜{某節點}.textContent = {欲修改或新增的內容};\n### 標籤的屬性｜{某節點}.setAttribute({屬性名稱}, {屬性內容})\n```js\ndocument.querySelector(’a’).setAttribute(’href’, ’#’ );\n```\n## 反查節點名｜{ 某 selector }.nodeName\n##  querySelector\n-   querySelector｜一個節點\n-   querySelectorAll｜一個 array\n```js\n// 有地蓋房子\n\n  \n\n// 在 document 上找地(section) \nconst section = document.querySelector('section');\n  \n\n\t // 在 document 上生材料\n\t const para = document.createElement('p');\n\t para.textContent = 'hello world';\n\n\t // 把生好的材料放上地(section)\n\t section.appendChild(para);\n \n```\n## createElement()\n```js\n// 沒地蓋房子\n\n\n// 先在 document 上生地\nconst section = document.createElement('section');\n\n  \n\n// 把地放上 document 上的 body\n**document****.****body****.**appendChild(section);\n\n  \n// 在 document 上生材料\nconst para = document.createElement('p');\npara.textContent = 'hello world';\n\n  \n\n// 把生好的材料放上地(section，不用從document開始寫)\n**section****.**appendChild(para);\n```\n\n\n## 範圍取值\n-   用 class 取比較不會撞到\n\n## 自訂標籤屬性｜data-{自訂名稱}=”自訂內容”\n\n  \n#js #dom","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/DOM-%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84-methods-properties":{"title":"DOM 需要知道的 methods, properties","content":"![](https://i.imgur.com/42G4N5a.png)\n# Element Object\n- 所有 html 的 element（所有標籤）都可以用這些功能（都從 element object 中繼承而來）\n- 不同的 element 可能有其他特殊的功能或屬性（繼承後還有自己獨有的屬性與功能）\n\n- innerHTML, innerText\n- createElement\n- appendChild()\n- children, childNode\n- classList\n\t- add()\n\t- remove()\n\t- toggle()\n\t- contains()\n- getAttribute\n- querySelector()\n- querySelectorAll()\n- remove()\n\n\n## 透過 DOM 修改 html 內容\n```javascript\n// mark 標籤會作用\nh1.innerHTML = \"\u003cmark\u003e字字字\u003c/mark\u003e\";\n// mark 只會被讀作文字\nh1.innerText = \"\u003cmark\u003e字字字\u003c/mark\u003e\";\n```\n### innerHTML\n讀作程式碼\n### innerText\n讀作 string\n\n\n## 製造 element\ncreatElement\n## 加入 element\nappendChild\n\n## 動態修改 class\n```javascript\ntitle.classList.add(\"flex\"); \n```\nclassList 也是一個 object\n回傳該 html 標籤所有的 class\n### classList 的功能\n- add()\n- remove()\n- toggle()\n- contains()\n\n#### contains()\n```javascript\ntitle.classList.contains(\"blue\");\n// 判定 class 是否有包含 blue （回傳 true / false）\n```\n\n## 取得屬性\n```javascript\ntitle.getAttribute(\"href\")\n```\n![](https://i.imgur.com/0nHFx1H.png)\n\n\n\n## document 跟 element 都可以用的選擇器\n從 document 繼承而來\n- querySelector()\n- querySelectorAll()\n\n```javascript\n// 從 document 的階層來選擇\nlet docPara = document.querySelectorAll(\"p\");\n// 從特定 HTML 標籤的階層做選擇\nlet section = document.querySelector(\"section\");\nlet sectionPara = section.querySelectorAll(\"p\");\n```\n\n## 移除標籤\n像是在增減待辦事項時，想要刪掉事項就可以用這個\n```javascript\ntitle.remove();\n```\n\n## style\n選取 CSS 的 style，由於 js 裡面不能用 `-` 所以要用大寫串起來，是直接寫入 **inline style**\n\n```js\nconsole.log(title.style);\n// #1\ntitle.style.backgroundColor = \"Blue\";\n// #2\ntitle.style = \"background-color: blue; font-size: 20pt;\"\n```\n\n#js #dom","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/Dynamic-Header":{"title":"Dynamic Header","content":"---\n# Dynamic Header\n設定黏在頭頂的 navbar，可以隨著滾輪變化（透明度、高度等）\n \n - `window.pageYOffset` property\n - `scroll` event\n - style object\n\nsticky 的 nav \n  \n```js\nconst header = document.querySelector('header')\n\n// 加入 scroll 這個事件，每次只要滾輪被滾動，就會觸發第二個參數（一個功能） \nwindow.addEventListener(\"scroll\", () =\u003e {\n \t// pageYOffset 代表 window 目前顯示頁面 Y 軸的位置，（例如：最頂端為 0）\n\tconsole.log(window.pageYOffset);\n\t\n\tif(window.pageYOffset != 0 ) {\n\t\theader.style.backgroundColor = 'black'\n\t} else {\n\t\theader.style = ''\t\t\t\n\t}\n})\n```","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/Event":{"title":"Event","content":"# Event\n[事件](https://developer.mozilla.org/zh-TW/docs/Web/Events)\n\n## 監聽事件\n```js\n{某節點}.addEventListener(’{event}’, {callback Function})\n```\n\n```js\nbtn.addEventListener(”click”, e =\u003e {\n\t\tconsole.log(”clicked!”)\n\t}\n)\n```\n-   可在 chrome 的開發者工具觀察物件是否有註冊監聽事件\n## 事件快照｜監聽事件裡的 function(e)，e 為何物\n-   捕捉執行 {event} 時，所發生的所有事件，為 event 的簡寫，可替換為其他字不影響功能\n-   也可以針對 e 裡的特定屬性去寫程式，或當成條件等\n-   e.target 了解目前事件的作用標籤範圍\n-   e.preventDefault｜阻止預設動作\n\t-   對 a 設定的話，就可以阻止連到其他網站\n\n## 適用範圍\n- window object\n- element object\n## event type\n## Event Object Inheritance 繼承\n![](https://i.imgur.com/YmH97EB.png)\n\n\n## Event 常用的 Properties 跟 method\n- target\n- preventDefault()\n- [[stopPropagation]]\n### target\nevent 執行的目標\n```js\ntitle.addEventListener(”click”, e =\u003e {\n\t\tconsole.log(e.target);\n\t}\n)\n```\n### preventDefault()\n```js\ntitle.addEventListener(”click”, e =\u003e {\n\t\te.target.preventDefault();\n\t\t\n\t}\n)\n```\n\n#js #dom #event","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/Event-Bubbling":{"title":"Event Bubbling","content":"# Event Bubbling\n兩個重疊的事件（element 跟 parent element），如果同時被觸發的話，兩個都會生效\n\n#js #dom #event","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/HTMLCollection-Nodelist-array-%E6%AF%94%E8%BC%83":{"title":"HTMLCollection, Nodelist, array 比較","content":"# HTMLCollection, Nodelist 與 array 類似之處\n## 比較\n在比較新的功能出來之後，`HTMLCollection` 的侷限多，漸漸不再被使用\n\n|DOM 功能|取得的清單|\n|-|-|\n|getElementByClassName|HTMLCollection|\n|querySelectorAll|NodeList|\n\n但實作上還是 array 最實用，取得 NodeList 之後常會透過 [[展開#轉成純陣列]] 的方法來使用陣列功能\n\n|功能|array|NodeList|HTMLCollection|\n|-|-|-|-|\n|length, index|O|O|O|\n|forEach|O|O|X|\n|新增、刪除|O|X|X|\n\n\n## HTMLCollection\n可以透過` getElementByClassName` 取得\n很像 array 但是不能執行新增刪除那些功能\n\n\n## NodeList\n`querySelectorAll` 取得\n\n\n\n\n#js #dom","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/DOM/stopPropagation":{"title":"stopPropagation","content":"## stopPropagation\n阻止 [[Event Bubbling]] 的方法\n- stopPropagation()\n- 停止擴散的意思\n\n```js\n\n```\n\n#js #event #dom","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Execution-Context/CallStack":{"title":"CallStack","content":"# CallStack\n[loupe 實際 CallStack 運算的樣子](http://latentflip.com/loupe/?code=ZnVuY3Rpb24gZjEoKSB7CiAgY29uc29sZS5sb2coJ1RoaXMgaXMgZjEnKQoKICBmMigpCgogIGZ1bmN0aW9uIGYyKCkgewogICAgY29uc29sZS5sb2coJ1RoaXMgaXMgZjInKQoKICAgIGYzKCkKCiAgICBmdW5jdGlvbiBmMygpIHsKICAgICAgY29uc29sZS5sb2coJ1RoaXMgaXMgZjMnKQoKICAgICAgY29uc29sZS5sb2coJ2YzIGRvbmUnKQogICAgfQoKICAgIGNvbnNvbGUubG9nKCdmMiBkb25lJykKICB9CgogIGNvbnNvbGUubG9nKCdmMSBkb25lJykKfQoKZjEoKQ%3D%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)\n\n[[Execution Context]]中，到了 [[Execution Phase]] 會按照 CallStack 的原則開始跑\n\n## 解釋\n### Call\n指 Calling funtions ，執行 funciton 時會產生 callstack\n### Stack\n\u003e Stack 是一種資料結構（資料結構跟演算法相關）\n\n![](https://i.imgur.com/hrYe0z6.png)\n\n一個像容器，先放進去的東西會最後拿出來\n\n#### LIFO\nLast-In-First-Out 後進先出\n\n## 目的\nJS 是單一線性(single-[[thread]])程式語言，一次指能做一件事，所以我們需要一個方法來追蹤 [[Execution Context]]，就是 CallStack\n\n## 實際步驟\n```js\nfunction f1() {\n\tconsole.log(\"f1\");\t\t\t// 1. log f1\n\t\n\tf2()\n\n\tfunction f2() {\n\t\tconsole.log(\"f2\");\t\t// 2. log f2\n\t\t\n\t\tf3();\t\t\t\n\t\t\n\t\tfunction f3() {\t\t\t\n\t\t\tconsole.log(\"f3\");\t// 3. log f3\n\t\t}\t\t\t\t\t\t// 4. f3 執行完畢，清除 f3\n\t}\t\t\t\t\t\t\t// 5. f2 執行完畢，清除 f2\n\t\t\t\t\t\t\t\t\n\tconsole.log(\"done\");\t\t// 6. log done \n}\t\t\t\t\t\t\t\t// 7. f1 執行完畢，清除 f1\n\nf1()\n```\n\n#js #window #executionContext","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Execution-Context/Creation-Phase":{"title":"Creation Phase","content":"# Creation Phase\n在 [[Execution Phase]] 之前，後台處理的部份\n\n## [[Global Execution Context]]\n- 生成 window object\n- 生成 [[Scope]] （依照 [[Closure(Scope Chaining)]] 閉包原則）\n- 生成 [[this]] （指向 window）\n- [[Hoisting]]\n\n## Function Execution Context\n- 不是 [[Global Execution Context]] 所以不會生成 window object\n- this 生成，但[[4.箭頭函式 arrow function]] 不會\n\n#js #window #executionContext","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Execution-Context/Execution-Context":{"title":"Execution Context","content":"# Execution Context\n\n## 階段\n- [[Creation Phase]]\n- [[Execution Phase]]\n\n## 類型\n- [[Global Execution Context]]（會生成 window object）\n- [[Function Execution Context]](不會生成 window object) \n\n#js #window #executionContext","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Execution-Context/Execution-Phase":{"title":"Execution Phase","content":"# Execution Phase\n在 [[Creation Phase]] 之後，這裡才開始一行一行跑程式碼 (callstack)\n\n#js #window #executionContext","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Execution-Context/Global-Execution-Context":{"title":"Global Execution Context","content":"# Global Execution Context 全域執行環境\n為 [[Execution Phase]] 的其中一種\n\n## Creation Phase\n- 生成 window object\n- 生成 [[Scope]] （依照 [[Closure(Scope Chaining)]] 閉包原則）\n- 生成 this （指向 window）\n- [[Hoisting]]\n## Execution Phase\n開始實際一行一行跑程式 (callstack)\n\n#js #window #executionContext","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/JavaScript-%E4%BB%8B%E7%B4%B9":{"title":"JavaScript 介紹","content":"# JavaScript 介紹\n- JavaScript 是由 [[ECMA]]-Script 寫成的**標準**，可以被任何程式語言寫出來，由瀏覽器來實現對應的引擎\n- 最有名的標準更新為ECMA2015(ES6)\n\n\u003e python, c++, php 是由 C 語言寫成\n\u003e[[Strongly Weakly type Language]]\n\n## 特性\n屬於 [[Single-thread]] 語言，一次只能處理一件事\n```js\n// sync(Synchronous) code 同步\nconsole.log('a');\nconsole.log('b');\n\n// log a\n// log b\n```\n利用 [[Event Queue]] 可以製造時間差\n#js #intro","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Vue/%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2SoC":{"title":"關注點分離(SoC)","content":"# 關注點分離\nSeparation of concerns，SoC\n\n#js #vue #Soc","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Vue/vue-%E4%BD%9C%E6%A5%AD%E5%95%8F%E9%A1%8C":{"title":"vue 作業問題","content":"- [ ] axios 是要先匯入在一個 `\u003cscript\u003e` 然後再開一個 `\u003cscript\u003e` 寫指令ㄇ\n- [x] `${}`的方法在 {{}} 裡面也有嗎\n\n\nhref=\"`mailto:${ item.email }`\" 有混文字記得用[[Template literals (Template strings)]]\n\n:src=\"item.picture.large\" 只有點記法的話不用${}\n#vue","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/1.%E7%9B%B8%E9%97%9C%E9%80%A3%E7%B5%90":{"title":"1.相關連結","content":"## 相關連結\n- [課程練習手冊](https://github.com/hexschool/vue3-starter-files/tree/gh-pages)\n- [Vue Devtools](https://devtools.vuejs.org/)\n\t- Chrome, Firefox, 獨立運作版都有\n- [Bootstrap5](https://bootstrap5.hexschool.com/)\n- [Vue 官方提供的 Vue 整合插件](https://marketplace.visualstudio.com/items?itemName=octref.vetur)\n- [Vue 3 Snippets](https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets)\n\n\n#js #vue","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/2.ES6-%E8%AA%9E%E6%B3%95%E7%B3%96":{"title":"2.ES6 語法糖","content":"# 語法糖 Syntactic sugar\n\n介紹幾個 ES6 版本中，有幾個語法糖\n- Object 的「[[物件字面值]] Object Literals」中的語法糖\n\t- 物件內的 [[Function 簡寫語法糖]]\n\t- [[變數簡寫語法糖]]\n- [[展開]]\n\t- 陣列的展開\n\t- 物件的展開\n\t- 在空陣列裡展開取得純陣列功能\n-  function 的[[預設參數]]\n\n\n\n\n\n#js #vue","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/5.%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2":{"title":"5.關注點分離","content":"# 關注點分離\n1. 將文字提取，並寫入資料集\n2. 將資料集渲染成畫面\n\n## 在 script 裡建構\n### 畫面：HTML\n### 資料：DATA\n### 方法：function\n### 元件：component\n- 資料 data\n- 方法、觸發器 method, trigger\n\t- removeData()\n\t- render()：渲染成 HTML，除了這裡之外盡量不要寫到 HTML，這部份在 vue 時會交給框架處理不用自己寫\n\t- remove()\n- 生命週期：第一次打開時執行的內容\n```js\nconst component = {\n  data: [ // 資料\n    '這是第一句話',\n    '這是第二句話',\n    '這是第三句話'\n  ],\n  removeData(id) {\n    this.data.splice(id, 1);\n    this.render();\n  },\n  render() { // 渲染方法\n    const list = document.querySelector('.component ul');\n    let content = '';\n    this.data.forEach((item, i) =\u003e {\n      content = `${content}\u003cli\u003e${item} \u003cbutton type=\"button\" class=\"btn\" data-id=\"${i}\"\u003e移除\u003c/button\u003e\u003c/li\u003e`\n    });\n    // 縮寫優化\n    // const content = component.data.map(item =\u003e `\u003cli\u003e${item}\u003c/li\u003e`).join('');\n    list.innerHTML = content;\n\n    // 加入監聽\n    const btns = document.querySelectorAll('.btn');\n    btns.forEach(btn =\u003e btn.addEventListener('click', (e)=\u003e {\n      // #2 重點，移除項目是先移除資料，而不是直接移除 DOM\n      // 如果要進行 AJAX 或更複雜行為，不會因為 DOM 與資料混合而難以運作\n      const id = e.target.dataset.id;\n      this.removeData(id)\n    }))\n  },\n  init() {\n    this.render();\n  }\n}\ncomponent.init();\n```\n#js #vue #Soc #dom","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/Vue/vue-%E5%AD%B8%E5%89%8D%E5%BF%85%E5%82%99%E8%A7%80%E5%BF%B5/7.Promise-%E9%9D%9E%E5%90%8C%E6%AD%A5":{"title":"7.Promise 非同步","content":"# 基礎的 Promise\n目前為止的程式碼，就像自言自語，都是單方面發出\n但如果需要搭配資料庫，就像多了一個對話的對象，除了單方面的講，也要聽，再做反應\n\npromise 就可以讓程式簡潔的做出這樣的一連串行為\n\n## 結構\n這裡有個目前還不懂怎麼建構的 Promise （了解如何運用即可）\n```js \nconst promiseSetTimeout = (status) =\u003e {     // 建立函式，return 是一個 promise\n  return new Promise((resolve, reject) =\u003e { // promise 有兩個參數 resolve, reject\n    setTimeout(() =\u003e {    // 這函式執行完，才會開始判斷非同步的結果\n      if (status) {  // 若判斷成功，執行 resovle\n        resolve('promiseSetTimeout 成功')   // resolve 經過神奇的動作後會得到這 string\n      } else {       // 若狀態判斷失敗，執行 reject\n        reject('promiseSetTimeout 失敗')\n      }\n    }, 0);\n  })\n}\n```\n## 流程\n1. pending：未確認狀態，這裡會先跑完所有的程式碼\n2. setteled：確認狀態\n    - Fulfilled：進入 resolve （成功）\n    - Rejected：進入 reject （失敗）\n#### 成功的話\n執行 .then\n```js\n.then(onFulfilled)\n```\n#### 失敗的話\n跳過 then 語法，執行 .catch\n```js\n.catch(onRejection)\n```\n\n## 運用\n程式碼的成功與否是由 promise 判斷\n### 假設 promise 回傳成功(true)\n.then()\n```js\npromiseSetTimeout(true);   // 假設 promise 回傳成功 \n  .then(res =\u003e console.log(res))  // 神奇的 string 會傳入 res 參數\n```\n### 假設 promise 回傳失敗(false)\n.catch()\n```js\npromiseSetTimeout(false);   // 假設 promise 回傳失敗\n  .catch(err =\u003e console.log(err))  // 神奇的 string 會傳入 err 參數\n```\n\n## 串接 Concatenation\n一連串的 promise 來處理\n要取得 A 要先取得 B 的資料，要 B 資料要先取得 C 的情形\n\n假設用上面一個語法進行串接\n```js\npromiseSetTimeout(true);   // 假設 promise 回傳成功 \n  .then(res =\u003e {\n    console.log(res);\n    promiseSetTimeout(true);} //  串接下一次的 promise\n  ) \n  .then(res =\u003e {              // return 的 promise 結果成功的話就繼續執行 then\n    console.log(res);\n    promiseSetTimeout(true);} \n  )\n```\n\n## 在元件中的 promise 運用\n很常在 component 中有 method 處理非同步資料\n再儲存到 component 中的 data 裡\n\n\u003e 這邊沒有很確定， then 算一個 function 嗎，還是整個 promiseSetTimeOut 算一個 function\n```js\nconst component = {\n  data: {},             // 儲存非同步資料結果\n  init() {   \n    console.log(this)   // 這個是下方箭頭函式的外層 this         \n    promiseSetTimeOut(true)  // 放入一個 promise\n      .then(res =\u003e {         // 假設 promise 成功\n        this.data.res = res;    //  將 res 的神奇 string 儲存到 data 中\n        console.log(this.data);\n      })\n  }\n}\ncomponent.init()\n```\n#js #vue #promise #async","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/console.log":{"title":"console.log","content":"---\n# console.log\n- [Handy Tips on Using console.log()](https://dmitripavlutin.com/console-log-tips/)\n\n可以用以下的 specifier 來帶入特定值\n\n| Specifier |                             Purpose                            |\n|:","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/JavaScript/jQuery/%E5%9F%BA%E7%A4%8E%E4%BD%BF%E7%94%A8":{"title":"基礎使用","content":"# jQuery 基礎使用影片\n[影片](https://www.youtube.com/watch?v=GVWOIP-HX70)\n## 環境準備\n使用外部資料庫有多種方法，舉其二\n### 下載到專案使用（本機）\n[載點](https://jquery.com/download/)\n- 去官方，下載到專案資料夾內直接使用\n- 可以修改內容、只取需要的部份使用\n#### 很多載點選哪種好\n-   uncompressed：想要讀內容的話（可讀性較好）\n-   compressed：只是要使用的話（檔案較小）\n### 引入 CDN（雲端）\n[CDN可以這裡找](https://cdnjs.com/libraries/jquery)\n- 不需下載\n- 不能修改內容，全部載入\n- 直接使用網路雲端資料，仰賴對方的網路狀態\n## 加入到 HTML 裡\n`\u003cscript\u003e`通常都會放在 `\u003cbody\u003e`的最後一段，這跟網頁的讀取會有關係（參考延伸閱讀）\n#### 載到專案資料夾範例\n```html\n\u003cscript src=\"script/jQuery.js\"\u003e\u003c/script\u003e\n```\n\n#### CDN 範例（引入時需留意版本是不是你要的）\n```html\n\u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\"\u003e\u003c/script\u003e\n```\n\n\n## 開始撰寫\nHTML 讀得到 jQuery 的資料庫後，就可以開始撰寫囉，jQuery 有他自己的辨識格式，內容都要寫在這裡面\n\n```js\njqDocReady  // 會 emmet 就直接打這行囉\n```\n看到這串就代表裡面都是 jQuery 囉\n```js\n$(document).ready(function () {\n // 都要寫在這裡\n});\n```\n  \n## 使用 jQuery 的目的\n目前已知\n -   動態載入 CSS 或 HTML\n\t -   減少不用一開始就載入的樣式所需的載入負擔，利用動態載入，在需要的時候在寫入即可。\n## 工具\n-   [jQuery Cheat Sheet](https://oscarotero.com/jquery/)\n\n-   [Wappalyzer：分析所在網站所使用的框架](https://www.wappalyzer.com/installed/?utm_source=installed\u0026utm_medium=extension\u0026utm_campaign=wappalyzer)\n## 延伸閱讀\n- [HTML 從CDN的引入位置 聊到CSS Render Blocking](https://realdennis.medium.com/html-%E5%BE%9Ecdn%E7%9A%84%E5%BC%95%E5%85%A5%E4%BD%8D%E7%BD%AE-%E8%81%8A%E5%88%B0css-render-blocking-3894a0428f29)\n\n\n#jquery #js #cdn","lastmodified":"2022-04-23T12:34:05.572865066Z","tags":null},"/frontend/MERN":{"title":"MERN","content":"# MERN\n[React. js + Node. js + Express + MongoDB example: MERN stack CRUD App](https://www.bezkoder.com/react-node-express-mongodb-mern-stack/)\n[MERN Stack Explained](https://www.mongodb.com/mern-stack)\n\n專案會分成前端 [[React]] ，跟後端兩部分\n## 前端\n## 後端\n[[MongoDB Atlas]]","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/Quartz-%E7%89%B9%E6%80%A7":{"title":"Quartz 特性","content":"# Quartz 特性\n- `Ctrl + K` 搜尋\n- 使用 Hugo \n- 反向連結\n- 連結內容預覽\n- 連結圖","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/Quartz-%E7%99%BC%E5%B8%83-obsidian":{"title":"Quartz 發布 obsidian","content":"# Quartz 發布 Obsidian\n\u003e[Quartz](https://quartz.jzhao.xyz/)\n\n[[Quartz 特性]]\n\n## 安裝步驟\n\u003e[Get started](https://quartz.jzhao.xyz/notes/setup/)\n\u003e- 你需要的知識：\n\u003e\t- [ ] git, Github 基礎理解\n\u003e\t- [ ] 終端機基礎操作\n\n### [[Fork]] 原作者的 repo\n\u003e[quartz 的 repo](https://github.com/jackyzha0/quartz)\n\n這樣你就會在你的 github 上看到一個內容一樣的檔案\n![](https://i.imgur.com/DNBGWvR.png)\n\n### clone 到自己的本機\n把這個檔案 clone 下來到你要的位置\n```shell\ngit clone https://github.com/jackyzha0/quartz.git\n```\n\n## 管理、新增筆記\n建議使用 Obsidian，以下用 Obsidian 示範\n### 連結既有 repo 筆記 submodule\n\n[git submodule 教學](https://kmsheng.medium.com/git-submodule-%E6%95%99%E5%AD%B8-96ab0255c88c)\n\nhttps://github.com/shiftyp/submodule-gh-pages-example\n[Obsidian 遠端、發佈相關](其他/硬體、生產力/Obsidian/Obsidian%20遠端、發佈相關.md)\n### Obsidian 設定\n將一個 vault 放到 `/content` 資料夾內，必須的設定如下\n![](https://i.imgur.com/YEir2BK.png)\n模版設定要打開\n![](https://i.imgur.com/z6wVNIn.png)\n以後每個檔案都用得到，建議可以設定 Obsidian 快捷鍵\n![](https://i.imgur.com/qFPgAwE.png)\n\n### Quartz 設定\n`/content/templates` 資料夾不要動\n\n## 排除想要保持私人的筆記\n\u003e[Ignoring Notes](https://quartz.jzhao.xyz/notes/ignore-notes/)\n\n## 發布筆記\n\u003e[Deploying Quartz to the Web](https://quartz.jzhao.xyz/notes/hosting/)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n```yaml\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\n\n\n#obsidian/quartz","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E7%94%9F%E6%88%90%E6%A8%99%E7%B1%A4React.createElement":{"title":"生成標籤：React.createElement()","content":"# React.createElement ()\n\u003e[[JSX 生成標籤]]\n\u003e[[同時生成多個標籤]]\n\n生成標籤的原理，但實際撰寫時會用更方便的方法：[[JSX 生成標籤]]\n\n```js\n// 匯入 [[React 使用的模組]]\n\n// 生成標籤，並指定屬性（第二個參數，為物件）\n// 屬性參數包含：寫入 CSS、className 等等等\nconst element = React.createElement('div', {\n  className: 'container',\n  children: 'Hello World', // children 等同 textContent\n})\n\n// 渲染：[[ReactDOM：渲染]]\n```\n\n\u003e### 原生 JS 作法\n\u003e```js\n\u003e// 生成標籤\n\u003econst element = document.createElement('div')\n\u003e// 指定屬性：內文、class \n\u003eelement.textContent = 'Hello World'\n\u003eelement.className = 'container'\n\u003e\n\u003e// 渲染\n\u003e```\n\n\n#js/react/jsx #js/dom #html","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/React-%E4%BD%BF%E7%94%A8%E7%9A%84%E6%A8%A1%E7%B5%84":{"title":"React 使用的模組","content":"---\n# React 使用的模組\n\u003e[[匯入模組]]\n\n```jsx\n// 最基本要這兩個\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n```\n\n^19ab2a\n\n\u003e[[ReactDOM：渲染]]\n\n\n\u003e[[檔案變多之後的模組運用","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/React.Fragment%E5%90%8C%E6%99%82%E7%94%9F%E6%88%90%E8%A4%87%E6%95%B8%E6%A8%99%E7%B1%A4":{"title":"React.Fragment：同時生成複數標籤","content":"# React.Fragment\n因為 [[ReactDOM：渲染]] 不能[[同時生成多個標籤]]，如果不想要[[上層多包一個標籤]]可以用這個功能\n\n\u003e[[生成標籤：React.createElement()]]：可以多個內文（[[children]]）\n\n```jsx\nconst element = (\n  {/* 沒有內容的空標籤原本的內容是：React.Fragment，太常用了所以簡寫 */}\n\t\u003c\u003e\n\t\t\u003cspan\u003eHello\u003c/span\u003e\n\t\t\u003cspan\u003eWorld\u003c/span\u003e\n\t\u003c/\u003e\n)\n```\n\u003e 沒有簡寫的 JSX 長這樣\n\u003e```jsx\n\u003econst element = (\n\u003e  \u003cReact.Fragment\u003e\n\u003e    \u003cspan\u003eHello\u003c/span\u003e\n\u003e    \u003cspan\u003eWorld\u003c/span\u003e\n\u003e  \u003cReact.Fragment/\u003e\n\u003e)\n\u003e```\n\n## 原始的樣子\n- 原本放入 [[children]] 的地方改放多個 `createElement`\n- 也可以直接放入 [[children]]\n```jsx\nconst helloElement = React.createElement('span', null, 'Hello')\nconst worldElement = React.createElement('span', null, 'World')\n\n// 使用 React.Fragment 來產出帶有複數標籤的元素\nconst element = React.createElement(\n\t// 實際上不會形成標籤\n  React.Fragment,\n  null,\n\t\thelloElement,\n\t\t' ', \n\t\tworldElement\n)\n```\n\n#js/react/jsx #js/dom #html","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/ReactDOM%E6%B8%B2%E6%9F%93":{"title":"ReactDOM：渲染","content":"---\n# ReactDOM\n![[React 使用的模組#^19ab2a]]\n\nReact 遵循 [[5.關注點分離]]的規則，JS 的內容寫完後渲染到畫面指定位置上\n\n```js\n// 可以直接簡寫成：\nReactDom. render('要渲染的內容', document. querySelector('#渲染位置'));\n// \u003c要渲染的內容\u003e 只能有一個：[[同時生成多個標籤]]\n```","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/children":{"title":"Untitled Page","content":"# children\n- React 標籤的其中一個屬性\n- 等同於內文 (DOM 的 textContent)\n\n```jsx\n// JSX 的 React 標籤屬性都可以這樣寫\ncosnt element = \u003cp children=\"內文內文\" /\u003e\n```\n```jsx\n// JSX 的 React children 屬性還可以這樣寫，等同於 HTML 的寫法\ncosnt element = \u003cp\u003e內文內文\u003c/p\u003e\n}\n```\n\n## 原始寫法\n- 寫在第二個屬性參數內\n- 或獨立出來寫在第三個參數內\n- 可以用 array 包住多個 children\n\n\u003e 多個 children 可，但是多個標籤不行，參照：[[同時生成多個標籤]]\n\n```js\n// 標籤, {屬性}, children\nconst element = React.createElement('p', {\n\tclassName: 'paragraph',\n\tchildren: ['Hello World', 'Goodbye World'],\n})\n```\n```js\nconst element = React.createElement(\n\t'div', \n\t{\tclassName: 'container' },\n\t'Hello World', 'Goodbye World', \t// 可以多個\n)\n```\n\n#js/react/jsx #js/dom #html","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/%E5%AE%89%E8%A3%9D-React":{"title":"安裝 React","content":"# 安裝 React\n\n\u003e- 事前需要：[[安裝 Node.js]]\n\u003e- [[Vite]]\n```shell\nnpx create-react-app \u003c專案名稱\u003e\n```\n\n## 用 vs-code 開啟專案\n```shell\ncode \u003c專案名稱\u003e\n```\n\n## 執行專案\n在專案資料夾中執行，會直接叫出 localhost\n```shell\nnpm start\n```\n## src\n只需要留下\n- app.js\n- index.js\n\n\n#js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/%E6%AA%94%E6%A1%88%E8%AE%8A%E5%A4%9A%E4%B9%8B%E5%BE%8C%E7%9A%84%E6%A8%A1%E7%B5%84%E9%81%8B%E7%94%A8":{"title":"檔案變多之後的模組運用","content":"# 檔案變多之後的模組運用\n## 使用更多 React 模組\n之後會學到 [[Hook]]，求方便可能會再多匯入個別的 hook，沒有匯入也可以用\n- 有匯入的使用方法：`useState()`\n- 沒有匯入的使用方法：`React.UseState()`\n```jsx\nimport React, { useState, useEffect } from 'react';\n```\n\n## 更多元件的話\n之後會學到 React 有個重要觀念是 [[Component：可重複利用、自定參數的元件]]，會習慣將元件個別匯出做使用，不會都放在同一個 jsx 檔案內\n\n\u003e[[元件匯出]]\n\n```jsx\n// 主要ㄉ jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n```\n```jsx\n// 元件的 jsx\nfunction App() {\n\treturn \u003c一些東西 /\u003e\n}\n\nexport default App\n```\n\n#js/react #js/module","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/React-%E7%92%B0%E5%A2%83":{"title":"React 環境","content":"# React 環境\n- 使用 `.jsx` 取代 `.js` ：[[JSX]]\n- 要留意 snippets 中 JavaScript 跟 JavaScriptReact 是不一樣的\n\n\n\u003e Vscode Plugin 推薦安裝：ES7+ React/Redux/React-Native snippets\n\u003e [[React Snippet]]\n\n#js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/React-Snippet":{"title":"React Snippet","content":"# React Snippet\n\u003e 需安裝 Vscode Plugin：ES7+ React/Redux/React-Native snippets\n\n## rafce(react, function, export)\n產出基本 React 架構\n```jsx\nimport React from \"react\";\n\n// 變數名的生成會看你的檔名叫什麼\nconst Nav = () =\u003e {\n  return \u003cdiv\u003e\n\n  \u003c/div\u003e;\n\n};\n\nexport default Nav;\n```\n\n#js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/Vite/Vite":{"title":"Vite","content":"# Vite\n比用 create-react-app 快的工具\n\u003e[[安裝 Node.js]]\n\n## 在專案\n```shell\nnpm init vite@latest\n```\n## 會被問\n- ok to proceed?\n- project name\n- framework\n- variant\n\n\n```shell\n// 移動到該專案\ncd test-project\nnpm install\n// localhost\nnpm run dev\n```\n\n#js/react #vite","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/Vite/rollup-plugin-copy%E6%9C%AA%E5%AE%8C%E6%88%90":{"title":"rollup-plugin-copy（未完成）","content":"# rollup-plugin-copy\n\n## 還在看資料\nhttps://www.npmjs.com/package/rollup-plugin-copy\n\nhttps://github.com/vitejs/vite/issues/762\nhttps://stackoverflow.com/questions/71180561/vite-change-ouput-directory-of-assets\nhttps://medium.com/js-dojo/how-to-solve-vue-js-prod-build-assets-relative-path-problem-71f91138dd79\nhttps://stackoverflow.com/questions/68217795/vite-resolve-alias-how-to-resolve-paths\n\n#未完成 #vite #js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/Vite/vite-%E7%99%BC%E5%B8%83%E5%9C%96%E7%89%87%E4%B8%8D%E6%9C%83%E6%AD%A3%E5%B8%B8%E9%A1%AF%E7%A4%BA%E5%95%8F%E9%A1%8C":{"title":"vite 發布圖片不會正常顯示問題","content":"# vite 發布 gh-page 圖片不會正常顯示\n## css background 的解決方式\n- 建立  `\u003croot\u003e/public` 路徑，圖放這裡\n- `background-image: url(/icon.jpg)` \n\t- 不使用這個寫法： `public/icon.png` \n\t- 使用這個寫法： `/icon.png`\n\n## img 標籤的 src 解決方式\n- 放在 public 沒辦法讀取\n- 使用 import 可以但超麻煩\n\n\n## 還在看的資料\n[2022-02-08 vue3+vite assets动态引入图片的几种方式，解决打包后图片路径错误不显示的问题](https://www.jianshu.com/p/ddfb5a8b458b)\n[css url() assets in html not handled in build process #3980](https://github.com/vitejs/vite/issues/3980)\n\n\n#vite #未完成 #js/react #bug","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/%E7%92%B0%E5%A2%83/Vite/vite-gh%E7%99%BC%E5%B8%83":{"title":"vite gh發布","content":"# vite gh-page 發布\n\u003e[Deploying Vite App to GitHub Pages](https://dev.to/shashannkbawa/deploying-vite-app-to-github-pages-3ane)\n## 步驟\n### git 建置\n```shell\ngit init\ngit add .\ngit commit -m \"first-commit\"\ngit branch -M main\ngit remote add origin http://github.com/username/repo-name.git\ngit push -u origin main\n```\n\n### gh-page 路徑建置\n```js\n// vite.config.js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n\tbase: '/slicing.DOYOGA/',\t\t// 這裡寫入 repo 名稱\n\tplugins: [react()]\n})\n```\n\n### 生成發布模式\n```shell\nnpm run build\n```\n#### 預覽發布模式\n沒問題之後再發布到 gh-page\n```shell\nnpm run preview\n```\n\n### gh-page 分支建立\n```shell\ngit add dist -f\n```\n\n```shell\ngit commit -m \"Adding dist\"\n```\n\n```shell\ngit subtree push --prefix dist origin gh-pages\n```\n\n## 靜態資源（assets）問題\n[[vite 發布圖片不會正常顯示問題]]\n\n#vite #js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Component/%E5%85%83%E4%BB%B6%E5%8C%AF%E5%87%BA":{"title":"元件匯出","content":"# 元件匯出 Components in Files\n\n- 元件重複利用率高，建議匯出個別檔案使用，增加易讀性\n- 檔案名與元件名稱一樣都必須大寫開頭\n\n\u003e[[React Snippet]] 快速生成囉\n\n```jsx\nfunction Car() {\n  return \u003ch2\u003eHi, I am a Car!\u003c/h2\u003e;\n}\n\n// 匯出\nexport default Car;\n```\n\n#js/react #js/module","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Component/%E5%AE%9A%E7%BE%A9%E5%B1%AC%E6%80%A7props":{"title":"定義屬性(props)","content":"---\n# 定義屬性\n- HTML 標籤上有很多屬性（例：class, style, action......）都可以透過 React 去設定\n- 也可以自訂屬性寫更客製化的內容：[[Component：可重複利用、自定參數的元件]]\n\u003e範例：[[用元件處理 CSS Styling]]","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Component/Class-Component":{"title":"Class Component","content":"## Class Component\n\u003e現今版本已經不建議使用，參考：[[Component：可重複利用、自定參數的元件]]\n```jsx\n// 一定要繼承 React.Component 來寫，結果跟 function component 一樣\n// 這裡面的 render 不等於 ReactDOM.render()\nclass Car extends React.Component {\n  render() {\n    return \u003ch2\u003eHi, I am a Car!\u003c/h2\u003e;\n  }\n}\n\n// function component 寫法\n\nfunction Car() {\n  return \u003ch2\u003eHi, I am a Car!\u003c/h2\u003e;\n}\n```\n#js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Component/Component%E5%8F%AF%E9%87%8D%E8%A4%87%E5%88%A9%E7%94%A8%E8%87%AA%E5%AE%9A%E5%8F%83%E6%95%B8%E7%9A%84%E5%85%83%E4%BB%B6":{"title":"Component：可重複利用、自定參數的元件","content":"---\n# Component\n- 用 `function` 來 `return` HTML 元素，其中可以自訂參數來調整元素，方便重複使用\n- 透過 [[定義屬性(props)#物件定義屬性（ Key-Value Pair ）]]（參數）可以調整每個生成出來的元件\n- 要大寫開頭\n- 一個元件可以在另一個元件裡（詳細要進一步了解渲染的機制： [[Hook]]）\n- 寫多了元件就：[[元件匯出]]\n\n\u003e先今（16.8 版）多是用 Function Component + [[Hook]] 來寫（參照本篇）\n\u003e早期主要是用 [[Class Component]]，現在已經很少用到\n\n\u003e- 單純使用 `{}`  可以重複利用存到變數內的 html：[[JSX HTML 內使用變數]]\n\u003e- 但要可以調整參數就要學會元件的概念\n\n\u003e[[用元件處理 CSS Styling]]","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Component/Event-Handlers":{"title":"Event Handlers","content":"# Event Handlers\n\u003e[可以上文件查有支援什麼 Event](https://reactjs.org/docs/events.html#supported-events) \n\n\u003e 注意事件的函式有沒有被寫成 invoked 的狀態，可以透過再包到一個函式裡來規避\n\u003e```js\n\u003eonClick{() =\u003e {會直接 invoked 的函式}}\n\u003e```\n\n\n## 原始寫法\n可以看到原本的寫法會需要 render 很多次，搭配 [[Hook]] 可以改善這問題\n\u003e可以再用 [[useState Hook]] 改良：[[Event Handlers#使用 Hook 改寫]]\n\n```jsx\nfunction App() {\n\t// state 變數儲存要顯示到網頁上的值（event 觸發會更動）\n\tconst state = { eventCount: 0, username: \"\" };\n\t// 設定功能要執行的動作\n\t// 給 onClick event 的功能，event 觸發後便更新 state.eventCount\n\t// 如果 button 是放在 form 裡面會有預設送出的效果，要放 e.preventDefault() \n\tfunction handleClick() {\n\t\tstate. eventCount += 1;\n\t\trenderApp();\n\t}\n\t// 給 onChange 的功能，event 觸發後便將 state\n\tfunction handleChange(event) {\n\t\tstate.username = event.target.value;\n\t\trenderApp();\n\t}\n\n\treturn (\n\t\t\u003cdiv\u003e\n\t\t\t\u003cp\u003eThere have been {state.eventCount} events.\u003c/p\u003e\n\t\t\t\u003cp\u003e\n\t\t\t\t{/* 事件觸發的函式 handleClick 拉上去寫 */}\n\t\t\t\t\u003cbutton onClick={handleClick}\u003eClick Me\u003c/button\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003cp\u003eYou typed: {state.username}\u003c/p\u003e\n\t\t\t\u003cp\u003e\n\t\t\t\t\u003cinput onChange={handleChange} /\u003e\n\t\t\t\u003c/p\u003e\n\t\t\u003c/div\u003e\n\t);\n}\n\n// 正規應該不會這樣寫，參照 [[useState Hook]]\nfunction renderApp() {\n\tReactDOM.render(\u003cApp /\u003e, document.querySelector(\"#root\"));\n}\n\n// 要先 render 一次頁面\nrenderApp();\n```\n\n\u003eReact 支援的 Event Handlers 也可以讀取到原生的 Event Handlers\n\u003e```jsx\n\u003efunction someKindOfFunction(event) {\n\u003e  console.log(event.nativeEvent)\n\u003e}\n\u003e```\n\n## 使用 [[Hook]] 改寫\n\u003e[[Hook]]：[[useState Hook]]\n\u003e[[Destructing Assignment]]\n```jsx\t\nfunction App() { \n\tconst [ count, setCount ] = React.useState(0);\n\tconst [ username, setUsername ] = React.useState('');\n\n\tconst handleClick = () =\u003e setCount(count + 1);\n\tconst handleChange = (e) =\u003e setUsername (e.target.value);\n\n\treturn (\n\t\t\u003cdiv\u003e\n\t\t\t\u003cp\u003eThere have been {count} events.\u003c/p\u003e\n\t\t\t\u003cp\u003e\n\t\t\t\t\u003cbutton onClick={handleClick}\u003eClick Me\u003c/button\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003cp\u003eYou typed: {username}\u003c/p\u003e\n\t\t\t\u003cp\u003e\n\t\t\t\t\u003cinput onChange={handleChange} /\u003e\n\t\t\t\u003c/p\u003e\n\t\t\u003c/div\u003e\n\t);\n}\n\nReactDOM.render(\u003cApp /\u003e, document.querySelector('#root'));\n```\n\n## 補充\n課程原本是這樣寫（模擬 `useState` 的寫法），上述有改成自己比較直覺的理解方式\n```jsx\n// 課程原本寫的事件是這樣寫\nfunction handleClick() {\n  setState({eventCount: state.eventCount + 1})\n}\n// 給 onChange 的功能，event 觸發後便將 state \nfunction handleChange(event) {\n  setState({username: event.target.value})\n}\n\nfunction setState(newState) {\n\tObject.assign(state, newState)\n\trenderApp()\n}\n```\n\u003e[[物件不要傳參考的時候：深層、淺層拷貝#淺層拷貝 Shallow Copy]]\n\n #js/react/component #js/function #js/event","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Component/PropTypes%E5%85%83%E4%BB%B6%E5%8F%83%E6%95%B8%E7%9A%84-Vaildator":{"title":"PropTypes：元件參數的 Vaildator","content":"# PropTypes\nReact 在使用 [[Component：可重複利用、自定參數的元件]] 的時候，參數可以透過 `PropTypes` 來定義規範，避免每次使用元件時，造成非預期的結果\n\n\u003e- 必須安裝：prop-types（[npm](https://www.npmjs.com/package/prop-types )）\n\u003e- 這功能會吃掉很多效能，開發期間可以使用 babel-plugin-transform-react-remove-prop-types 關掉：[npm](https://www.npmjs.com/package/babel-plugin-transform-react-remove-prop-types)\n\n```jsx\nfunction SayHello({firstName, lastName}) {\n  return (\n    \u003cdiv\u003e\n      Hello {firstName} {lastName}!\n    \u003c/div\u003e\n  )\n}\n// 定義 Vaildator\nSayHello.propTypes = {\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n}\n// log error\nconst element = \u003cSayHello firstName={false} /\u003e\n```\n\n```jsx\n// 常用的 PropTypes\n// 要定義的參數名稱: PropTypes.\u003c格式\u003e\n{\n optionalArray: PropTypes.array,\n optionalBool: PropTypes.bool,\n optionalFunc: PropTypes.func,\n optionalNumber: PropTypes.number,\n optionalObject: PropTypes.object,\n optionalString: PropTypes.string,\n optionalSymbol: PropTypes.symbol,\n}\n```\n#js/react/component #html #validators #node/npm","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Component/Rerender-a-React-Application%E6%9C%89%E6%95%88%E7%8E%87%E7%9A%84%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93":{"title":"Rerender a React Application：有效率的重新渲染","content":"# Rerender a React Application\nReact 中，重新渲染的時候不會造成整個區塊都被更新的問題\n重整範圍：有更新的（ `{time}` ）屬性的範圍\n\n```jsx\nfunction tick() {\n  const time = new Date().toLocaleTimeString()\n  const element = (\n  \u003cdiv\u003e\n    \u003cinput value={time} /\u003e\n    \u003cinput value={time} /\u003e\n  \u003c/div\u003e\n  )\n  ReactDOM.render(element, rootElement)\n}\n\nsetInterval(tick, 1000)\n```\n\n\u003e## DOM 的作法\n\u003e重整範圍：`\u003cdiv\u003e`\n\u003e```jsx\n\u003efunction tick() {\n\u003e  const time = new Date().toLocaleTimeString()\n\u003e  const element = `\n\u003e  \u003cdiv\u003e\n\u003e    \u003cinput value='${time}' /\u003e\n\u003e    \u003cinput value='${time}' /\u003e\n\u003e  \u003c/div\u003e\n\u003e\n\u003e  rootElement.innerHTML = element\n\u003e}\n\u003e\n\u003esetInterval(tick, 1000)\n\u003e```\n\n#js/react/component","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Fetch/Pexals-API-with-React":{"title":"Pexals API with React","content":"# Pexals API with React\n\u003e本篇使用 [Pexels](https://www.pexels.com/zh-tw/api/documentation/?) API 做例子，需註冊\n\u003e- [精選相片 API](https://www.pexels.com/zh-tw/api/documentation/?#photos-curated)\n\u003e- [搜尋相片 API](https://www.pexels.com/zh-tw/api/documentation/?#photos-search)\n\u003e[[Fetch]]\n\n- `\u003cmain.jsx\u003e` ：[[ReactDOM：渲染]]\n\t- `\u003cBrowserRouter\u003e` ：[[react-router-dom]]\n\t\t- `\u003cApp /\u003e` ：包含共同區塊的完整頁面\n\t\t\t- `\u003cNav /\u003e` ：[[react-router-dom#Link]]，提供連結\n\t\t\t- `\u003cRoutes\u003e` ：[[react-router-dom]]，回應連結請求\n\t\t\t\t- `\u003cAbout /\u003e` \n\t\t\t\t- `\u003cHomepage /\u003e` ： API 處理，金鑰、lift (input, data（）)，searchClick event 設定、一開啟頁面就先執行一次 searchClick 事件（useEffect）\n\t\t\t\t\t- `\u003cSearch searchClick={searchClick} /\u003e` ：\n\t\t\t\t\t- `\u003cResult data={data} setData={setData} /\u003e` ：map `\u003cPicture /\u003e`\n\t\t\t\t\t\t- `\u003cPicture data={item} /\u003e` ：item 是 map 出來的個別 data，將個別 data 做處理、顯示\n\n## Homepage\n\u003e[[API]] \u003e [[endpoint]]\n\n\u003e[[useState 預設值為 null 的問題]]\n```jsx\nconst Homepage = () =\u003e {\n\t// [[useState 預設值為 null 的問題]]\n\tlet [data, setData] = useState(null)\n\t// Search lift 上來的，\n\tlet [input, setInput] = useState('')\n\n\tconst auth = '金鑰'\n\tconst initialPhotoURL = '\u003c精選照片 endpoint\u003e'\n\t// lift\n\tconst searchPhotoURL = `\u003c搜尋相片 endpoint，path 要依照 input （搜尋結果）state\u003e`\n\t// 傳下去給 Search 用\n\tconst searchClick = async () =\u003e {\n\t\t// fetch 要不要做成一個 function\n\t\tconst dataFetch = await fetch(initialPhotoURL, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\tAuthorization: auth,\n\t\t\t},\n\t\t})\n\t\t\t\t\n\t\tlet parsedData = await dataFetch.json\n\t\tsetData(parsedData.photos)\n\t}\n}\n```\n\n\u003e[[useEffect Hook]]","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Form/Dynamic-Form-in-React":{"title":"Dynamic Form in React","content":"---\n\n# Dynamic Form in React\n\u003e[[Form in React]]\n\n運用 React，讓表單做更即時性的互動\n\n以大小寫限制為例\n- 用戶輸入大寫時，跳出警示「必須使用小寫英文」＋禁用送出表單按鈕\n- 用戶輸入大寫時，自動轉成小寫（推薦）","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Form/Form-in-React":{"title":"Form in React","content":"# Form in React\n\u003e[[Form]]\n\n- `for` 為保留字，React 中要用 `htmlFor`\n- `htmlFor` 可以對應 `input` 的 `id` （或是 `name` ）屬性\n```jsx\nfunction UsernameForm() {\n  function handleSubmit(event) {\n    event.preventDefault()\n    // 有幾種寫法\n    const username = event.target.elements.usernameInput.value\n    alert(`You entered: ${username}`)\n  }\n\n  return (\n    // event 可以寫在 button 上沒錯\n    // 但實際使用上在 input 輸入完按 enter 也可以送出整個表單\n    // 所以放在 form 標籤上可以更好得到控制\n    \u003cform onSubmit={handleSubmit}\u003e\n      \u003cdiv\u003e\n        {/* label 使用 htmlFor, input 用 id, name 都可以對到*/}\n        \u003clabel htmlFor=\"usernameInput\"\u003eUsername:\u003c/label\u003e\n        \u003cinput id=\"usernameInput\" type=\"text\" /\u003e\n      \u003c/div\u003e\n      \u003cbutton type=\"submit\"\u003eSubmit\u003c/button\u003e\n    \u003c/form\u003e\n  )\n}\n```\n\u003e## 使用 for 佳\n\u003e```jsx\n\u003e// 有很多寫法，使用 htmlFor(for) 佳，有唯一性\n\u003econst username = event.target.elements.usernameInput.value\n\u003e```\n\u003e\n\u003e### 依照非唯一性的指標不優\n\u003e```jsx\n\u003e// input 不優，通常會有很多個，建議多 for\n\u003econst username = document.querySelector('input').value\n\u003e// 用 [指定 index] 不優，程式碼元素順序改變的時候會跑掉\n\u003econst username = event.target[0].value\n\u003econst username = event.target.elements[0].value \n\u003e```\n\u003e### useRef 視狀況用\n\u003e```jsx\n\u003e// 如果沒必要不用用 useRef\n\u003econst usernameInputRef = React.useRef()\n\u003e// useRef\n\u003econst username = usernameInputRef.current.value\n\u003e```\n\u003e```jsx\n\u003e\u003cinput ref={usernameInputRef} /\u003e\n\u003e```\n\n#js/react #form #html","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/%E8%87%AA%E8%A8%82-Hooks":{"title":"自訂 Hooks","content":"# 自訂 Hooks\n\u003e[[Hook]]\n\n- 若有要一起使用的 [[Hook]] 可以把他們加到一個函式內，方便使用\n- 慣例上會以 use 作為開頭命名（[[eslint-plugin-react-hooks]] 會加以辨識）\n\n```jsx\n// 將 useState, useEffect 從 Greeting () 元件抽出，組合成一個自訂 Hook\nfunction useLocalStorageState(key, defaultValue = '') {\n\t// [[Destructing Assignment]]\n\t// 命名保有通用性，不管什麼值都符合\n  const [state, setState] = React.useState(\n    // key 保有通用性，defaultValue 保有可自訂性（呼叫函式時可以參數設定）\n    () =\u003e window.localStorage.getItem(key) || defaultValue,\n  )\n\n  React.useEffect(() =\u003e {\n    // 通用性\n    window.localStorage.setItem(key, state)\n    // 兩個值都可能透過 localStorage 更動，兩個都要雙向同步\n    // [[Dependency array]]\n  }, [key, state])\n\n  return [state, setState]\n}\n\nfunction Greeting() {\n  // 取得 [state, setState] 將他存到 [name, setName] 裡\n  const [name, setName] = useLocalStorageState('name')\n\t// setName 函式\n\t\n  return (\u003c渲染內容 /\u003e)\n}\n```\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/Colocating":{"title":"Colocating","content":"# Colocating\n在 [[State Lifting]] 時，因為子層多個元件需要同時用一個 state 資訊，所以將該 state 提升到母層使用，並以 props 的方式下放到子層做使用\n\n但遇到修改 code 時，共用的 state 不再需要共用時（只剩下一個元件要使用），就必須做 Colocating，將在母層的 state 回歸需要的子層，保持 state 離使用環境最近的原則\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/Dependency-array":{"title":"Dependency array","content":"# Dependency array\n\u003e[[useEffect Hook]] \n\n\u003e[[eslint-plugin-react-hooks]] 來幫助自己寫 [[Hook]] 的時候不會東漏一個設定西漏一個設定\n\n## 使用情境\n- `useEffect` 的第二個可用參數，放入包含需要同步的值\n- 可以讓 [[side-effect]] 的另一端資料與 React 維持雙向同步\n- 如果沒有另一端資料不需要被更新，就不會重新執行\n\n### 每次 render 都執行\n不放 [[Dependency array]]\n```jsx\nuseEffect(() =\u003e {\n  // 每次 render 都執行\n});\n```\n\n### 只在在第一次 render 執行\n空 [[Dependency array]]\n```jsx\nuseEffect(() =\u003e {\n  // 只在在第一次 render 執行\n}, []);\n```\n\n### 第一次＋有更新的時候執行\n指定 [[Dependency array]] 的 Props 或 state values\n```jsx\nuseEffect(() =\u003e {\n\t// 第一次 render 執行\n\t// 之後如果這個 array 內容更新的話也會執行\n}, [prop, state]);\n```\n\n## 實例\n\n```jsx\n// 以下 Greeting() 的 useEffect\nReact. useEffect (() =\u003e {\n  console.log('useEffect 被執行囉');\n  window.localStorage.setItem('name', name)\n  // Dependency array\n\t// 確認 localStorage 沒有被更新的話，就不需要隨著 App() 重新執行\n}, [name])\n```\n```jsx\n// Greeting 元件會匯入到 App 內執行\nfunction Greeting() {\n  // useState: [name, setName]\n  // setName 功能\n  // useEffect：建議搭配 [[Dependency array]] 來維持雙向同步\n  return \u003c欲渲染內容 /\u003e\n}\n\nfunction App() {\n  // 每次 count 更新，就會 re-render App()\n  const [count, setCount] = React.useState(0)\n\n  // 每次 App() render，Greeting() 元件就會被 render\n\t// render 時，Greeting() 的 useEffect 會一起被執行\n  return (\n    \u003c\u003e\n      \u003cbutton onClick={() =\u003e setCount(c =\u003e c + 1)}\u003e{count}\u003c/button\u003e\n      \u003cGreeting /\u003e\n    \u003c/\u003e\n  )\n}\n```\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/Hook":{"title":"Hook","content":"# Hook\n- 可以改變網頁的特定部分（[[State]]）而不動到其他內容\n- 向後兼容\n- [[useState Hook]]\n- [[useEffect Hook]]\n- [[自訂 Hooks]]\n- [[useRef Hook]]\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/Hook-Flow":{"title":"Hook Flow","content":"# Hook Flow\n![](https://raw.githubusercontent.com/donavon/hook-flow/master/hook-flow.png)\n\n\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/Lazy-Initializer":{"title":"Lazy Initializer","content":"## Lazy Initializer\n\u003e[[useState Hook]]\n\u003e[[useEffect Hook]]\n\n只要每次 `name` 更新就會 re-render 這個 app（ `Greeting()` ），但每次執行時就檢查一次初始值吃效能不實際\n這個功能提供初始狀態只會在需要檢查的時候執行\n\n```jsx\nfunction Greeting() {\n  const [name, setName] = React.useState(\n\t\t// 放到一個函式內即可\n\t\t// 只有重整網站後第一次需要看 localStorage\n\t\t// 平常都是看 input 輸入不用執行\n\t\t() =\u003e { window.localStorage.getItem('name') || '' },\n  )\n}\n```\n\n\n\u003e[[Logic OR]]\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/State":{"title":"State","content":"# State\n\u003e[[useState Hook]]\n- 一個狀態，可以拿來設定說這個狀態改變的話哪裡要一起更動\n- 元件的狀態\n- React 當中每個元件都可以獨立處理（不影響其他頁面上的元素）\n- 可以利用這個狀態可以重複使用\n- 每當 State, props 更新，都會自動 re-render\n- 原本要用 DOM 來處理（querySelector, addEventListener 等等）\n\u003e[[Rerender a React Application：有效率的重新渲染]]\n\n\n## 實例\n```jsx\n// 這樣不會執行\nconst App = () =\u003e {\n\tlet name = 'Wang'\n\tconst changeNameHandler = () =\u003e {\n\t\tname = 'Chen'\n\t}\n\treturn (\n\t\t\u003cdiv\u003e\n\t\t\t\u003ch1\u003e{name}\u003c/h1\u003e\n\t\t\t\u003cbutton onClick={changeHandler}\u003eChange Name\u003c/button\u003e\n\t\t\u003c/div\u003e\n\t)\n}\n```\n要使用 [[useState Hook]] 來寫\n```jsx\nconst App = () =\u003e {\n\tlet [name, setName] = useState('Wang')\n\tconst changeNameHandler = () =\u003e {\n\t\tsetName('Chen')\n\t}\n\treturn (\n\t\t\u003cdiv\u003e\n\t\t\t\u003ch1\u003e{name}\u003c/h1\u003e\n\t\t\t\u003cbutton onClick={changeHandler}\u003eChange Name\u003c/button\u003e\n\t\t\u003c/div\u003e\n\t)\n}\n```\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/State-Lifting":{"title":"State Lifting","content":"# State Lifting\n當元件一多的時候，會遇到需要跨元件共享同一個資料的狀況\n- [[State Lifting]]\t做的就是將子層元件的 state 提升到母層\n- 再下放到子層的 props 做使用\n- 反過來叫做 [[Colocating]]\n\n\u003e[[State]]：每個元件都有自己獨立的 state, props，彼此不影響\n\n\u003e未來學到 [[Redux]] 就可以解決這問題了，如果專案大了會需要用到\n```shell\n// 每個元件都有自己的 state, props\n\u003cApp /\u003e\n|\t|- props: X\n|\t|- state: X\n|- \u003cCreate /\u003e\n|\t\t\t|- props:\n|\t\t\t|- state: input, message\t# 無法共用\n|- \u003cInfo /\u003e\n|\t\t\t|- props: X\n|\t\t\t|- state: X\n```\n```shell\n// 每個元件都有自己的 state, props\n\u003cApp /\u003e\n|\t|- props: X\n|\t|- state: message\t\t\t# state lifting\n|- \u003cCreate /\u003e\n|\t\t\t|- props: message\t# 下放\n|\t\t\t|- state: input \t# 無法共用\n|- \u003cInfo /\u003e\n|\t\t\t|- props: message\t# 下放\n|\t\t\t|- state: X\n```\n```jsx\n// 母層 \nimport React from 'react'\n// 匯入子層\nimport Create from './Create';\nimport Info from './Info';\n\nconst App = () =\u003e {\n\tlet [message, setMessage] = useState([])\n  let [input, setInput] = useState(\"\")\n\n\treturn (\n\t\t\u003cdiv\u003e\n\t\t\t{/* 將 lift 上來的 state 轉成 props 傳給子層 */}\n\t\t\t\u003cCreate message={message} setMessage={setMessages} /\u003e\n\t\t\t\u003cInfo message={message} setMessage={setMessages} /\u003e\n\t\t\u003c/div\u003e\n\t)\n}\n```\n\n```jsx\n// 子層\n// 傳下來的 props 記得寫進去\nconst Create = ({message, setMessage}) =\u003e {\n\t// 這兩行 state lifting 到母層\n  // let [message, setMessage] = useState([])\n  // let [input, setInput] = useState(\"\")\n\n  const submitHandler = (e) =\u003e {\n    e.preventDefault()\n    setMessage([...message, input])\n    setInput(\"\")\n  }\n  const inputHandler = (e) =\u003e {\n    setInput(e.target.value)\n  }\n  return (\n    \u003cform\u003e\n      \u003cinput type=\"text\" onChange={inputHandler} value={input} /\u003e\n      \u003cinput type=\"button\" onClick={submitHandler} value=\"Submit\" /\u003e\n    \u003c/form\u003e\n  )\n}\nexport default Create\n```\n\u003e[[Delete in React]]\n```jsx\nconst Info = ({message, setMessage}) =\u003e {\n  return (\n    \u003cul\u003e\n\t\t\t{message.map(msg =\u003e \u003cli\u003e{msg}\u003c/li\u003e)}\n\t\t\u003c/ul\u003e\n  )\n}\n\nexport default Info\n```\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/eslint-plugin-react-hooks":{"title":"eslint-plugin-react-hooks","content":"[npm](https://www.npmjs.com/package/eslint-plugin-react-hooks)\n\n撰寫 [[Hook]] 時的偵錯工具模組\n\n#js/react/hook #node/npm","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/side-effect":{"title":"side-effect","content":"# side-effect\n- 在 React 中，作用域以外發生的事情\n- 例如\n\t- 網路請求\n\t- 與第三方溝通\n\t- 存取 [[Local Storage]]\n\t- 等等等\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/useEffect-Hook":{"title":"useEffect Hook","content":"# useEffect Hook\n處理 [[side-effect]] 的 [[Hook]]\n\n## 使用情境\n`useEffect` 會在每次 render 時執行，可以使用 [[Dependency array]] 來限定執行時機\n\n## 以儲存資料到 [[Local Storage]] 為例\n\n\u003e[[自訂 Hooks]]：若有要一起使用的 [[Hook]] （這裡以 [[useEffect Hook]], [[useState Hook]] 為例）可以把他們加到一個函式內，方便使用\n\n```jsx\nconst App = () =\u003e {\n\t// useState: name, setName\t\n\t// setName 功能\n\t// useEffect\n\t\n\treturn \u003c渲染的內容 /\u003e\n}\n```\n### 先完成 useState 設定\n\u003e參照： [[useState Hook]]，設定了 `[name, setName]`\n\n### name 存入 LocalStorage\n1. 當 `name` 透過 `useState` 更新（自動 re-render 這個 app）\n2. 觸發 `useEffect` 更新 [[Local Storage]]（單向更新）\n\n\u003e#### 選用（效能考量）\n\u003e3. [[Dependency array]]：可以讓 [[side-effect]] 的另一端資料與 React 維持雙向同步\n\n```jsx\n// name 更新 -\u003e 更新 localStorage（注意：這是單向更新）\nReact.useEffect(() =\u003e {\n  console.log('useEffect 被執行囉');\n  window.localStorage.setItem('name', name)\n// [[Dependency array]]：使資料雙向同步\n}, [name])\n```\n\n### 檢查 LocalStorage 內有沒有既有資料\n用來剛開啟網頁（或是重整網頁）時用\n\n\u003e參照 [[Lazy Initializer]]（[[useState Hook]]）\n\n#js/react/hook","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/useRef-Hook":{"title":"useRef Hook","content":"---\n# useRef Hook\n\n\u003e `useRef` 的 ref 與[[物件傳參考]]中提到的 reference 是同一件事\n\u003e 指的是「變數指向記憶體位置上對應到的值」\n\n- 在 React 中用原始的 DOM 方式（ `querySelector` 之類）操作元素並不直覺，使用 `useRef` [[Hook]]，可以直接在元件裡，直接操作元件\n- 允許 render 期間可以維持相同的值\n- 可以儲存可變動值，但不會觸發 re-render\n- `useRef` 只會回傳一個  `current` 屬性\n- `useRef()` 的 argument 可放入初始值\n\n\u003e[[useState Hook]] 更動值的的時候就會觸發 re-render\n\n\u003e[[Form in React]]：不一定所有狀況都適合用 `useRef`","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Hook/useState-Hook":{"title":"useState Hook","content":"---\n# useState Hook\n```jsx\nimport React, { useState } from 'react'\n// 有匯入 useState 的話下面的 React.useState 可簡寫為 useState\n```\n```jsx\n// name: 自訂名稱，setName：name 的更改 state 用函數\n// 初始狀態任意資料類型皆可\n// 更詳細的初始狀態設定：[[Lazy Initializer]]\nconst [name, setName] = React.useState('name 初始狀態')\n// setName 參數放入要更新成的內容\n// setName 會自動 re-render 該元件，且不影響其他頁面上元素\nconst handleChange = event =\u003e setName('想要 name 怎麼變')\n```\n\u003e關於 `[name, setName]` 寫法參照：\n\u003e- [[Destructing Assignment]]\n\u003e- [[Event Handlers]]\n\n使用 useState [[Hook]]，來控制元件的 [[State]]，並且用 [[Event Handlers]] 來規劃如何觸發\n\n\u003e再用 [[useEffect Hook]] 看如何搭配 [[side-effect]] 來寫更複雜的 [[Hook]]，並且改良 `useState` 的初始值設定 （[[Lazy Initializer]]）\n\n\u003e[[State Lifting]]：寫多層次的 react 專案時會遇到的問題","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/%E4%B8%8A%E5%B1%A4%E5%A4%9A%E5%8C%85%E4%B8%80%E5%80%8B%E6%A8%99%E7%B1%A4":{"title":"上層多包一個標籤","content":"## 上層多包一個標籤\n\u003e[[同時生成多個標籤]]\n```jsx\nconst helloElement = React.createElement('span', null, 'Hello')\nconst worldElement = React.createElement('span', null, 'World')\n\n// 這樣寫的話外面會多一層 div 看使用需求\nconst element = React.createElement(\n\t'div',\n\tnull,\n\t[\n\t\thelloElement,\n\t\t' ',\n\t\tworldElement\n\t]\n)\n```\n\n#js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/%E5%90%8C%E6%99%82%E7%94%9F%E6%88%90%E5%A4%9A%E5%80%8B%E6%A8%99%E7%B1%A4":{"title":"同時生成多個標籤","content":"# 同時生成多個標籤\n因為 [[ReactDOM：渲染]] 不能同時渲染多個內容，想要生成多個有兩種作法，寫法上大致一樣，差在上級有沒有多包一個標籤\n- [[上層多包一個標籤]]\n- [[React.Fragment：同時生成複數標籤]]\n\n\n#js/react/jsx","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/Babel":{"title":"Babel","content":"# Babel\n- JavaScript [[Compiler]]，可以將 [[JSX]] 編譯成原始的 React 寫法\n- 不用特別裝，VScode\n\n\n\n```js\nlet i = 1;\n```\n\n\n```js\nconst express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst authRoute = require('./routes/auth-route');\n\n\nmongoose.connect(process.env.DB_CONNECT).then(() =\u003e {\n\tconsole.log('成功連上 mongoDB Atlas');\n}).catch((err) =\u003e {\n\tconsole.log(err);\n})\n\n\n```\n\n#js/react/jsx","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/Compiler":{"title":"Compiler","content":"編譯程式","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/JSX":{"title":"JSX","content":"# JSX (JavaScript eXtension)\n- React 的原始的寫法[[生成標籤：React.createElement()]] 很複雜，通常都是透過 JSX 的功能來寫，再透過 [[Babel]] 編譯回原始寫法\n- 可以讓 JS 寫得像 HTML 一樣 \n- React 的擴充功能，[[安裝 React]]會一併安裝\n- 副檔名是 `.jsx`\n\n```jsx\nfunction App() {\n\treturn (\n\t\t// 長相就像 HTML \n\t\t\u003cdiv\u003e\n\t\t\t\u003ch1\u003elorem\u003c/h1\u003e\n\t\t\t\u003cp\u003elorem\u003c/p\u003e\n\t\t\u003c/div\u003e\t\t\t\n\t)\n}\n```\n\n#js/react/jsx","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/JSX-%E5%85%A7%E7%9A%84-HTML-%E5%8A%A0%E5%85%A5-JS-%E7%A8%8B%E5%BC%8F%E7%A2%BC":{"title":"JSX 內的 HTML 加入 JS 程式碼","content":"# JSX 內的 HTML 加入 JS 程式碼\n在 [[JSX]] 裡 return 的 HTML 內想加入 JS 程式碼的話需要使用 `{}`\n\n- [[JSX HTML 內使用變數]]\n- [[JSX HTML 內寫迴圈]]\n- [[JSX HTML 內使用 if (Tenary Operator)]]\n\n#js/react/jsx","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/JSX-%E7%94%9F%E6%88%90%E6%A8%99%E7%B1%A4":{"title":"JSX 生成標籤","content":"# JSX 生成標籤\n\u003e雖然他長相像 HTML，但更可以做 JS 內才能做的事： [[JSX 內的 HTML 加入 JS 程式碼]]\n\n- JSX 的寫法跟一般 HTML 差不了多少，編譯完可以看到原始 [[生成標籤：React.createElement()]] 的寫法\n\n```jsx\n// JSX 寫法\nconst HellowElement = \u003ch1 className=\"title\"\u003eHello World\u003c/h1\u003e\n```\n```jsx\n// JSX 編譯後\nconst HelloElement = React.createElement(\n  'h1',\n  { className: 'title' },\n  'Hello World'\n)\n```\n\u003e標籤內文寫法參照：[[children]]\n\u003e等同於 textContent\n\n#js/react/jsx","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/JSX-HTML-%E5%85%A7%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8":{"title":"JSX HTML 內使用變數","content":"## JSX HTML 內使用變數\nJSX 可以讓 html 像 js 一樣重複利用，更可以在 JSX 標籤內帶入 JS 程式碼\n\n\u003e如果是要元件重複利用（可以導入參數）：[[Component：可重複利用、自定參數的元件]]\n\n```jsx\n// 可以單純存值\nconst children = 'Hello'\nconst className = 'container'\n```\n```jsx\n// 也可以存 JSX 標籤\n// 在 JSX 標籤內想寫 JS 程式碼要用 {} 包起來\nconst element = \u003cdiv className={className}\u003e{children}\u003c/div\u003e\n```\n\u003e[[定義屬性(props)]]\n\n\n```jsx\nconst App = () =\u003e {\n  let people = ['Mike', 'Ken', 'Sam']\n  return (\n    \u003cdiv\u003e\n      {/* 加入{} 就可以寫 JS 了*/}\n      \u003ch1\u003e{ 3 * 2 }\u003c/h1\u003e\n      \u003cp\u003eMy name is { name[1] }\u003c/p\u003e\n    \u003c/div\u003e\n  )\n};\n```\n\n#js/react/jsx #js/variable","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/JSX-HTML-%E5%85%A7%E4%BD%BF%E7%94%A8-if-Tenary-Operator":{"title":"JSX HTML 內使用 if (Tenary Operator)","content":"## JSX HTML 內使用 if (Conditional (ternary) operator)\n在 JSX 內可以寫 JS，但是有限制的，必須寫表現式\n```jsx\nfunction CharacterCount({text}) {\n  return (\n    \u003cdiv\u003e\n    {/* if 必須要用表現式 Conditional (ternary) operator */}\n      The text \"{text}\" has {text.length ? \u003cstrong\u003e{text.length}\u003c/strong\u003e : 'No'} characters\n    \u003c/div\u003e\n  )\n}\n```\n\n```js\nfunction example(…) {\n    return condition1 ? value1\n         : condition2 ? value2\n         : condition3 ? value3\n         : value4;\n}\n```\n#js/react/jsx #js/logic","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/JSX/JSX-HTML-%E5%85%A7%E5%AF%AB%E8%BF%B4%E5%9C%88":{"title":"JSX HTML 內寫迴圈","content":"## JSX HTML 內寫迴圈\n```jsx\nconst App = () =\u003e {\n  let people = ['Mike', 'Ken', 'Sam']\n  return (\n    \u003cdiv\u003e\n      \u003cp\u003eList of team member:\u003c/p\u003e\n      {/* 箭頭函式可以簡化 */}\n      {/*\n        people.map(person =\u003e {\n          reutrn \u003cp\u003e{name}\u003c/p\u003e\n        })\n      */}\n      {/* 迴圈要記得，return 的 HTML 再包一次 {} */}\n      {\n        people.map(person =\u003e (\u003cp\u003e{name}\u003c/p\u003e)\n      }\n    \u003c/div\u003e\n  )\n};\n```\n\u003e[[陣列的循環 for, forEach, map]]\n\u003e[[4.箭頭函式 arrow function]]\n\n#js/react/jsx #js/loop","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/List/Delete-in-React":{"title":"Delete in React","content":"# Delete in React\n\u003e用 [[State Lifting]] 的範例\n\n目前內容\n- `\u003cApp /\u003e` ：母層，[[State Lifting]] 有 input, message 的 state\n\t- `\u003cCreate /\u003e`：子層，輸入 input 用（存到 message）\n\t- `\u003cInfo /\u003e`：子層，顯示 message\n\t\t- `\u003cMessage /\u003e` ：孫層，每個 message 條目，需要參照 [[Key prop]]\n\n\u003e本篇接續 [[Key prop]]\n\n```jsx\nconst Info = ({message, setMessage}) =\u003e {\n\treturn (\n\t\t\u003cul\u003e\n\t\t\t{/* 在 Create 當中被儲存的每個 message 都有 input, id 屬性（一起被 lift 了） */}\n\t\t\t{\n        message.map(msg =\u003e\n          \u003cMessage key={msg} msg={msg.input} message={message} setMessage={setMessage} key={msg.id} /\u003e\n        )\n      }\n\t\t\u003c/ul\u003e\t\n\t)\n}\n```\n\n```jsx\n// 孫層\nconst Message = ({msg, message, setMessage}) =\u003e {\n\tconst deleteHandler = () =\u003e {\n\t\t// 因為是刪除功能，所以點擊到要刪除的 message 之外都要保留，所以 id 不相等的都要顯示\n\t\tsetMessage(message.filter(m =\u003e m.id !== msg.id))\n\t}\n\treturn (\n\t\t\u003cli\u003e\n\t\t\t\u003cp\u003e{msg.input}\u003c/p\u003e\n\t\t\t\u003cbutton onClick={deleteHandler}\u003e刪除\u003c/button\u003e\n\t\t\u003c/li\u003e\n\t)\n}\n```\n\u003e[[filter()]]  \n\n\n\n\n#js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/List/Key-prop":{"title":"Key prop","content":"# Key prop when Rendering List\n\u003e 使用 [[UUID]] 來生生成 key prop\n\n\u003e與 [[Delete in React]] 同一個範例，做完 key prop 就可以做 delete 功能了\n\n## 取得 list 資料 -\u003e 存到 array（state）\n\n^3083f9\n\nReact 會因為在 render `array` （例如用 [[陣列的循環 for, forEach, map]] 功能）的時候，沒有加上 `key` 這個唯一性的屬性而跳出警示\n可以自己寫也可以使用 [[UUID]] 來自動生成\n```jsx\n// 匯入 UUID 來生成 key prop\nimport { v4 as uuidv4 } from 'uuid';\n\n// 有 state lifting 到母層\nconst Create = ({message, setMessage}) =\u003e {\n  const submitHandler = (e) =\u003e {\n    e.preventDefault()\n\t\t// 剛生成 message 的時候就可以給她 key prop 了\n    setMessage([...message, {input, id: uuidv4()}])\n    setInput(\"\")\n  }\n  const inputHandler = (e) =\u003e {\n    setInput(e.target.value)\n  }\n  return (\n    \u003cform\u003e\n      \u003cinput type=\"text\" onChange={inputHandler} value={input} /\u003e\n      \u003cinput type=\"button\" onClick={submitHandler} value=\"Submit\" /\u003e\n    \u003c/form\u003e\n  )\n}\n```\n\u003e### 為什麼需要 key\n\u003e因為用其他非唯一性的屬性作為 event handler 的參考的話，很容易出現問題\n\u003e \u003e[[Delete in React]]\n\u003e\n\u003e ```jsx\n\u003e // 例如做刪除 list 功能時\n\u003econst deleteHandler = () =\u003e {\n\u003e// 使用文字做基準的話，有兩個 li 都是相同內文的話就會一起刪掉\n\u003esetMessage (message. filter (m =\u003e m !== msg))\n\u003e}\n\u003e ```\n\n#js/react","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/React":{"title":"React","content":"---\n# React\n- Front-End 框架（不是 Framework） \n- 三大前端框架之一（Vue.js, Angular, React）\n-  Facebook 製作，2013 公開，2018 大更新\n- Component：可重複利用的元件\n- [[Hook]]\n\n\u003e- 最淺顯易懂：[w3schools: React](https://www.w3schools.com/react/default.asp)\n\u003e- 很多範例：[egghead: the-beginner-s-guide-to-react](https://egghead.io/courses/the-beginner-s-guide-to-react)\n\u003e- 註：官方文件還保留很多先今不太常用的寫法，不建議先看官方文件","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/React-bootstrap/React-bootstrap":{"title":"React-bootstrap","content":"# React-bootstrap\n- 不包含 styling 部分（SCSS），要客製化要再匯入原生 BS\n- 符合 React 的特性，不會直接操作實體 DOM 元素。\n- 配合 React，將各式各樣的元件已經 Component 化，減少整個程式碼的複雜度。\n\n\n- [[React-bootstrap 建置]]\n\n# 'as' prop\n```jsx\n\u003cRow className=\"mx-0\"\u003e\n  \u003cButton as={Col} variant=\"primary\"\u003eButton #1\u003c/Button\u003e\n  \u003cButton as={Col} variant=\"secondary\" className=\"mx-2\"\u003eButton #2\u003c/Button\u003e\n  \u003cButton as={Col} variant=\"success\"\u003eButton #3\u003c/Button\u003e\n\u003c/Row\u003e\n```\n```jsx\n// as 的部分渲染後長這樣\n\u003cdiv role=\"button\" tabindex=\"0\" class=\"btn btn-primary col\"\u003eButton #1\u003c/div\u003e\n```\n#js/react/bs","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/React-bootstrap/React-bootstrap-%E5%BB%BA%E7%BD%AE":{"title":"React-bootstrap 建置","content":"## 安裝\n\u003e[官網](https://react-bootstrap.github.io/getting-started/introduction/#installation)\n\n```shell\nnpm install react-bootstrap bootstrap@5.1.3\n```\nBS 客製化的話要再多安裝原生 BS\n```shell\nnpm install bootstrap\n```\n\n\n## 使用元件\n使用元件要個別匯入\n```jsx\nimport Button from 'react-bootstrap/Button';\n```\n\u003e```jsx\n\u003e// 或是這樣寫也還可（建議前者）\n\u003eimport { Button } from 'react-bootstrap';\n\u003e```\n\n## 使用 JS\n-  `react-bootstrap.js` \n-  `react-bootstrap.min.js`\n```jsx\nimport \"../node_modules/react-bootstrap/dist/react-boostrap.js\";\n```\n\n\n#js/react #bs","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Routing/Nested-Routesreact-router-dom-%E6%9C%AA%E5%AE%8C%E6%88%90":{"title":"Nested Routes(react-router-dom （未完成）","content":"## Nested Routes\n\u003e[[react-router-dom]]\n\nYou may have noticed when clicking the links that the layout in `App` disappears. Repeating shared layouts is a pain in the neck. We've learned that most UI is a series of nested layouts that almost always map to segments of the URL so this idea is baked right in to React Router.\n\nLet's get some automatic, persistent layout handling by doing just two things:\n\n1.  Nest the routes inside of the App route\n2.  Render an Outlet\n\nFirst let's nest the routes. Right now the expenses and invoices routes are siblings to the app, we want to make them _children_ of the app route:\n```jsx\nimport { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport App from \"./App\";\nimport Expenses from \"./routes/expenses\";\nimport Invoices from \"./routes/invoices\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  \u003cBrowserRouter\u003e\n    \u003cRoutes\u003e\n      \u003cRoute path=\"/\" element={\u003cApp /\u003e}\u003e\n        \u003cRoute path=\"expenses\" element={\u003cExpenses /\u003e} /\u003e\n        \u003cRoute path=\"invoices\" element={\u003cInvoices /\u003e} /\u003e\n      \u003c/Route\u003e\n    \u003c/Routes\u003e\n  \u003c/BrowserRouter\u003e,\n  rootElement\n);\n```\nWhen routes have children it does two things:\n\n1.  It nests the URLs (`\"/\" + \"expenses\"` and `\"/\" + \"invoices\"`)\n2.  It will nest the UI components for shared layout when the child route matches:\n\nHowever, before (2) will work we need to render an `Outlet` in the `App.jsx` \"parent\" route.\n\n```jsx\nimport { Outlet, Link } from \"react-router-dom\";\nexport default function App() {\n  return (\n    \u003cdiv\u003e\n      \u003ch1\u003eBookkeeper\u003c/h1\u003e\n      \u003cnav\n        style={{\n          borderBottom: \"solid 1px\",\n          paddingBottom: \"1rem\",\n        }}\n      \u003e\n        \u003cLink to=\"/invoices\"\u003eInvoices\u003c/Link\u003e |{\" \"}\n        \u003cLink to=\"/expenses\"\u003eExpenses\u003c/Link\u003e\n      \u003c/nav\u003e\n      \u003cOutlet /\u003e\n    \u003c/div\u003e\n  );\n}\n```\nNow click around again. The parent route (`App.js`) persists while the `\u003cOutlet\u003e` swaps between the two child routes (`\u003cInvoices\u003e` and `\u003cExpenses\u003e`)!\n\nAs we'll see later, this works at _any level_ of the route hierarchy and is incredibly powerful.\n\n\n#js/react #routing #未完成","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Routing/react-router-dom":{"title":"react-router-dom","content":"---\n# react-router-dom\n```shell\nnpm install react-router-dom\n```\n\n- Routing\n- Link (`a` 標籤)\n\n\u003e[[react-router-dom 版本差異]]","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Routing/react-router-dom-%E5%B0%8E%E5%90%91%E6%96%B0%E9%A0%81%E9%9D%A2%E6%99%82%E4%B8%8D%E6%9C%83%E5%9B%9E%E5%88%B0%E9%A0%81%E9%9D%A2%E9%A0%82%E7%AB%AF":{"title":"react-router-dom 導向新頁面時不會回到頁面頂端","content":"# react-router-dom 導向新頁面時不會回到頁面頂端\n\u003e[Scroll Restoration](https://v5.reactrouter.com/web/guides/scroll-restoration)\n\n新增 [scroll 到頂端的元件]((https://v5.reactrouter.com/web/guides/scroll-restoration))\n```jsx\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() =\u003e {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n```\n在 `BrowserRouter` 下方加入這個元件\n```jsx\n// 雜七雜八匯入\n\nReactDOM.render(\n  \u003cReact.StrictMode\u003e\n    {/* 用 BrowserRouter 包住 */}\n    \u003cBrowserRouter\u003e\n    \u003cScrollToTop /\u003e\n      {/* App 元件內為整個頁面，包含共同區塊 Nav, Footer */}\n      \u003cApp /\u003e\n    \u003c/BrowserRouter\u003e\n  \u003c/React.StrictMode\u003e,\n  document.getElementById(\"root\")\n);\n```\n\n#js/react #routing","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Routing/react-router-dom-%E7%89%88%E6%9C%AC%E5%B7%AE%E7%95%B0":{"title":"react-router-dom 版本差異","content":"# react-router-dom 版本差異\nWilson 課程影片是 5，該版本有 Switch 的寫法\n\u003e [[react-router-dom]]\n```jsx\nimport { Switch, Route } from \"react-router-dom\";\n \nfunction App() {\n  return (\n    \u003cdiv className=\"App\"\u003e\n      \u003cNav /\u003e\n      {/* 主要更改部分 */}\n      {/* Switch 包兩個 Route，Route 包一個頁面（網頁共同部分 Nav, Footer 不含在內） */}\n      \u003cSwitch\u003e\n        // exact 代表要完全符合 path 的值, 才會顯示\n        \u003cRoute path=\"/\" exact\u003e\n          \u003cHomepage /\u003e\n        \u003c/Route\u003e\n        \u003cRoute path=\"/about\" exact\u003e\n          \u003cAbout /\u003e\n        \u003c/Route\u003e\n      \u003c/Switch\u003e\n      \u003cFooter /\u003e\n    \u003c/div\u003e\n  );\n}\n```\n\n```jsx\nimport { Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    \u003cdiv className=\"App\"\u003e\n      \u003cNav /\u003e\n      {/* Switch 拿掉，改成 Routes 包兩個 Route，Route 內頁面寫在 element 即可*/}\n      \u003cRoutes\u003e\n        \u003cRoute path=\"/\" element={\u003cHomepage /\u003e} /\u003e\n        \u003cRoute path=\"/about\" element={\u003cAbout /\u003e} /\u003e\n      \u003c/Routes\u003e\n      \u003cFooter /\u003e\n    \u003c/div\u003e\n  );\n}\n```\n\n#js/react #routing #node/npm","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Styling/%E7%94%A8%E5%85%83%E4%BB%B6%E8%99%95%E7%90%86-CSS-Styling":{"title":"用元件處理 CSS Styling","content":"# 用元件處理 CSS Styling\n\u003e[[Component：可重複利用、自定參數的元件]]\n\u003e[[Styling in JSX]]\n\n- 會多次出現的類似內容，就可以做成元件\n- 內容若有需要微調的需求，則設定參數供調整\n\n## 找出類似內容\n```jsx\nconst element = (\n\t\u003cdiv\u003e\n\t\t{/* 觀察有沒有可以異中求同的要素： className 有 box */}\n\t\t\u003cdiv className=\"box box-small\"\u003esmall box\u003c/div\u003e\t\t\n\t\t\u003cdiv className=\"box box-medium\"\u003emedium box\u003c/div\u003e\n\t\u003c/div\u003e\n)\n```\n\n## 拉出來做成元件\n\u003e[[Component：可重複利用、自定參數的元件#生成元件]]\n```jsx\n// 建立 Box 元件\nfunction Box(props) {\n\treturn (\n\t\t// 最一開始長這樣，沒有異中求同，只有單純元件化\n\t\t\u003cdiv {...props} /\u003e\n\t)\n}\n// 改寫\nconst element = (\n\t\u003cdiv\u003e\n\t\t{/* 全部屬性都要手動寫 */}\n\t\t\u003cBox className=\"box box-small\"\u003esmall box\u003c/Box\u003e\t\t\n\t\t\u003cBox className=\"box box-medium\"\u003emedium box\u003c/Box\u003e\n\t\u003c/div\u003e\n)\n```\n\n## 不同的內容則拉出來做自訂參數\n\u003e [[string]]：可以使用 `trim()` 避免 `className` 字串沒有寫額外 `className` 的空白字串\n```jsx\n// 預設 className 為空字串，不然會顯示 undefined\nfunction Box({className = '', ...rest}) {\n\treturn (\n\t\t// 注意包在 HTML 標籤內要寫 JS 程式碼的話要用 {} 包起來\n\t\t\u003cdiv className={`box ${className}`} {...rest} /\u003e\n\t)\n}\nconst element = (\n\t\u003cdiv\u003e\n\t\t{/* class 裡共通的 box 就可以拿掉了 */}\n\t\t\u003cBox className=\"box-small\"\u003esmall box\u003c/Box\u003e\t\t\n\t\t\u003cBox className=\"box-medium\"\u003emedium box\u003c/Box\u003e\n\t\u003c/div\u003e\n)\n```\n\u003e## 注意\n\u003e不要這樣寫，如果手動寫 `props` 的時候寫了 `className` 屬性會蓋過前者（只能有一個 `className`）\n\u003e```jsx\n\u003e\u003cdiv className=\"box\" {...props} /\u003e\n\u003e```\n\n## 改良：可以再改良元件的易讀性（就算不懂 CSS 也可以改元件）\n### 生成\n```jsx\nfunction Box({className = '', size, ...rest}) {\n\t// 如果有寫入 sizeClassName 就新增一個指定的 class 名字\n\tconst sizeClassName = size ? `box--${size}` : ''\n\treturn (\n\t\t\u003cdiv className={`box ${sizeClassName}`}, {size}, {...rest} /\u003e\n\t)\n}\n```\n### 使用\n```jsx\nconst element = (\n\t\u003cdiv\u003e\n\n\t\t\u003cBox size=\"small\"\u003esmall box\u003c/Box\u003e\t\t\n\t\t\u003cBox size=\"medium\"\u003emedium box\u003c/Box\u003e\n\t\u003c/div\u003e\n\n)\n\n```\n\n## Inline Styling \n與 className 的處理一樣\n```jsx\nfunction Box({className = '', style, ...rest}) {\n\treturn (\n\t\t\u003cdiv \n\t\t\tclassName={`box ${className}`} \n\t\t\tstyle={{fontStyle: 'italic', ...style}}\n\t\t\t{...rest} /\u003e\n\t)\n}\n```\n\n#js/react #css","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Styling/Inline-stylingJSX":{"title":"Inline styling(JSX)","content":"# Inline Styling\n\n\n```jsx\nconst App = () =\u003e  (\n  \u003cdiv\u003e\n    {/* 記得不要直接寫 font-size（不要寫 -） */}\n    \u003ch1 style= {{ color: \"blue\", fontSize: \"10rem\"}}\u003eMy Profile\u003c/h1\u003e\n  \u003c/div\u003e\n);\n```\n\n#js/react #css","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Styling/SCSSJSX":{"title":"SCSS(JSX)","content":"# SCSS (JSX)\n編譯完後的 CSS 檔可以直接匯到 `app.jsx` 內\n不用匯到 `main.jsx` （ `main` 只負責 render）\n\n```jsx\nimport React from 'react';\n// 匯入 css \nimport './styles/style.css';\n\nconst App = () =\u003e  (\n  \u003cdiv\u003e\n    {/* 測試 bs */}\n    \u003cbutton type=\"button\" class=\"btn btn-primary mr-3\" data-toggle=\"modal\" data-target=\"#exampleModal\"\u003eToggle example modal\u003c/button\u003e\n  \u003c/div\u003e\n);\n\nexport default App; \n```\n\n#js/react #css/scss","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Styling/Styling-in-JSX":{"title":"Styling in JSX","content":"# Styling in JSX\n- [[Inline styling(JSX)]]\n- [[SCSS(JSX)]]\n- Style Component\n\n- [[用元件處理 CSS Styling]]\n- [[class 或是 className]]\n\n\n#js/react #css/scss #css","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Styling/class-%E6%88%96%E6%98%AF-className":{"title":"class 或是 className","content":"# class 或是 className\nclassName 是一種 DOM 屬性\n但 class 在 JS 是保留字，不能拿來命名，用 className 比較保險\n\n#js/react #css","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Swiper/Swiper-Parameters":{"title":"Swiper Parameters","content":"# Swiper Parameters\n[Parameters](https://swiperjs.com/swiper-api#parameters)\n\n- `spaceBetween`：每 Slide 間的寬度，數字\n- `slidesPerView` ：一次顯示多少 Slide\n- `pagination` ：有沒有顯示現在第幾張的提示\n#swiper","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/Swiper/SwiperReact-%E7%92%B0%E5%A2%83":{"title":"Swiper(React 環境)","content":"# Swiper\n## 匯入\n### 模組\n```jsx\n// 主要匯入的元件\nimport { Swiper, SwiperSlide } from 'swiper/react';\n// 其他模組（\u003cSwiper\u003e 的 props）\nimport { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\n```\n### 樣式\n```jsx\n// Import Swiper styles\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport 'swiper/css/pagination';\nimport 'swiper/css/scrollbar';\n```\n## 初始設定（預設）\nJS 的話：\n```js\n// 第一個是預計放入 Swiper 的容器（這裡是用一個 html class 裝）\nconst swiper = new Swiper('.swiper', {\n\t// 第二個放入這個 Swiper 的自訂 Parameters\n  speed: 400,\n  spaceBetween: 100,\n});\n```\n\u003e請參照 [[Swiper Parameters]]\n```js\nconst swiper = document.querySelector('.swiper').swiper;\n\n// 建立 swiper 實例後就可以. 各種 Method, property 來使用\nswiper.slideNext();\n```\n\u003e請參照[Methods \u0026 Properties](https://swiperjs.com/swiper-api#methods-and-properties)\n\n## React 預設\nSwiper 元件不要放到 container 中，會跑版\n```jsx\nexport default () =\u003e {\n  return (\n    \u003cSwiper\n      // install Swiper modules\n      modules={[Navigation, Pagination, Scrollbar, A11y]}\n\t\t\t// 預設必兩個參數\n      spaceBetween={50}\n      slidesPerView={3}\n      navigation\n      pagination={{ clickable: true }}\n      scrollbar={{ draggable: true }}\n      onSwiper={(swiper) =\u003e console.log(swiper)}\n      onSlideChange={() =\u003e console.log('slide change')}\n    \u003e\n      \u003cSwiperSlide\u003eSlide 1\u003c/SwiperSlide\u003e\n      \u003cSwiperSlide\u003eSlide 2\u003c/SwiperSlide\u003e\n      \u003cSwiperSlide\u003eSlide 3\u003c/SwiperSlide\u003e\n      \u003cSwiperSlide\u003eSlide 4\u003c/SwiperSlide\u003e\n      ...\n    \u003c/Swiper\u003e\n  );\n};\n```\n\n#js/react #api #swiper","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/React/UUID":{"title":"UUID","content":"# UUID\n自動新增隨機的 UUID\n\u003e[npm](https://www.npmjs.com/package/uuid)\n\n```shell\nnpm i UUID\n```\n\n```js\nimport { v4 as uuidv4 } from 'uuid';\n```\n```js\n// 生成的時候寫這個\nuuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' \n```\n\n\u003e使用範例 [[Key prop]]\n\n#js/react  #node #npm #module","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/color-scheme-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F":{"title":"color-scheme 暗黑模式","content":"# color-scheme 暗黑模式\n可以透過 HTML 就做到基本的暗黑模式，\nhttps://www.youtube.com/watch?v=n3lcjY4Mm00","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/joi":{"title":"joi","content":"# joi\n\u003e[npm](https://www.npmjs.com/package/joi)\n\nValidators，可以客製化給客戶端的錯誤訊息\n\n#database #validators #js/mern","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/templates/post":{"title":"{{title}}","content":"","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/test-quartz/quartz-test":{"title":"quartz test","content":"[[test 2]]\n[test 2](frontend/test%20quartz/test%202.md)\n[[frontend/test quartz/test 2]]\n[test 2](frontend/test%20quartz/test%202.md)","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/test-quartz/test-2":{"title":"Untitled Page","content":"\n\n[[frontend/test quartz/quartz test]]","lastmodified":"2022-04-23T12:34:05.576865091Z","tags":null},"/frontend/webpack/webpack%E6%9C%AA%E5%AE%8C%E6%88%90":{"title":"webpack（未完成）","content":"# webpack（未完成）\nhttps://qiita.com/annaaida/items/f2c372000e8358ea8d8f\n[[webpack Get Started]]\n対してwebpackは、バンドルツールなのでバンドルに特化していて、**モジュール同士の依存関係をうまい具合に、かつ速く一枚のJavaScriptファイルにバンドル**してくれるものです。\n整理、最佳化模組內容，watch 模式中只會\n\nwebpackのバンドルが速いという話が出ましたが、なぜかと言うとwebpackのwatchモードでは差分ビルドといって前回保存分と今回の保存分との差のみバンドルしてくれるから。\n\nWebpackとは、CSSやJavaScript、画像など**Webコンテンツを構成するあらゆるファイル(アセット)を「モジュール」**という単位で取り扱い**「バンドル」という１つのファイルに最適な形で変換する**ためのツールです。（バンドルとは複数ファイルを1 枚のファイルにまとめること）\n\n・機能ごとにファイルを分割（モジュール化）する開発ができるから  \n・ジュール（npmなどでインストールできるパッケージなど）も利用できるから  \n・リクエスト数を減らせるから  \n・依存関係を解決したファイルを出力できるから\n\n\u003e`ビルド`  \nwebpackにおいての「ビルド」は「**バンドルを出力するまでの一連の処理**」という意味で使われていることが多い（気がする）。\n\n## 設定\n```js\n// webpack.config.js\n\n// output.pathに絶対パスを指定する必要があるため、pathモジュールを読み込んでおく\nconst path = require('path');\n\nmodule.exports = {\n  // モードの設定、v4系以降はmodeを指定しないと、webpack実行時に警告が出る\n\t// development, production, none\n  mode: 'development',\n  // エントリーポイントの設定，從這個檔案開始分析模組的依存關係\n  entry: './src/js/app.js',\n  // 出力の設定\n  output: {\n    // 出力するファイル名\n    filename: 'bundle.js',\n    // 出力先のパス（絶対パスを指定する必要がある）\n    path: path.join(__dirname, 'public/js')\n  }\n};\n```\n\n- `Loaders` 將圖像、CSS 等 JS 之外的檔案作為 JS 讀取，在 bundle 前的動作。画像やCSSなどの**JavaScript 以外のファイルをJavaScriptで扱えるように変換**したり、バンドルする前にモジュールに対して実行する機能のこと。TypeScriptをJavaScriptに変換、画像をDataURLに変換、コードをチェックするなど、ローダーによって機能は様々。\n\t- TS -\u003e JS\n\t- 圖像 -\u003e DataURL\n\t- 檢查程式碼等\n\n- `Plugins` モジュールのバンドル時に実行される様々な処理。バンドル時にやりたい処理を呼び出す。\n\n- `resolve` 特定の処理の指定、定義するやつ\n\n- `Browser Compatibility` （どのブラウザに対応するか）\n\n## env\nNode.jsの環境変数は、process.envというオブジェクトに格納されます。  \n環境変数というのは、アプリケーションを動作させる際の最も基本的な設定内容が入った箱のようなものです。\n\nproductionを指定すると本番環境を意味します。  \ndevelopmentを指定すると開発環境を意味します。  \n指定した内容に基づいた環境設定の動作を反映させることができます。\n\n## webpack-dev-serverとは\n\n簡易的にサーバーを立ち上げつつ「webpack」コマンドを実行してくれるもの\n\n## watchモード\n\n### [](https://qiita.com/annaaida/items/f2c372000e8358ea8d8f#npm-run-watch%E3%81%A8%E3%81%AF)npm run watchとは\n\n開発用のコマンドで、ファイルの変更を監視してブラウザに自動的に反映してくれる\n\n### [](https://qiita.com/annaaida/items/f2c372000e8358ea8d8f#npm-run-build%E3%81%A8%E3%81%AF)npm run buildとは\n\n本番公開用のコマンドで、トランスパイルされ圧縮をして「public」フォルダに吐き出す\n\n\nhttps://goworkship.com/magazine/how-to-webpack/\n![](https://i0.wp.com/goworkship.com/magazine/app/uploads/2018/09/before-2.png?resize=840%2C473\u0026ssl=1)\n\n#webpack #js/react","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/frontend/webpack/webpack-Get-Started":{"title":"webpack Get Started","content":"## SASS 設定\n建議的 sass-loader： [[dart-sass(sass) 建置]]\n\n```shell\nnpm install sass-loader sass webpack --save-dev\n```\n```js\nrules: [\n\t{\n\t\ttest: /\\.css$/i,\n\t\t// css 設定中再 chain 一個 'sass-loader'\n\t\tuse: ['style-loader', 'css-loader', 'sass-loader'],\n\t},\n]\n```\n\n\n## 開發工具\n像是 live server 的工具\n1.  webpack's [Watch Mode](https://webpack.js.org/configuration/watch/#watch)：需要重整\n2.  [webpack-dev-server](https://github.com/webpack/webpack-dev-server)：平常都是用這個\n3.  [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware)\n\n## 除 bug\n// tell you where the bug came from\n\ndevtool: 'inline-source-map',\n\n## code splitting \nhttps://webpack.js.org/guides/code-splitting/\n可以同時讀取不同 bundle，加速讀取速度\n\n\n#webpack #js/react","lastmodified":"2022-04-23T12:34:05.580865117Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/notes/config":{"title":"Configuration","content":"## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml\nname: Your name here! # Shows in the footer\nenableToc: true # Whether to show a Table of Contents\nenableLinkPreview: true # whether to render card previews for links\ndescription: Page description to show to search engines\npage_title: Quartz Example Page # Default Page Title\n\nlinks: # Links to show in footer\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml\nenableLegend: false # automatically generate a legend\nenableDrag: true # allow dragging nodes in the graph\nenableZoom: true # allow zooming and panning the graph\ndepth: -1 # how many neighbours of the current node to show (-1 is all nodes)\npaths: # colour specific nodes path off of their path\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what actually gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Multilingual\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/notes/custom-Domain":{"title":"Custom Domain","content":"### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"---\n\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n🔗 [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.*\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```markdown","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"---\n\n## GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`.\n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`.\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"---\n\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown","lastmodified":"2022-04-23T12:34:05.636865474Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!","lastmodified":"2022-04-23T12:34:05.640865499Z","tags":null},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.","lastmodified":"2022-04-23T12:34:05.640865499Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"If you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```shell\n# Install and link `hugo-obsidian` locally\n$ go install github.com/jackyzha0/hugo-obsidian@latest\n\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Scrape all links in your Quartz folder and generate info for Quartz\n$ hugo-obsidian -input=content -output=assets/indices -index -root=.\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\n$ hugo server\n\n# View your site in a browser at http://localhost:1313/\n```","lastmodified":"2022-04-23T12:34:05.640865499Z","tags":null},"/notes/setup":{"title":"Setup","content":"## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\n$ git clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n✏️ [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Updating\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n\n# or, if you don't want the interactive parts and just want the update\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e ⚠️ **WARNING** ⚠️\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```","lastmodified":"2022-04-23T12:34:05.640865499Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"Want to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://garden.jzhao.xyz/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!","lastmodified":"2022-04-23T12:34:05.640865499Z","tags":null},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"Still having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2022-04-23T12:34:05.640865499Z","tags":null}}